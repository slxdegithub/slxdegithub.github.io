<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker-linux</title>
      <link href="/2022/01/23/docker-linux/"/>
      <url>/2022/01/23/docker-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux安装docker"><a href="#Linux安装docker" class="headerlink" title="Linux安装docker"></a>Linux安装docker</h3><ol><li><p>确定你是<code>centos7</code>以上的版本 并且能联网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">cat /etc/redhat-release #查看centos的版本<br></code></pre></td></tr></table></figure></li><li><p>各种环境</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">yum -y install gcc  <span class="hljs-comment">#yum安装gcc相关</span><br>yum -y install gcc-c++<br>yum install -y yum-utils  <span class="hljs-comment">#安装需要的软件包</span><br>yum makecache fast  <span class="hljs-comment">#更新yum软件包索引</span><br>yum update  <span class="hljs-comment">#。。。</span><br></code></pre></td></tr></table></figure></li><li><p>设置stable镜像库 二选一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#官网版本 听说有坑<br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><br>#建议版本 阿里<br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>更新yum软件包索引</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum makecache fast</span><br></code></pre></td></tr></table></figure></li><li><p>下载安装docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">yum -y install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">systemctl start docker<br><br>#查看docker状态<br>systemctl status docker<br></code></pre></td></tr></table></figure></li><li><p>如果启动失败</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/docker/dk01.png" alt="image-20220106142830880"></p></li><li><p>更改配置文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">vim /etc/docker/daemon.json<br><span class="hljs-comment">#有一些人安装的docker可能没有这个文件 没有的话就自己创建一个</span><br><span class="hljs-comment">#将这段复制进去   或者自己的阿里云加速器地址</span><br>&#123;<br> registry-mirrors<span class="hljs-string">&quot;:[&quot;</span>https://docker.mirrors.ustc.edu.cn<span class="hljs-string">&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">#重新加载</span><br><span class="hljs-string">systemctl daemon-reload</span><br><span class="hljs-string">#重启docker服务</span><br><span class="hljs-string">systemctl restart docker</span><br><span class="hljs-string"></span><br><span class="hljs-string">#查看docker状态</span><br><span class="hljs-string">systemctl status docker</span><br></code></pre></td></tr></table></figure></li><li><p>上面能解决大部分人的问题。，但是如果还出错（<strong>比如我</strong>）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#把daemon.json 更名为daemon.conf</span><br>mv /etc/docker/daemon.json /etc/docker/daemon.conf<br><br><span class="hljs-comment">#然后</span><br>yum update xfsprogs<br><span class="hljs-comment">#重新加载</span><br>systemctl daemon-reload<br><span class="hljs-comment">#重启docker服务</span><br>systemctl restart docker<br><br><span class="hljs-comment">#手动启动</span><br>/usr/bin/dockerd<br><br><span class="hljs-comment">#然后莫名其妙就好了。。。</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><p>重新安装之前要记得卸掉 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#先停掉</span><br>systemctl stop docker<br><span class="hljs-comment">#查看安装旧版本的docker并卸载</span><br>yum remove docker-ce docker-ce-cli containerd.io<br><br>rm -rf /var/lib/docker<br>rm -rf /var/lib/containerd<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-containerVolume</title>
      <link href="/2022/01/23/docker-containerVolume/"/>
      <url>/2022/01/23/docker-containerVolume/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker容器卷"><a href="#Docker容器卷" class="headerlink" title="Docker容器卷"></a>Docker容器卷</h3><p>踩坑：</p><p>​    Docker挂载主机目录访问如果出现cannot open directory .: Permission denied</p><blockquote><p>解决办法：在挂载目录后多加一个–privileged=true参数即可</p></blockquote><p>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，<br>在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用–privileged=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p><ol><li><p>是什么？</p><ul><li>有点类似我们<code>Redis</code>里面的<code>rdb</code>和<code>aof</code>文件</li><li>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</li><li>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷</li></ul></li><li><p>能干嘛？</p><blockquote><p>将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是持久化的</p><p>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。</p><p>为了能保存数据在docker中我们使用卷。</p></blockquote><p>特点：</p><p>1：数据卷可在容器之间共享或重用数据</p><p>2：卷中的更改可以直接实时生效，爽</p><p>3：数据卷中的更改不会包含在镜像的更新中</p><p>4：数据卷的生命周期一直持续到没有容器使用它为止</p></li><li><p>命令创建</p><ul><li><p> docker run -it –privileged=true -v /宿主机绝对路径目录:/容器内目录   镜像名</p></li><li><p>–带权限：docker run -it –privileged=true -v /宿主机绝对路径目录:/容器内目录:<code>ro</code> 镜像名</p><blockquote><p><code>ro  read only</code> 只读  是容器只读，主机可以修改创建文件。 -v可以挂载多个</p></blockquote><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/docker/dk11.png" alt="image-20220122193524258"></p></li></ul></li><li><p>查看数据卷是否挂载成功</p><blockquote><p>docker inspect 容器ID</p></blockquote><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/docker/dk12.png" alt="image-20220122193817876"></p></li><li><p>容器和宿主机之间数据共享</p><ul><li><p>docker修改，主机同步获得 </p></li><li><p>主机修改，docker同步获得</p></li><li><p>docker容器stop，主机修改，docker容器重启，数据依然能同步。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/docker/dk13.png" alt="image-20220122194252886"></p></li></ul></li><li><p>读写规则映射添加说明</p><ol><li><p>读写(默认)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> -v /宿主机绝对路径目录:/容器内目录:rw      镜像名<br></code></pre></td></tr></table></figure><p>默认不写就是添加rw</p></li><li><p>只读（容器实例内部被限制，只能读取不能写）</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"> docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--privileged=true -v /宿主机绝对路径目录:/容器内目录:ro      镜像名</span><br><br>/容器目录:ro 镜像名               就能完成功能，此时容器自己只能读取不能写<br>ro = <span class="hljs-built_in">read</span> only<br>此时如果宿主机写入内容，可以同步给容器内，容器可以读取到。<br></code></pre></td></tr></table></figure></li></ol></li><li><p>卷的继承和共享</p><ol><li><p>前面已经完成了centos（容器1）和宿主机的容器卷映射</p></li><li><p>实现容器2继承容器1的卷</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -it  <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> --volumes-from 父容器名或Id  --name myCentos2 镜像名或Id<br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/docker/dk14.png" alt="image-20220122195927214"></p></li><li><p>可以看到之前的数据也直接继承过来了</p></li><li><p>接下来停掉容器1（<code>myCentos</code>），用容器2（<code>myCentos2</code>）创建文件,再启动容器1</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/docker/dk15.png" alt="image-20220122201051533"></p></li><li><p>发现数据依然共享。</p></li></ol></li></ol><blockquote><p>容器间的传递共享，相当于容器间共享了一块区域，和谁先继承谁后继承没有关系。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-command</title>
      <link href="/2022/01/23/docker-command/"/>
      <url>/2022/01/23/docker-command/</url>
      
        <content type="html"><![CDATA[<h3 id="docker基本命令"><a href="#docker基本命令" class="headerlink" title="docker基本命令"></a>docker基本命令</h3><ol><li><p>启动docker</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">systemctl start docker <span class="hljs-comment">#启动docker</span><br>systemctl stop docker  <span class="hljs-comment">#停止docker</span><br>systemctl restart docker <span class="hljs-comment">#重启docker</span><br>systemctl status docker <span class="hljs-comment">#查看docker状态 </span><br></code></pre></td></tr></table></figure></li><li><p>docker自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">systemctl enable docker #设置docker开启自启动<br></code></pre></td></tr></table></figure></li></ol><h3 id="docker镜像命令"><a href="#docker镜像命令" class="headerlink" title="docker镜像命令"></a>docker镜像命令</h3><ol><li><p>镜像</p><blockquote><ol><li>docker images 查看本机上的镜像  镜像也可以分层</li><li>docker images xxx  搜索本机镜像 </li><li>docker images pull 镜像名   下载</li></ol></blockquote></li><li><p><code>docker run -it --name mycentos centos:TAG +各种参数</code></p><blockquote><p>run是从镜像中启动一个新的容器，需要配置一些参数<br><code>docker run -it centos</code>  新从镜像中创建运行一个容器 </p></blockquote></li><li><p><code>docker ps</code> 列出当前正在运行的容器  <code>docker ps -a</code> 列出所有的容器</p></li><li><p>删除镜像</p><ul><li>删除单个： <code>docker rmi -f + 镜像id</code> </li><li>删除多个:  <code>docker rmi -f 镜像名：TAG 镜像名2：TAG</code></li><li>删除全部:  <code>docker rmi -f $(docker images -qa)</code>  #危</li></ul></li><li><p>docker system df   #查看镜像/容器/数据卷所占的空间</p></li></ol><h3 id="docker容器命令"><a href="#docker容器命令" class="headerlink" title="docker容器命令"></a>docker容器命令</h3><ol><li><p>创建容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> [OPTIONS] IMAGE [COMMAND] [ARG...]   </span><br><br>--name=<span class="hljs-string">&quot;容器新名字&quot;</span>       <span class="hljs-comment">#为容器指定一个名称；</span><br>-d: <span class="hljs-comment">#后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</span><br>后台守护，比如redis mysql  后台启动放着就行了 不需要前台交互<br>不然容易被关闭 不让进去<br>-i：<span class="hljs-comment">#以交互模式运行容器，通常与 -t 同时使用；</span><br>-t：<span class="hljs-comment">#为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="hljs-comment">#也即启动交互式容器(前台有伪终端，等待交互)；</span><br>可以在挂着 可以和前台交互<br>-P: <span class="hljs-comment">#随机端口映射，大写P</span><br>-p: <span class="hljs-comment">#指定端口映射，小写p</span><br></code></pre></td></tr></table></figure></li><li><p>查看容器</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;docker ps  #查看正在运行的容器<br>&gt;docker ps -a #查看所有容器<br><br>&gt;-a  # 显示所有的容器，包括未运行的<br>&gt;-f  # 根据条件过滤显示的内容<br>&gt;-l  # 显示最近创建的容器<br>&gt;-n  # 列出最近创建的n个容器<br>&gt;-q  # 静默模式，只显示容器编号<br>&gt;-s  # 显示总的文件大小<br>&gt;--format    # 指定返回值的模板文件<br>&gt;--no-trunc  # 不截断输出<br></code></pre></td></tr></table></figure></blockquote></li><li><p>启动容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#start是从已经存在的容器中重新开始启动，不需要配置参数，只需要名称就行</span><br>docker start +容器ID或者容器名称<br><br><span class="hljs-comment">#重启容器或者重新进入容器、</span><br>docker restart +容器ID或者容器名称 重启容器<br></code></pre></td></tr></table></figure></li><li><p>设置容器自启动</p><ul><li>创建容器时设置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">docker run -d --restart=always --name 设置容器名 使用的镜像<br>#（上面命令  --name后面两个参数根据实际情况自行修改）<br># Docker 容器的重启策略如下：<br> --restart具体参数值详细信息：<br>       no　　　　　　　 # 默认策略,容器退出时不重启容器；<br>       on-failure　　  # 在容器非正常退出时（退出状态非0）才重新启动容器；<br>       on-failure:3    # 在容器非正常退出时重启容器，最多重启3次；<br>       always　　　　  # 无论退出状态是如何，都重启容器；<br>       unless-stopped  # 在容器退出时总是重启容器，不考虑在 Docker 守护进程启动时就已经停止了的容器。<br></code></pre></td></tr></table></figure><ul><li>修改已经有的容器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#如果创建时未指定 --restart=always，可通过update 命令设置<br>docker update --restart=always 容器ID(或者容器名)<br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>用docker自带的–link把多个容器链接在一起，有重启或升级的问题，比如很多容器都依赖于 db 这个容器，然后db容器重启了，重启时docker分配的<code>ip</code>会变，导致其他依赖于db的容器都要重启。</li><li>–link 链接的容器还有启动顺序的问题， 需要先启动db容器再启动其他依赖于db的容器， 这样导致 –link和–restart=always 不能一起用， 如果一起用会发现宿主机重启了， docker容器并没有全部重启，因为这时候docker容器是同时被启动的，并不知道启动顺序。 </li><li>最后决定不用 –link 链接容器了。<br>Docker容器开机自动启动（在宿主机重启后或者Docker服务重启后）</li></ul></li><li><p>退出容器 </p><ol><li><code>exit 容器停止并且退出</code></li><li><code>Ctrl+P + Q 容器不停止退出  先Ctrl + P 再Q</code></li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;docker stop +容器ID  #温柔关闭<br>&gt;docker kill +容器Id    #直接杀死<br></code></pre></td></tr></table></figure></blockquote></li><li><p>查看容器信息(内部细节)</p><blockquote><p>docker inspect  容器名称或ID   </p></blockquote></li><li><p>删除容器</p><blockquote><p><code>docker rm</code> +容器id 删除未运行的<br><code>docker rm -f</code> 容器id 强行删除容器<br><code>docker rm -f $(docker ps -qa)</code> 删除所有容器<br><code>docker ps -a -q |xargs docker rm</code> 一次性删除多个容器，参数传给args</p></blockquote></li><li><p>进入容器</p><blockquote><p>docker attach 容器ID  进入正在运行的容器<br>attach早已过时了，因为是公用一个终端，当这个终端被一个容器所占用的时候，这个时候attach 其他容器，就会造成堵塞。</p><p>所以尽量使用exec   </p><p><code>docker exec -it containerID /bin/bash</code><br>docker exec 容器ID<br>docker exec 容器ID  + 进入的命令  比如ls -l等等 可以远程直接开命令<br>exec 是在容器中打开新的终端，并且可以启动新的进程 功能更强大一些</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">&gt;attach 直接进入容器启动命令的终端，不会启动新的进程<br>&gt;用<span class="hljs-keyword">exit</span>退出，会导致容器的停止。<br><br>&gt;exec 是在容器中打开新的终端，并且可以启动新的进程<br>&gt;用<span class="hljs-keyword">exit</span>退出，不会导致容器的停止。<br></code></pre></td></tr></table></figure></blockquote></li><li><p><strong>容器重要命令</strong></p><ul><li>​    启动守护式容器 docker run -d 容器名</li><li>​    查看容器日志 docker logs -t 容器id    -t是加上时间 -f打印最新日志  -tail 最后几条、</li><li>​    docker attach 容器ID  进入正在运行的容器 </li><li>​    docker exec 容器ID  + 进入的命令  比如ls -l等等 可以远程直接开命令</li><li>​    exec 是在容器中打开新的终端，并且可以启动新的进程 功能更强大一些</li><li>​    从容器内部拷贝文件到主机上 ：<code>docker cp</code> 容器ID:容器内路径 目的主机路径</li></ul></li><li><p>容器备份</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#export 导出容器的内容留作为一个tar归档文件[对应import命令]</span><br>docker export 容器ID &gt; 文件名.tar    <span class="hljs-comment">#默认导出到当前目录 可以自己选择路径</span><br><br><span class="hljs-comment">#import 从tar包中的内容创建一个新的文件系统再导入为镜像[对应export]  注意-两旁要有空格</span><br>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号<br></code></pre></td></tr></table></figure></li><li><p>docker提交容器到镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> commit - m=<span class="hljs-string">&quot;add vim cmd&quot;</span> - a=<span class="hljs-string">&quot;author&quot;</span> 容器ID 新的容器名称:版本号<br><span class="hljs-attribute">docker</span> commit -m=<span class="hljs-string">&quot;我的mysql&quot;</span> -a=<span class="hljs-string">&quot;龙龙&quot;</span> ce<span class="hljs-number">33</span>ab<span class="hljs-number">3</span>a<span class="hljs-number">9</span>e<span class="hljs-number">8</span>a lll/mysql<span class="hljs-number">5</span>.<span class="hljs-number">7</span>:<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus快速入门及增删改查（一）</title>
      <link href="/2022/01/20/MybatisPlus01/"/>
      <url>/2022/01/20/MybatisPlus01/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus快速入门及增删改查（一）"><a href="#Mybatis-plus快速入门及增删改查（一）" class="headerlink" title="Mybatis-plus快速入门及增删改查（一）"></a>Mybatis-plus快速入门及增删改查（一）</h1><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h1><h2 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h2><p><a href="http://mp.baomidou.com/guide/">http://mp.baomidou.com</a></p><h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/8243a73e-92f7-48d5-8da6-e12db25eb6ff.jpg" alt="img"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/164a3436-f587-4c6b-b392-150b01a61e34.png" alt="img">3、支持数据库mysql 、mariadb 、oracle 、db2 、h2 、hsql 、sqlite 、postgresql 、sqlserver 、presto 、Gauss 、FirebirdPhoenix 、clickhouse 、Sybase ASE 、 OceanBase 、达梦数据库 、虚谷数据库 、人大金仓数据库 、南大通用数据库 、<br>4、框架结构<img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/0.9764681929112536.png" alt="framework"></p><h1 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h1><h2 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h2><p>创建数据库：mybatis_plus</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/a4b87eb9-cbba-456a-b21a-b4ed3b80a25c.png" alt="img"></p><p>创建数据表：user</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user<br>(<br>    id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,<br>    name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>    age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>    PRIMARY KEY (id)<br>);<br>INSERT INTO user (id, name, age, email) VALUES<br>(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),<br>(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),<br>(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),<br>(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),<br>(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);<br></code></pre></td></tr></table></figure><h2 id="2、创建SpringBoot工程（也可以将工程创建在项目中）"><a href="#2、创建SpringBoot工程（也可以将工程创建在项目中）" class="headerlink" title="2、创建SpringBoot工程（也可以将工程创建在项目中）"></a><strong>2、创建SpringBoot工程（也可以将工程创建在项目中）</strong></h2><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/a7a445f4-ddba-4ab4-b5f3-9ddd075cef5c.png" alt="img"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/3abd24c0-ae99-4a10-87fa-325f856663d5.png" alt="img"></p><h2 id="3、引入依赖"><a href="#3、引入依赖" class="headerlink" title="3、引入依赖"></a>3、引入依赖</h2><p>注意：SpringBoot版本修改为2.3.4 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、修改配置文件"><a href="#4、修改配置文件" class="headerlink" title="4、修改配置文件"></a><strong>4、修改配置文件</strong></h2><p>在 <code>application.properties</code> 配置文件中添加 MySQL 数据库的相关配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>如果定义了mysql驱动的依赖的版本为5，例如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;version&gt;</span><span class="hljs-attribute">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">47</span>&lt;/version&gt;<br></code></pre></td></tr></table></figure><p>则数据库连接配置为</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=true</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="5、创建实体类"><a href="#5、创建实体类" class="headerlink" title="5、创建实体类"></a>5、创建实体类</h2><p>创建包 entity，编写实体类 <code>User.java，并使用lombok简化实体类的编写</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看编译结果</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/d4e6f667-b630-474a-b743-9d4cea9731fd.jpg" alt="img"></p><h2 id="6、创建mapper接口"><a href="#6、创建mapper接口" class="headerlink" title="6、创建mapper接口"></a>6、创建mapper接口</h2><p>创建包 mapper，编写Mapper 接口： <code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7、启动类添加注解"><a href="#7、启动类添加注解" class="headerlink" title="7、启动类添加注解"></a>7、启动类添加注解</h2><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusApplication</span> </span>&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h2><p>添加测试类，进行功能测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusApplicationTests</span> </span>&#123;<br>    <span class="hljs-comment">//@Autowired //默认按类型装配。是spring的注解</span><br>    <span class="hljs-meta">@Resource</span> <span class="hljs-comment">//默认按名称装配，找不到与名称匹配的bean，则按照类型装配。是J2EE的注解</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testSelectList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//selectList()方法的参数：封装了查询条件</span><br>        <span class="hljs-comment">//null：无任何查询条件</span><br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-keyword">null</span>);<br>        users.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</p><h2 id="补充、查看sql输出日志"><a href="#补充、查看sql输出日志" class="headerlink" title="补充、查看sql输出日志"></a>补充、查看sql输出日志</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h1 id="三、通用Mapper"><a href="#三、通用Mapper" class="headerlink" title="三、通用Mapper"></a>三、通用Mapper</h1><p>MP中的基本CRUD在内置的BaseMapper中都已得到了实现。</p><p>创建MapperTests测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatisplus;<br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTests</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1、Create"><a href="#1、Create" class="headerlink" title="1、Create"></a>1、Create</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setName(<span class="hljs-string">&quot;Helen&quot;</span>);<br>    user.setAge(<span class="hljs-number">18</span>);<br>    <span class="hljs-comment">//不设置email属性，则生成的动态sql中不包括email字段</span><br>    <span class="hljs-keyword">int</span> result = userMapper.insert(user);<br>    System.out.println(<span class="hljs-string">&quot;影响的行数：&quot;</span> + result); <span class="hljs-comment">//影响的行数</span><br>    System.out.println(<span class="hljs-string">&quot;id：&quot;</span> + user.getId()); <span class="hljs-comment">//id自动回填</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、Retrieve"><a href="#2、Retrieve" class="headerlink" title="2、Retrieve"></a>2、Retrieve</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//按id查询</span><br>    User user = userMapper.selectById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>    <span class="hljs-comment">//按id列表查询</span><br>    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    users.forEach(System.out::println);<br>    <span class="hljs-comment">//按条件查询</span><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Helen&quot;</span>); <span class="hljs-comment">//注意此处是表中的列名，不是类中的属性名</span><br>    map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<br>    List&lt;User&gt; users1 = userMapper.selectByMap(map);<br>    users1.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、Update"><a href="#3、Update" class="headerlink" title="3、Update"></a>3、Update</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setId(<span class="hljs-number">1L</span>);<br>    user.setAge(<span class="hljs-number">28</span>);<br>    <span class="hljs-comment">//注意：update时生成的sql自动是动态sql</span><br>    <span class="hljs-keyword">int</span> result = userMapper.updateById(user);<br>    System.out.println(<span class="hljs-string">&quot;影响的行数：&quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、Delete"><a href="#4、Delete" class="headerlink" title="4、Delete"></a>4、Delete</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> result = userMapper.deleteById(<span class="hljs-number">5</span>);<br>    System.out.println(<span class="hljs-string">&quot;影响的行数：&quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、通用Service"><a href="#四、通用Service" class="headerlink" title="四、通用Service"></a>四、通用Service</h1><p>MP中有一个接口 IService和其实现类 ServiceImpl，封装了常见的业务层逻辑</p><h2 id="1、创建Service接口"><a href="#1、创建Service接口" class="headerlink" title="1、创建Service接口"></a>1、创建Service接口</h2><p>创建 service 包，创建 UserService，继承 IService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、创建Service实现类"><a href="#2、创建Service实现类" class="headerlink" title="2、创建Service实现类"></a>2、创建Service实现类</h2><p>创建 impl 包，创建 UserServiceImpl，继承 ServiceImpl，实现 UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">UserMapper</span>, <span class="hljs-title">User</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、创建测试类"><a href="#3、创建测试类" class="headerlink" title="3、创建测试类"></a>3、创建测试类</h2><p>创建ServiceTests</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceTests</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、测试记录数"><a href="#4、测试记录数" class="headerlink" title="4、测试记录数"></a>4、测试记录数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCount</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> count = userService.count();<br>    System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span> + count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、测试批量插入"><a href="#5、测试批量插入" class="headerlink" title="5、测试批量插入"></a>5、测试批量插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSaveBatch</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// SQL长度有限制，海量数据插入单条SQL无法实行，</span><br>    <span class="hljs-comment">// 因此MP将批量插入放在了通用Service中实现，而不是通用Mapper</span><br>    ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;Helen&quot;</span> + i);<br>        user.setAge(<span class="hljs-number">10</span> + i);<br>        users.add(user);<br>    &#125;<br>    userService.saveBatch(users);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、自定义Mapper"><a href="#五、自定义Mapper" class="headerlink" title="五、自定义Mapper"></a>五、自定义Mapper</h1><p>当通用Mapper无法满足我们的需求时，我们可以自定义基于Mapper接口的xml文件，并在xml文件中配置SQL语句</p><h2 id="1、接口方法定义"><a href="#1、接口方法定义" class="headerlink" title="1、接口方法定义"></a>1、接口方法定义</h2><p>在UserMapper接口中定义如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectAllByName</span><span class="hljs-params">(String name)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="2、创建xml文件"><a href="#2、创建xml文件" class="headerlink" title="2、创建xml文件"></a>2、创建xml文件</h2><p>在resources目录中创建mapper目录，创建UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mybatisplus.mapper.UserMapper&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span><br>       id, name, age, email<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatisplus.entity.User&quot;</span>&gt;</span><br>        select<br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>/&gt;</span><br>        from user<br>        where<br>        name = #&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：MP中mapper目录是持久层映射文件的默认目录，如果是其他目录，需要配置mapper-locations，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:xml/*.xml</span><br></code></pre></td></tr></table></figure><h2 id="3、测试条件查询"><a href="#3、测试条件查询" class="headerlink" title="3、测试条件查询"></a>3、测试条件查询</h2><p>在MapperTests中创建如下测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectAllByName</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; users = userMapper.selectAllByName(<span class="hljs-string">&quot;Helen&quot;</span>);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、自定义Service"><a href="#六、自定义Service" class="headerlink" title="六、自定义Service"></a>六、自定义Service</h1><h2 id="1、添加接口方法"><a href="#1、添加接口方法" class="headerlink" title="1、添加接口方法"></a>1、添加接口方法</h2><p>UserService中添加接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">listAllByName</span><span class="hljs-params">(String name)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="2、实现接口方法"><a href="#2、实现接口方法" class="headerlink" title="2、实现接口方法"></a>2、实现接口方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">listAllByName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-comment">// baseMapper对象指向当前业务的mapper对象</span><br>    <span class="hljs-keyword">return</span> baseMapper.selectAllByName(<span class="hljs-string">&quot;Helen&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>ServiceTests中添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testListAllByName</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; users = userService.listAllByName(<span class="hljs-string">&quot;Helen&quot;</span>);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus条件构造器各种用法（三）</title>
      <link href="/2022/01/20/MybatisPlus03/"/>
      <url>/2022/01/20/MybatisPlus03/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus条件构造器各种用法（三）"><a href="#Mybatis-plus条件构造器各种用法（三）" class="headerlink" title="Mybatis-plus条件构造器各种用法（三）"></a>Mybatis-plus条件构造器各种用法（三）</h1><h1 id="一、wapper介绍"><a href="#一、wapper介绍" class="headerlink" title="一、wapper介绍"></a><strong>一、wapper介绍</strong></h1><h2 id="1、Wrapper家族"><a href="#1、Wrapper家族" class="headerlink" title="1、Wrapper家族"></a>1、Wrapper家族</h2><p>在MP中我们可以使用通用Mapper（BaseMapper）实现基本查询，也可以使用自定义Mapper（自定义XML）来实现更高级的查询。当然你也可以结合条件构造器来方便的实现更多的高级查询。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/27b56b5e-39a6-42ba-b7ed-4f109b6ad7bf.png" alt="img"></p><p>Wrapper ： 条件构造抽象类，最顶端父类  </p><p>  AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</p><p>​    QueryWrapper ： 查询条件封装</p><p>​    UpdateWrapper ： Update 条件封装</p><p>  AbstractLambdaWrapper ： 使用Lambda 语法</p><p>​    LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</p><p>​    LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p><h2 id="2、创建测试类"><a href="#2、创建测试类" class="headerlink" title="2、创建测试类"></a>2、创建测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WrapperTests</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、QueryWrapper"><a href="#二、QueryWrapper" class="headerlink" title="二、QueryWrapper"></a>二、QueryWrapper</h1><h2 id="1、例1：组装查询条件"><a href="#1、例1：组装查询条件" class="headerlink" title="1、例1：组装查询条件"></a><strong>1</strong>、例1：组装查询条件</h2><p>查询名字中包含n，年龄大于等于10且小于等于20，email不为空的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper<br>        .like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>)<br>        .between(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>        .isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、例2：组装排序条件"><a href="#2、例2：组装排序条件" class="headerlink" title="2、例2：组装排序条件"></a><strong>2、例2：组装排序条件</strong></h2><p>按年龄降序查询用户，如果年龄相同则按id升序排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper<br>        .orderByDesc(<span class="hljs-string">&quot;age&quot;</span>)<br>        .orderByAsc(<span class="hljs-string">&quot;id&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、例3：组装删除条件"><a href="#3、例3：组装删除条件" class="headerlink" title="3、例3：组装删除条件"></a><strong>3、例3：组装删除条件</strong></h2><p>删除email为空的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.isNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    <span class="hljs-keyword">int</span> result = userMapper.delete(queryWrapper); <span class="hljs-comment">//条件构造器也可以构建删除语句的条件</span><br>    System.out.println(<span class="hljs-string">&quot;delete return count = &quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、例4：条件的优先级"><a href="#4、例4：条件的优先级" class="headerlink" title="4、例4：条件的优先级"></a>4、例4：条件的优先级</h2><p>查询名字中包含n，且（年龄小于18或email为空的用户），并将这些用户的年龄设置为18，邮箱设置为 <a href="mailto:&#x75;&#x73;&#x65;&#114;&#x40;&#97;&#116;&#103;&#117;&#105;&#103;&#x75;&#x2e;&#x63;&#111;&#109;">&#x75;&#x73;&#x65;&#114;&#x40;&#97;&#116;&#103;&#117;&#105;&#103;&#x75;&#x2e;&#x63;&#111;&#109;</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//修改条件</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper<br>        .like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>)<br>        .and(i -&gt; i.lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>)); <span class="hljs-comment">//lambda表达式内的逻辑优先运算</span><br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setAge(<span class="hljs-number">18</span>);<br>    user.setEmail(<span class="hljs-string">&quot;user@atguigu.com&quot;</span>);<br>    <span class="hljs-keyword">int</span> result = userMapper.update(user, queryWrapper);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5、例5：组装select子句</strong></p><p>查询所有用户的用户名和年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.select(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>);<br>    <br>    <span class="hljs-comment">//selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为null</span><br>    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);<span class="hljs-comment">//返回值是Map列表</span><br>    maps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、例6：实现子查询"><a href="#6、例6：实现子查询" class="headerlink" title="6、例6：实现子查询"></a><strong>6、例6：实现子查询</strong></h2><p>查询id不大于3的所有用户的id列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.inSql(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;select id from user where id &lt;= 3&quot;</span>);<br>    <span class="hljs-comment">//selectObjs的使用场景：只返回一列</span><br>    List&lt;Object&gt; objects = userMapper.selectObjs(queryWrapper);<span class="hljs-comment">//返回值是Object列表</span><br>    objects.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><p>但上面的方式容易引发sql注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">queryWrapper.inSql(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;select id from user where id &lt;= 3 or true&quot;</span>); <span class="hljs-comment">// 或插叙出所有用户id</span><br></code></pre></td></tr></table></figure><p>可是使用下面的查询方式替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">queryWrapper.in(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> );<br><span class="hljs-comment">// 或</span><br>queryWrapper.le(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">3</span> );<br></code></pre></td></tr></table></figure><h1 id="三、UpdateWrapper"><a href="#三、UpdateWrapper" class="headerlink" title="三、UpdateWrapper"></a>三、UpdateWrapper</h1><h2 id="例7：需求同例4"><a href="#例7：需求同例4" class="headerlink" title="例7：需求同例4"></a><strong>例7：需求同例4</strong></h2><p>查询名字中包含n，且（年龄小于18或email为空的用户），并将这些用户的年龄设置为18，邮箱设置为 <a href="mailto:&#x75;&#x73;&#x65;&#114;&#x40;&#x61;&#116;&#x67;&#117;&#105;&#x67;&#117;&#x2e;&#99;&#111;&#109;">&#x75;&#x73;&#x65;&#114;&#x40;&#x61;&#116;&#x67;&#117;&#105;&#x67;&#117;&#x2e;&#99;&#111;&#109;</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//组装set子句</span><br>    UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>    updateWrapper<br>        .set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>)<br>        .set(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;user@atguigu.com&quot;</span>)<br>        .like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>)<br>        .and(i -&gt; i.lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>)); <span class="hljs-comment">//lambda表达式内的逻辑优先运算</span><br>    <span class="hljs-comment">//这里必须要创建User对象，否则无法应用自动填充。如果没有自动填充，可以设置为null</span><br>    User user = <span class="hljs-keyword">new</span> User();<br>    <span class="hljs-keyword">int</span> result = userMapper.update(user, updateWrapper);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、condition"><a href="#四、condition" class="headerlink" title="四、condition"></a>四、condition</h1><h2 id="例8：动态组装查询条件"><a href="#例8：动态组装查询条件" class="headerlink" title="例8：动态组装查询条件"></a>例8：动态组装查询条件</h2><p>查询名字中包含n，年龄大于10且小于20的用户，查询条件来源于用户输入，是可选的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//定义查询条件，有可能为null（用户未输入）</span><br>    String name = <span class="hljs-keyword">null</span>;<br>    Integer ageBegin = <span class="hljs-number">10</span>;<br>    Integer ageEnd = <span class="hljs-number">20</span>;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(name))&#123;<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ageBegin != <span class="hljs-keyword">null</span>)&#123;<br>        queryWrapper.ge(<span class="hljs-string">&quot;age&quot;</span>, ageBegin);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ageEnd != <span class="hljs-keyword">null</span>)&#123;<br>        queryWrapper.le(<span class="hljs-string">&quot;age&quot;</span>, ageEnd);<br>    &#125;<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8Condition</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//定义查询条件，有可能为null（用户未输入）</span><br>    String name = <span class="hljs-keyword">null</span>;<br>    Integer ageBegin = <span class="hljs-number">10</span>;<br>    Integer ageEnd = <span class="hljs-number">20</span>;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper<br>        .like(StringUtils.isNotBlank(name), <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>)<br>        .ge(ageBegin != <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;age&quot;</span>, ageBegin)<br>        .le(ageEnd != <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;age&quot;</span>, ageEnd);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、LambdaXxxWrapper"><a href="#五、LambdaXxxWrapper" class="headerlink" title="五、LambdaXxxWrapper"></a>五、LambdaXxxWrapper</h1><h2 id="1、例9：Query-需求同例8"><a href="#1、例9：Query-需求同例8" class="headerlink" title="1、例9：Query - 需求同例8"></a>1、例9：Query - 需求同例8</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//定义查询条件，有可能为null（用户未输入）</span><br>    String name = <span class="hljs-keyword">null</span>;<br>    Integer ageBegin = <span class="hljs-number">10</span>;<br>    Integer ageEnd = <span class="hljs-number">20</span>;<br>    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;&gt;();<br>    queryWrapper<br>        <span class="hljs-comment">//避免使用字符串表示字段，防止运行时错误</span><br>        .like(StringUtils.isNotBlank(name), User::getName, <span class="hljs-string">&quot;n&quot;</span>)<br>        .ge(ageBegin != <span class="hljs-keyword">null</span>, User::getAge, ageBegin)<br>        .le(ageEnd != <span class="hljs-keyword">null</span>, User::getAge, ageEnd);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、例10：Update-需求同例4"><a href="#2、例10：Update-需求同例4" class="headerlink" title="2、例10：Update - 需求同例4"></a>2、例10：Update - 需求同例4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test10</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//组装set子句</span><br>    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> LambdaUpdateWrapper&lt;&gt;();<br>    updateWrapper<br>        .set(User::getAge, <span class="hljs-number">18</span>)<br>        .set(User::getEmail, <span class="hljs-string">&quot;user@atguigu.com&quot;</span>)<br>        .like(User::getName, <span class="hljs-string">&quot;n&quot;</span>)<br>        .and(i -&gt; i.lt(User::getAge, <span class="hljs-number">18</span>).or().isNull(User::getEmail)); <span class="hljs-comment">//lambda表达式内的逻辑优先运算</span><br>    <br>    User user = <span class="hljs-keyword">new</span> User();<br>    <span class="hljs-keyword">int</span> result = userMapper.update(user, updateWrapper);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus常用注解及插件（二）</title>
      <link href="/2022/01/20/MybatisPlus02/"/>
      <url>/2022/01/20/MybatisPlus02/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus常用注解及插件（二）"><a href="#Mybatis-plus常用注解及插件（二）" class="headerlink" title="Mybatis-plus常用注解及插件（二）"></a>Mybatis-plus常用注解及插件（二）</h1><h1 id="一、-TableName"><a href="#一、-TableName" class="headerlink" title="一、@TableName"></a><strong>一、@TableName</strong></h1><h2 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h2><p>实体类的名字是User，数据库表名是t_user</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(value = &quot;t_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、-TableId"><a href="#二、-TableId" class="headerlink" title="二、@TableId"></a><strong>二、@TableId</strong></h1><h2 id="1、雪花算法"><a href="#1、雪花算法" class="headerlink" title="1、雪花算法"></a>1、雪花算法</h2><p>默认情况下数据库的id列使用的是基于雪花算法的策略生成</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/28639f20-f8c8-451f-917b-a8abfd21bc07.png" alt="img"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h3><p>随着业务规模的不断扩大，需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量。</p><p>数据库的扩展方式主要包括：业务分库、主从复制，数据库分表。</p><h3 id="数据库分表"><a href="#数据库分表" class="headerlink" title="数据库分表"></a>数据库分表</h3><p>将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据，如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进行拆分。</p><p>单表数据拆分有两种方式：垂直分表和水平分表。示意图如下：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/373ba7ef41999b4cc090e5aaee3bc63b_2.png" alt="img"></p><p><strong>垂直分表：</strong></p><ul><li>垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。</li><li><strong>例如，</strong>前面示意图中的 nickname 和 description 字段，假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</li></ul><p><strong>水平分表：</strong></p><ul><li>水平分表适合表行数特别大的表，有的公司要求单表行数超过 5000 万就必须进行分表，这个数字可以作为参考，但并不是绝对标准，关键还是要看表的访问性能。对于一些比较复杂的表，可能超过 1000 万就要分表了；而对于一些简单的表，即使存储数据超过 1 亿行，也可以不分表。</li><li>但不管怎样，当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性能瓶颈或者隐患。</li></ul><p>水平分表相比垂直分表，会引入更多的复杂性，例如数据id：</p><p><strong>主键自增：</strong></p><ul><li>以最常见的用户 ID 为例，可以按照 1000000 的范围大小进行分段，1 ~ 999999 放到表 1中，1000000 ~ 1999999 放到表2中，以此类推。</li><li>复杂点：分段大小的选取。分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适的分段大小。</li><li>优点：可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。</li><li>缺点：分布不均匀。假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1 条，而另外一个分段实际存储的数据量有 1000 万条。</li></ul><p><strong>Hash ：</strong></p><ul><li>同样以用户 ID 为例，假如我们一开始就规划了 10 个数据库表，可以简单地用 user_id % 10 的值来表示数据所属的数据库表编号，ID 为 985 的用户放到编号为 5 的子表中，ID 为 10086 的用户放到编号为 6 的子表中。</li><li>复杂点：初始表数量的确定。表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。</li><li>优点：表分布比较均匀。</li><li>缺点：扩充新的表很麻烦，所有数据都要重分布。</li><li></li></ul><p><em><strong>*雪花算法：*</strong></em></p><p>雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。</p><ul><li><p>核心思想：</p></li><li><ul><li>长度共64bit（一个long型）。</li><li>首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0。</li><li>41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。</li><li>10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID，可以部署在1024个节点）。</li><li>12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。</li></ul></li></ul><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/665ae40a-443f-4356-bb5d-4742f947c430.jpg" alt="img"></p><ul><li>优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高。</li></ul><h2 id="2、指定主键列"><a href="#2、指定主键列" class="headerlink" title="2、指定主键列"></a>2、指定主键列</h2><ul><li>测试：将数据库表中的id列改为 uid，将实体类中的id属性改成 uid，执行数据插入，则报告如下错误</li></ul><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/05094d95-9e68-4085-86bf-b023fc7d2eac.png" alt="img"></p><ul><li>原因：因为MP默认认为<strong>id</strong>是主键列，其他名字的属性MP无法默认自动填充</li><li>解决方案：为主键列添加 @TableId 注解</li></ul><h2 id="3、type属性"><a href="#3、type属性" class="headerlink" title="3、type属性"></a>3、type属性</h2><p>type属性用来定义主键策略</p><ul><li><strong>IdType.ASSIGN_ID：</strong>使用基于雪花算法的策略生成数据id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>注意：当对象的id被明确赋值时，不会使用雪花算法</p><ul><li><strong>IdType.AUTO：</strong>使用数据库的自增策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>注意：该类型请确保数据库设置了 ID自增 否则无效</p><ul><li><strong>全局配置：</strong>要想影响所有实体的配置，可以设置全局主键配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#全局设置主键生成策略</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="hljs-string">auto</span><br></code></pre></td></tr></table></figure><h1 id="三、-TableField"><a href="#三、-TableField" class="headerlink" title="三、@TableField"></a>三、@TableField</h1><h2 id="1、value属性"><a href="#1、value属性" class="headerlink" title="1、value属性"></a>1、value属性</h2><p>功能同TableId的value属性</p><p>注意：MP会自动将数据库中的下划线命名风格转化为实体类中的驼峰命名风格</p><p><strong>例如，</strong>数据库中的列 create_time 和 update_time 自动对应实体类中的 createTime 和 updateTime</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/b2abe1b5-3b61-451c-9a59-bca3980e9766.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br></code></pre></td></tr></table></figure><p>扩展知识：为什么建议使用你 LocalDateTime ，而不是 Date？<a href="https://zhuanlan.zhihu.com/p/87555377">https://zhuanlan.zhihu.com/p/87555377</a></p><ul><li>java.util.Date的大多数方法已经过时</li><li>java.util.Date的输出可读性差</li><li>java.util.Date对应的格式化类SimpleDateFormat是线程不安全的类。阿里巴巴开发手册中禁用static修饰SimpleDateFormat。</li><li>LocalDateTime 对应的格式化类DateTimeFormatter是线程安全的</li></ul><h2 id="2、自动填充"><a href="#2、自动填充" class="headerlink" title="2、自动填充"></a>2、自动填充</h2><p><strong>需求描述：</strong></p><p>项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的创建时间，更新时间等。我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作。</p><p><strong>例如，</strong>阿里巴巴的开发手册中建议每个数据库表必须要有create_time 和 update_time字段，我们可以使用自动填充功能维护这两个字段</p><ul><li><strong>step1：</strong>添加fill属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br></code></pre></td></tr></table></figure><ul><li><strong>step2：</strong>实现元对象处理器接口 -&gt; 创建handler包，创建MyMetaObjectHandler类</li></ul><p>注意：不要忘记添加 @Component 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;start insert fill ....&quot;</span>);<br>        <span class="hljs-keyword">this</span>.strictInsertFill(metaObject, <span class="hljs-string">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());<br>        <span class="hljs-keyword">this</span>.strictInsertFill(metaObject, <span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;start update fill ....&quot;</span>);<br>        <span class="hljs-keyword">this</span>.strictUpdateFill(metaObject, <span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><ul><li><p>测试新增</p></li><li><p>测试修改</p></li><li><p>避免自动填充时开销过大，填充前先判断当前对象中是否有相关属性</p></li></ul><h1 id="四、-TableLogic"><a href="#四、-TableLogic" class="headerlink" title="四、@TableLogic"></a>四、@TableLogic</h1><h2 id="1、逻辑删除"><a href="#1、逻辑删除" class="headerlink" title="1、逻辑删除"></a>1、逻辑删除</h2><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li></ul><p>使用场景：可以进行数据恢复</p><h2 id="2、实现逻辑删除"><a href="#2、实现逻辑删除" class="headerlink" title="2、实现逻辑删除"></a>2、实现逻辑删除</h2><ul><li><strong>step1：</strong>数据库中创建逻辑删除状态列</li></ul><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/MybatisPlus/fd2d6e00-f33e-4d84-8ca2-7fd0062b55b3.png" alt="img"></p><ul><li><strong>step2：</strong>实体类中添加逻辑删除属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><br><span class="hljs-meta">@TableField(value = &quot;is_deleted&quot;)</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></table></figure><h2 id="3、测试-1"><a href="#3、测试-1" class="headerlink" title="3、测试"></a>3、测试</h2><ul><li>测试删除：删除功能被转变为更新功能</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 实际执行的SQL</span><br>update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> is_deleted<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> is_deleted<span class="hljs-operator">=</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>测试查询：被逻辑删除的数据默认不会被查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 实际执行的SQL</span><br><span class="hljs-keyword">select</span> id,name,is_deleted <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> is_deleted<span class="hljs-operator">=</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="五、分页插件"><a href="#五、分页插件" class="headerlink" title="五、分页插件"></a>五、分页插件</h1><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><h2 id="1、添加配置类"><a href="#1、添加配置类" class="headerlink" title="1、添加配置类"></a>1、添加配置类</h2><p>创建config包，创建MybatisPlusConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span>  <span class="hljs-comment">//可以将主类中的注解移到此处</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、添加分页插件"><a href="#2、添加分页插件" class="headerlink" title="2、添加分页插件"></a><strong>2、添加分页插件</strong></h2><p>配置类中添加@Bean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title">mybatisPlusInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    MybatisPlusInterceptor interceptor = <span class="hljs-keyword">new</span> MybatisPlusInterceptor();<br>    interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));<br>    <span class="hljs-keyword">return</span> interceptor;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、测试分页"><a href="#3、测试分页" class="headerlink" title="3、测试分页"></a><strong>3、测试分页</strong></h2><p>创建类InterceptorTests</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorTests</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectPage</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//创建分页参数</span><br>        Page&lt;User&gt; pageParam = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//执行分页查询</span><br>        userMapper.selectPage(pageParam, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//查看分页参数的成员</span><br>        System.out.println(pageParam);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、XML自定义分页"><a href="#六、XML自定义分页" class="headerlink" title="六、XML自定义分页"></a>六、XML自定义分页</h1><h2 id="1、UserMapper中定义接口方法"><a href="#1、UserMapper中定义接口方法" class="headerlink" title="1、UserMapper中定义接口方法"></a>1、UserMapper中定义接口方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询 : 根据年龄查询用户列表，分页显示</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age 年龄</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 分页对象</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function">IPage&lt;User&gt; <span class="hljs-title">selectPageByPage</span><span class="hljs-params">(Page&lt;?&gt; page, Integer age)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="2、定义XML"><a href="#2、定义XML" class="headerlink" title="2、定义XML"></a>2、定义XML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPageByPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatisplus.entity.User&quot;</span>&gt;</span><br>    SELECT <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>/&gt;</span> FROM user WHERE age &gt; #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、测试-2"><a href="#3、测试-2" class="headerlink" title="3、测试"></a>3、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectPageVo</span><span class="hljs-params">()</span></span>&#123;<br>    Page&lt;User&gt; pageParam = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br>    userMapper.selectPageByPage(pageParam, <span class="hljs-number">18</span>);<br>    List&lt;User&gt; users = pageParam.getRecords();<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七、乐观锁"><a href="#七、乐观锁" class="headerlink" title="七、乐观锁"></a><strong>七、乐观锁</strong></h1><h2 id="1、场景"><a href="#1、场景" class="headerlink" title="1、场景"></a><strong>1、场景</strong></h2><p>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。</p><p>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50=150元存入了数据库；小王将商品减了30元，并将100-30=70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。</p><p>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</p><p>接下来将我们演示这一过程：</p><p><strong>step1：数据库中增加商品表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product<br>(<br>    id <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商品名称&#x27;</span>,<br>    price <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;价格&#x27;</span>,<br>    version <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;乐观锁版本号&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> product (id, NAME, price) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;笔记本&#x27;</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><strong>step2：创建实体类</strong></p><h3 id><a href="#" class="headerlink" title></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer version;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>step3：创建Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ProductMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">Product</span>&gt; </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>step4：测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ProductMapper productMapper;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConcurrentUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1、小李</span><br>    Product p1 = productMapper.selectById(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">//2、小王</span><br>    Product p2 = productMapper.selectById(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">//3、小李将价格加了50元，存入了数据库</span><br>    p1.setPrice(p1.getPrice() + <span class="hljs-number">50</span>);<br>    <span class="hljs-keyword">int</span> result1 = productMapper.updateById(p1);<br>    System.out.println(<span class="hljs-string">&quot;小李修改结果：&quot;</span> + result1);<br>    <span class="hljs-comment">//4、小王将商品减了30元，存入了数据库</span><br>    p2.setPrice(p2.getPrice() - <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">int</span> result2 = productMapper.updateById(p2);<br>    System.out.println(<span class="hljs-string">&quot;小王修改结果：&quot;</span> + result2);<br>    <span class="hljs-comment">//最后的结果</span><br>    Product p3 = productMapper.selectById(<span class="hljs-number">1L</span>);<br>    System.out.println(<span class="hljs-string">&quot;最后的结果：&quot;</span> + p3.getPrice());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、乐观锁方案"><a href="#2、乐观锁方案" class="headerlink" title="2、乐观锁方案"></a>2、乐观锁方案</h2><p>数据库中添加version字段：取出记录时，获取当前version</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id,`name`,price,`version` <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>更新时，version + 1，如果where语句中的version版本不对，则更新失败</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE product <span class="hljs-keyword">SET</span> price<span class="hljs-operator">=</span>price<span class="hljs-operator">+</span><span class="hljs-number">50</span>, `version`<span class="hljs-operator">=</span>`version` <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> `version`<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>接下来介绍如何在Mybatis-Plus项目中，使用乐观锁：</p><h2 id="3、乐观锁实现流程"><a href="#3、乐观锁实现流程" class="headerlink" title="3、乐观锁实现流程"></a>3、乐观锁实现流程</h2><p><em><strong>*step1：修改实体类*</strong></em></p><p>添加 @Version 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure><p><strong>step2：添加乐观锁插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> OptimisticLockerInnerInterceptor());<span class="hljs-comment">//乐观锁</span><br></code></pre></td></tr></table></figure><p><strong>step3：重新执行测试</strong></p><p>小王的修改失败！</p><h2 id="4、优化流程"><a href="#4、优化流程" class="headerlink" title="4、优化流程"></a>4、优化流程</h2><p>失败后重试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(result2 == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//更新失败，重试</span><br>    System.out.println(<span class="hljs-string">&quot;小王重试&quot;</span>);<br>    <span class="hljs-comment">//重新获取数据</span><br>    p2 = productMapper.selectById(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">//更新</span><br>    p2.setPrice(p2.getPrice() - <span class="hljs-number">30</span>);<br>    productMapper.updateById(p2);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/01/15/Nginx/"/>
      <url>/2022/01/15/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><a href="nginxx">Nginx</a></h1><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器,特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等</p><p>Nginx可以作为静态页面的web服务器，同时还支持CGI协议的动态语言，比如perl、php等。但是不支持java。Java程序只能通过与tomcat配合完成。Nginx专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000个并发连接数。</p><p><a href="https://lnmp.org/nginx.html">https://lnmp.org/nginx.html</a></p><p><a href="https://news.netcraft.com/archives/category/web-server-survey/">https://news.netcraft.com/archives/category/web-server-survey/</a></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n001.png?versionId=CAEQKBiBgMC08tnx8hciIDYzMjFlOWFmZGE4ZDQwMzBiZDIwNjJjZWMzYzE1YTQw"></p><h3 id="1-1-Nginx优点"><a href="#1-1-Nginx优点" class="headerlink" title="1.1 Nginx优点"></a>1.1 Nginx优点</h3><p>Nginx 可以在大多数 UnixLinux OS 上编译运行，并有 Windows 移植版。 Nginx 的1.4.0稳定版已经于2013年4月24日发布，一般情况下，对于新建站点，建议使用最新稳定版作为生产版本。</p><p>Nginx 是一个很强大的高性能Web和反向代理服务器，它具有很多非常优越的特性：<br>在连接高并发的情况下，Nginx是Apache服务器不错的替代品：Nginx能够支持高达 50,000 个并发连接数的响应</p><h3 id="1-2-为什么使用Nginx"><a href="#1-2-为什么使用Nginx" class="headerlink" title="1.2 为什么使用Nginx"></a>1.2 为什么使用Nginx</h3><p>互联网飞速发展的今天,大用户量高并发已经成为互联网的主体.怎样能让一个网站能够承载几万个或几十万个用户的持续访问呢？这是一些中小网站急需解决的问题。用单机tomcat搭建的网站，在比较理想的状态下能够承受的并发访问量在150到200左右。按照并发访问量占总用户数量的5%到10%这样计算，单点tomcat网站的用户人数在1500到4000左右。对于一个为全国范围提供服务的网站显然是不够用的，为了解决这个问题引入了负载均衡方法。负载均衡就是一个web服务器解决不了的问题可以通过多个web服务器来平均分担压力来解决，并发过来的请求被平均分配到多个后台web服务器来处理，这样压力就被分解开来。</p><p>负载均衡服务器分为两种:一种是通过硬件实现的负载均衡服务器，简称硬负载。另一种是通过软件来实现的负载均衡，简称软负载:例如apache和nginx。硬负载和软负载相比前者作用的网络层次比较多可以作用到socket接口的数据链路层对发出的请求进行分组转发但是价格成本比较贵，而软负载作用的层次在http协议层之上可以对http请求进行分组转发并且因为是开源的所以几乎是0成本，并且阿里巴巴，京东等电商网站使用的都是Nginx服务器。</p><h3 id="1-3-正向代理"><a href="#1-3-正向代理" class="headerlink" title="1.3 正向代理"></a>1.3 正向代理</h3><p>Nginx不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。</p><p><strong>正向代理：</strong>如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p><p>一般情况下，如果没有特别说明，代理技术默认说的是正向代理技术。</p><p>关于正向代理的概念如下： 正 向代理(forward)是一个位于客户端【用户A】和原始服务器(origin server)【服务器B】之间的服务器【代理服务器Z】，为了从原始服务器取得内容，用户A向代理服务器Z发送一个请求并指定目标(服务器B)，然后代理服务器Z向服务器B转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n002.png?versionId=CAEQKBiBgMCT9Nnx8hciIDY3ZDAzODY1ZGQwMzQyNGRhZTYzYTJmODYxNjBiNjFj"></p><p>从上面的概念中，我们看出，文中所谓的正向代理就是代理服务器替代访问方【用户A】去访问目标服务器【服务器B】</p><p>这就是正向代理的意义所在。而为什么要用代理服务器去代替访问方【用户A】去访问服务器B呢？这就要从代理服务器使用的意义说起。</p><p>使用正向代理服务器作用主要有以下几点：</p><p>① 访问本无法访问的服务器B，如下图</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n003.png?versionId=CAEQKBiBgIDH7tnx8hciIGQxYjFmZTE5NzJmMTQzMmZhNzNkN2E5MDBlZmZlZWYz"></p><p>我们抛除复杂的网络路由情节来看图，假设图中路由器从左到右命名为R1,R2假 设最初用户A要访问服务器B需要经过R1和R2路由器这样一个路由节点，如果路由器R1或者路由器R2发生故障，那么就无法访问服务器B了。但是如果用户 A让代理服务器Z去代替自己访问服务器B，由于代理服务器Z没有在路由器R1或R2节点中，而是通过其它的路由节点访问服务器B，那么用户A就可以得到服 务器B的数据了。现实中的例子就是“翻墙”。</p><p>② 加速访问服务器B</p><p>上图，防火墙作为网关，用来过滤外网对其的访问。假设用户A和用户B都设置了代理服务器，用户A允许访问互联网，而用户B不允许访问互联网（这个在代理服 务器Z上做限制）这样用户A因为授权，可以通过代理服务器访问到服务器B，而用户B因为没有被代理服务器Z授权，所以访问服务器B时，数据包会被直接丢 弃。</p><p>⑤ 隐藏访问者的行踪</p><p>如下图 ，我们可以看出服务器B并不知道访问自己的实际是用户A，因为代理服务器Z代替用户A去直接与服务器B进行交互。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n004.png?versionId=CAEQKBiBgICP6tnx8hciIGNhMDBmY2UxNWU1MjQzODI5N2NmYjRlNjcwYjZjMWZj"></p><p>我 们总结一下 正向代理是一个位于客户端和原始服务器(originserver)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内 容返回给客户端。客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</p><p><strong>总之一句话：正向代理，隐藏的是客户端</strong></p><h3 id="1-4-反向代理"><a href="#1-4-反向代理" class="headerlink" title="1.4 反向代理"></a>1.4 反向代理</h3><p><strong>反向代理：</strong>其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n005.png?versionId=CAEQKBiBgICr6tnx8hciIGEwNzMyZjNmNjVhYjRjY2ViZDRkY2YzNTY4ZWQ3YTJk"></p><p>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端。</p><p>使用反向代理服务器的作用如下：</p><p>① 保护和隐藏原始资源服务器如下图</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n006.png?versionId=CAEQKBiBgMCF9Nnx8hciIGJkYzVlYTRkMmY2NDQwNzliYjlhYTdlNzM3NWEyODJl"></p><p>用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。</p><p><strong>总之一句话：反向代理，隐藏的是服务器</strong></p><h3 id="1-5-没有负载均衡情况"><a href="#1-5-没有负载均衡情况" class="headerlink" title="1.5 没有负载均衡情况"></a>1.5 没有负载均衡情况</h3><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。</p><p> 这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</p><p>　　我们首先想到的可能是升级服务器的配置，比如提高CPU执行频率，加大内存等提高机器的物理性能来解决此问题，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？</p><p>上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的<strong>负载均衡。</strong></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n007.png?versionId=CAEQKBiBgIDE5dnx8hciIDI0OTczYjRkNmI4ZDRlODA4ZWJhMDRhYWI5NmQyMWIz"></p><h3 id="1-6-负载均衡"><a href="#1-6-负载均衡" class="headerlink" title="1.6 负载均衡"></a>1.6 负载均衡</h3><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n008.png?versionId=CAEQKBiBgMDq89nx8hciIDE0OGUxYjk2YzAyNDQ1MDk5MzBhNmY5YjZhODU0ZWY5"></p><p>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</p><p>当然反向代理服务器像正向代理服务器一样拥有CACHE的作用，它可以缓存原始资源服务器B的资源，而不是每次都要向原始资源服务器B请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户X来自同一个网络，那么用户X访问反向代理服务器X，就会得到很高质量的速度。如下图</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n009.png?versionId=CAEQKBiBgICT8dnx8hciIDVmYmQ1MTAzNGUyNjQzMDZiZDRjOGMxNTFhZWFjMmNi"></p><h1 id="第二章-Nginx安装"><a href="#第二章-Nginx安装" class="headerlink" title="第二章 Nginx安装"></a><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-nginx%E5%AE%89%E8%A3%85">第二章 Nginx安装</a></h1><h3 id="2-1-Nginx下载"><a href="#2-1-Nginx下载" class="headerlink" title="2.1 Nginx下载"></a>2.1 Nginx下载</h3><p>官方网站：<a href="http://nginx.org/">http://nginx.org/</a></p><p>### 2.2 Nginx在windows下安装</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n010.png?versionId=CAEQKBiBgMCq29nx8hciIDdlYWJjYzE4ZjNlNzRmYmQ5YzA5ZDY0MjExMzhhYjNi"></p><p>双击 nginx.exe ， 一闪而过</p><p>在浏览器中访问 <code>localhost:80</code></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n011.png?versionId=CAEQKBiBgMCX6tnx8hciIGQzZDgzMTI2NjJmYjQyNzZhZWJjNjIwZWVkMmRlMDY4"></p><h3 id="2-3-Nginx在linux下安装"><a href="#2-3-Nginx在linux下安装" class="headerlink" title="2.3 Nginx在linux下安装"></a>2.3 Nginx在linux下安装</h3><h4 id="2-3-1-进入nginx官网，下载"><a href="#2-3-1-进入nginx官网，下载" class="headerlink" title="2.3.1 进入nginx官网，下载"></a>2.3.1 进入nginx官网，下载</h4><p><a href="http://nginx.org/">http://nginx.org/</a> nginx-1.12.2.tar.gz</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n012.png?versionId=CAEQKBiBgIDZ3Nnx8hciIDVjMTJiZTVhM2Q5YjQ3NzliNWExZTk1MDg2NWI3YTg5"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n013.png?versionId=CAEQKBiBgMCH2Nnx8hciIGRhNzVhMzZiZWY2YzRmOTg5OWFjZjdlZTgzMTJjNDRh"></p><h4 id="2-3-2-需要的安装包"><a href="#2-3-2-需要的安装包" class="headerlink" title="2.3.2 需要的安装包"></a>2.3.2 需要的安装包</h4><p>pcre-8.37.tar.gz</p><p>openssl-1.0.1t.tar.gz</p><p>zlib-1.2.8.tar.gz</p><p>nginx-1.12.2.tar.gz</p><h4 id="2-3-3-在线安装nginx"><a href="#2-3-3-在线安装nginx" class="headerlink" title="2.3.3 在线安装nginx"></a>2.3.3 在线安装nginx</h4><h5 id="第一步，安装pcre"><a href="#第一步，安装pcre" class="headerlink" title="第一步，安装pcre"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E5%AE%89%E8%A3%85pcre">第一步，安装pcre</a></h5><p>第一步 联网下载pcre</p><p>wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz">http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</a></p><p>第二步 解压压缩文件</p><p>使用命令 tar -zxvf pcre-8.37.tar.gz</p><p>第三步 ./configure完成后，回到pcre目录下执行make，最后执行make install</p><p>第四步 pcre-config –version 检查版本</p><h5 id="第二步，安装openssl-、zlib-、-gcc-依赖"><a href="#第二步，安装openssl-、zlib-、-gcc-依赖" class="headerlink" title="第二步，安装openssl 、zlib 、 gcc 依赖"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E5%AE%89%E8%A3%85openssl-zlib-gcc-%E4%BE%9D%E8%B5%96">第二步，安装openssl 、zlib 、 gcc 依赖</a></h5><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum -y install make <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel gcc-c++ libtool  openssl openssl-devel<br></code></pre></td></tr></table></figure><h5 id="第三步，安装nginx"><a href="#第三步，安装nginx" class="headerlink" title="第三步，安装nginx"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5-%E5%AE%89%E8%A3%85nginx">第三步，安装nginx</a></h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">使用命令解压 <br>./configure<br>make &amp;&amp; make install<br>进入目录 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin   执行./nginx 启动服务<br></code></pre></td></tr></table></figure><h5 id="第四步，关闭防火墙，访问nginx"><a href="#第四步，关闭防火墙，访问nginx" class="headerlink" title="第四步，关闭防火墙，访问nginx"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5-%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99-%E8%AE%BF%E9%97%AEnginx">第四步，关闭防火墙，访问nginx</a></h5><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">在windows系统中访问linux中nginx，默认不能访问的，因为防火墙问题</span><br><span class="hljs-comment">关闭防火墙</span><span class="hljs-literal">-</span><span class="hljs-comment">开放访问的端口号，80端口</span><br><br><span class="hljs-comment">查看开放的端口号</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">list</span><span class="hljs-literal">-</span><span class="hljs-comment">all</span><br><br><span class="hljs-comment">设置开放的服务或端口号</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">service=http</span> --<span class="hljs-comment">permanent</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=80/tcp</span> --<span class="hljs-comment">permanent</span><br><br><span class="hljs-comment">重启防火墙</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span><br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n014.png?versionId=CAEQKBiBgIDg2tnx8hciIGU2YTc5NGYxNWU2ODRhMWZhZjBlOTc0Y2I2ZGZiZmJl"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n015.png?versionId=CAEQKBiBgMD.2dnx8hciIDgyMDhjOTc0MDA0NzQ5MTNiODNkYTdjMmYxNTBiZDMx"></p><h1 id="第三章-Nginx配置与应用"><a href="#第三章-Nginx配置与应用" class="headerlink" title="第三章 Nginx配置与应用"></a><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-nginx%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%BA%94%E7%94%A8">第三章 Nginx配置与应用</a></h1><p>nginx 相关命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">验证配置是否正确: nginx -t<br><br>查看Nginx的版本号：nginx -V<br><br>启动Nginx：<span class="hljs-literal">start</span> nginx<br><br>快速停止或关闭Nginx：nginx -s <span class="hljs-literal">stop</span><br><br>正常停止或关闭Nginx：nginx -s quit<br><br>配置文件修改重装载命令：nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="3-1．-Nginx虚拟机配置"><a href="#3-1．-Nginx虚拟机配置" class="headerlink" title="3.1． Nginx虚拟机配置"></a>3.1． Nginx虚拟机配置</h3><h4 id="3-1-1-测试针对ip地址进行配置"><a href="#3-1-1-测试针对ip地址进行配置" class="headerlink" title="3.1.1 测试针对ip地址进行配置"></a>3.1.1 测试针对ip地址进行配置</h4><p>主要是在描述nginx它是一个http服务器。它是apache的一个替代品。</p><p>对于nginx虚拟机配置主要可以从三个方面入手:</p><ol><li>ip配置</li><li>域名配置</li><li>端口配置</li></ol><p>它的配置主要体现在 <code>nginx/conf/nginx.conf</code></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n016.png?versionId=CAEQKBiBgIC82dnx8hciIDVjNzNkNDVhMjlkMTRhYWNiMDM1ZGZkMzQ0ZDI5Y2U0"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n017.png?versionId=CAEQKBiBgMDr0tnx8hciIDI4Yzg1YWNmNjdmOTRkMDFiYjMyMDBjMzNjMzNkYzFk"></p><h4 id="3-1-1-2-测试针对于域名进行配置"><a href="#3-1-1-2-测试针对于域名进行配置" class="headerlink" title="3.1.1.2 测试针对于域名进行配置"></a>3.1.1.2 测试针对于域名进行配置</h4><p>问题:为什么通过域名可以访问到网站。</p><p> DNS服务器—-域名解析服务器。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n018.png?versionId=CAEQKBiBgID90Nnx8hciIDRhNjI2MGFhMDg0NTRhYzY5MWY2NDRhYWEyZmZmZmZj"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">windows<span class="hljs-string">` 系统中 `</span>hosts<span class="hljs-string">` 文件所在位置 : `</span>C:\Windows\System32\drivers\etc<br>linux<span class="hljs-string">` 系统中 `</span>hosts<span class="hljs-string">` 文件所在位置 : `</span>/etc/hosts<br></code></pre></td></tr></table></figure><p>修改<code>windows</code> 系统中的 <code>hosts</code> 文件，添加如下内容</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> abc.com<br><span class="hljs-number">127.0.0.1</span> def.com<br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n019.png?versionId=CAEQKBiBgICz0Nnx8hciIGRiNWNmY2ZlYzJmNDQ2N2U4ZjBiY2U0Mjc2OGVmYmQy"></p><p>域名作用:可以方便记忆。修改 <code>nginx.conf</code></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n020.png?versionId=CAEQKBiBgMD92Nnx8hciIGE4MDk5ZjAzMjc2YTQ5MWFhYjcyMDJjMTRmOWZjNjYz"></p><p>请求：<code>http://abc.com/</code> 或者<code>http://def.com/</code></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n021.png?versionId=CAEQKBiBgIDv0tnx8hciIDAzZjE3Mjg5OTkyNTRiNTJiNWRhOGYyMzVlNDJhMDFl"></p><h4 id="3-1-1-3-测试针对于端口进行配置"><a href="#3-1-1-3-测试针对于端口进行配置" class="headerlink" title="3.1.1.3 测试针对于端口进行配置"></a>3.1.1.3 测试针对于端口进行配置</h4><p>修改配置文件</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n023.png?versionId=CAEQKBiBgMDdy9nx8hciIGQwYzUwMjVlYjJhYjQ3M2RiNWM4NWIzZjMxMDhkOWI4"></p><p>请求路径</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n024.png?versionId=CAEQKBiBgMDs0Nnx8hciIGE4MjU4YWRhNjIxNDRmZDc4Zjc0MDgxZTc2MTMzNzQ5"></p><h3 id="3-2-Nginx反向代理"><a href="#3-2-Nginx反向代理" class="headerlink" title="3.2 Nginx反向代理"></a>3.2 Nginx反向代理</h3><p>实现效果：使用nginx反向代理，访问 <code>www.localhost:80.com</code> 直接跳转到 <code>127.0.0.1:8080</code></p><p>反向代理请求流程图</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n026.png?versionId=CAEQKBiBgIC.ydnx8hciIDRmZmNjMWU3ZDlkYjQ3NDE5YjE4ZGY2MTc5ODI3ZWEy"></p><p>Nginx反向代理 ，配置文件</p><blockquote><p>注意：如果反向代理失败，去掉下划线，直接使用serverlist;</p></blockquote><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n027.png?versionId=CAEQKBiBgMCGydnx8hciIGU5YTliM2JkYWRiMDRjMjViYWYxNjZlYmNkZTFjNTkw"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">worker_processes  <span class="hljs-number">1</span>;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    sendfile        on;<br>   <br>    keepalive_timeout  65;<br><br># 反向代理配置<br>upstream server_list&#123;<br>   # 这个是tomcat的访问路径<br>   server localhost:<span class="hljs-number">8080</span>;<br>   <br>&#125;<br><br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        location / &#123;<br>            root   html;<br>            # 注意：如果反向代理失败，去掉下划线，直接使用serverlist;<br>proxy_pass http:<span class="hljs-comment">//server_list;</span><br>            index  index.html index.htm;<br>        &#125;<br><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        location = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>      <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>双击打开tomcat ，启动tomcat ，请求的是nginx的地址，代理到tomcat 的 页面</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n028.png?versionId=CAEQKBiBgICCydnx8hciIGM0ZWYzMzJlZWNmYjQ3OWQ4NDE0YTYzZDIyOTA5ZjZh"></p><h1 id="第四章-nginx负载均衡"><a href="#第四章-nginx负载均衡" class="headerlink" title="第四章 nginx负载均衡"></a><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">第四章 nginx负载均衡</a></h1><p>随着互联网信息的爆炸性增长，负载均衡（load balance）已经不再是一个很陌生的话题，顾名思义，负载均衡即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎，nginx就是其中的一个，在linux下有Nginx、LVS、Haproxy等等服务可以提供负载均衡服务，而且Nginx提供了几种分配方式(策略)：</p><h3 id="4-1-实现效果"><a href="#4-1-实现效果" class="headerlink" title="4.1 实现效果"></a>4.1 实现效果</h3><p>浏览器地址栏输入地址 <a href="http://192.168.137.129/edu/a.html%EF%BC%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%95%88%E6%9E%9C%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E5%B9%B3%E5%9D%87%E5%88%86%E9%85%8D%E5%88%B08080%E5%92%8C8081%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E3%80%82">http://192.168.137.129/edu/a.html，负载均衡效果，将请求平均分配到8080和8081两台服务器上。</a></p><h3 id="4-2-准备工作"><a href="#4-2-准备工作" class="headerlink" title="4.2 准备工作"></a>4.2 准备工作</h3><p>（1）准备两台tomcat服务器，一台8080，一台9999</p><p>（2）在两台tomcat里面webapps目录中</p><h3 id="4-3-轮询（默认）"><a href="#4-3-轮询（默认）" class="headerlink" title="4.3 轮询（默认）"></a>4.3 轮询（默认）</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n029.png?versionId=CAEQKBiBgMDGzNnx8hciIDBiOTQ4NTRjMTA0ZDQxNjJhNTU2NjVlNTNmZWRhMTg3"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 反向代理配置</span><br><span class="hljs-attribute">upstream</span> server_list&#123;<br>   <span class="hljs-comment"># 这个是tomcat的访问路径</span><br>   <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">8080</span>;<br>   <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">9999</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>   <br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br><span class="hljs-comment"># 反向代理配置</span><br><span class="hljs-attribute">upstream</span> server_list&#123;<br>   <span class="hljs-comment"># 这个是tomcat的访问路径</span><br>   <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">8080</span>;<br>   <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">9999</span>;<br>&#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br><span class="hljs-attribute">proxy_pass</span> http://server_list;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 两台服务器 ，拷贝一个tomcat</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n030.png?versionId=CAEQKBiBgICrwtnx8hciIGI0YTI2Nzk5ZTJlMTQ1Yzg4ZjkzN2FhNTMxNWRjNTUy"></p><p>修改 <code>conf</code> 文件下面的 <code>server.xml</code> 配置文件 , 分别修改三个端口号</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Server <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;18005&quot;</span> <span class="hljs-attribute">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;<br><br>&lt;Connector <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;9999&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span><br>               <span class="hljs-attribute">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span><br>               <span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br>               <br>&lt;Connector <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;18009&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;AJP/1.3&quot;</span> <span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;               <br></code></pre></td></tr></table></figure><p>修改两台 <code>tomcat</code> 服务器下面 <code>webapps\ROOT\index.jsp</code></p><p>分别加上 标记 ，用以区分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">h1</span>&gt;<span class="hljs-selector-tag">main</span>&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">h1</span>&gt;back&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n032.png?versionId=CAEQKBiBgMCWwtnx8hciIDA5MzZlMjM4OTNmMDQzMmI5ZmM1MTIyODg3NjUyYzU4"></p><h3 id="4-4-weight-权重"><a href="#4-4-weight-权重" class="headerlink" title="4.4 weight 权重"></a>4.4 weight 权重</h3><p>所谓的负载均衡简单说就是将一台服务原来承受的压力由多台服务器来分配，可以在nginx中实现tomcat集群，通过weight来分配权重。</p><p>weight 代表权重，默认为1,权重越高被分配的客户端越多</p><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 反向代理配置</span><br>upstream server_list&#123;<br><span class="hljs-comment"># 这个是tomcat的访问路径</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>localhost:8080 <span class="hljs-attribute">weight</span>=5;<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>localhost:9999 <span class="hljs-attribute">weight</span>=1;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n033.png?versionId=CAEQKBiBgMCby9nx8hciIGMwMGI4MWY3MzY5MTRlOWU5NTQyYzZjMTQ4YmVmZWNh"></p><h3 id="4-5-ip-hash"><a href="#4-5-ip-hash" class="headerlink" title="4.5 ip_hash"></a>4.5 ip_hash</h3><p>每个请求按访问ip的hash值分配，这样每个访问客户端会固定访问一个后端服务器，</p><p>可以解决会话Session丢失的问题</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream backserver &#123; <br><span class="hljs-attribute">ip_hash; </span><br><span class="hljs-attribute">server 127.0.0.1</span>:8080; <br><span class="hljs-attribute">server 127.0.0.1</span>:9090; <br>&#125;<br></code></pre></td></tr></table></figure><p>不管刷新多少遍，始终访问的是同一台tomcat服务器</p><h3 id="4-6-最少连接"><a href="#4-6-最少连接" class="headerlink" title="4.6 最少连接"></a>4.6 最少连接</h3><p>web请求会被转发到连接数最少的服务器上</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream backserver &#123; <br><span class="hljs-attribute">least_conn;</span><br><span class="hljs-attribute">server 127.0.0.1</span>:8080; <br><span class="hljs-attribute">server 127.0.0.1</span>:9090; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-Nginx-tomcat集群-redis实现session共享"><a href="#4-5-Nginx-tomcat集群-redis实现session共享" class="headerlink" title="4.5 Nginx+tomcat集群+redis实现session共享"></a>4.5 Nginx+tomcat集群+redis实现session共享</h3><h4 id="4-5-1-Session共享问题演示"><a href="#4-5-1-Session共享问题演示" class="headerlink" title="4.5.1 Session共享问题演示"></a>4.5.1 Session共享问题演示</h4><ol><li>在tomcat中创建项目myweb</li><li>分别启动两个tomcat,查看sessionid值</li><li><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n034.png?versionId=CAEQKBiBgIDgwtnx8hciIDdlM2ZiYmFiNzJhZTRjMWRiMDlmYzRlMjhmYWYxYjgw"></li></ol><h4 id="4-5-2-Session共享问题解决"><a href="#4-5-2-Session共享问题解决" class="headerlink" title="4.5.2 Session共享问题解决"></a>4.5.2 Session共享问题解决</h4><p>思想:将原来由每一个tomcat管理的session统一存储到redis中管理</p><p><strong>版本：</strong> apache-tomcat-8.5.9、nginx-1.8.0、redis_2.8.9</p><p><strong>github地址：</strong><code>https://github.com/mzd123/session_manager</code>c 读者可以直接下载体验一下。</p><p><strong>实现：</strong></p><p>1、下载：<code>https://github.com/ran-jit/tomcat-cluster-redis-session-manager/wiki</code></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n035.png?versionId=CAEQKBiBgIDxwNnx8hciIGE5ZTJhNjVlNTlmYTQwNjg4Mzk1ZTcxMGFmMzg5ZjMz"></p><p>2、解压之后。将jar包放入tomcat的lib中（注意是tomcat/lib中，不是我们自己项目的lib）</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n036.png?versionId=CAEQKBiBgICYwNnx8hciIGU5ODlmOTdjMjFkZDRhOTliNDI3ZjVkNGZjMmZlMjA2"></p><p>拷贝到两个tomcat的lib目录下面</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n037.png?versionId=CAEQKBiBgMCQwNnx8hciIDY5NWE4ZTIyNmI4NzQ2MGE4MDQxYWFhY2NiZWM1ZGIx"></p><p>3、配置解压之后的redis-data-cache.properties（根据你的redis配置吧）。配置完将这个文件放入tomcat/conf文件夹中。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n038.png?versionId=CAEQKBiBgMCovtnx8hciIDU0MDI4ZGFiYTQyNDRiZjhiMWM4YWEwMDQ0ZjY2NzA0"></p><p>4、配置tomcat/cong/context.xml,增加如下两行。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n039.png?versionId=CAEQKBiBgIDmv9nx8hciIDE0YWMyZTQ3ZWJlODRmZWU4NTA4ODdiODllYmIyZGQz"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Valve <span class="hljs-attribute">className</span>=<span class="hljs-string">&quot;tomcat.request.session.redis.SessionHandlerValve&quot;</span>/&gt;<br>&lt;Manager <span class="hljs-attribute">className</span>=<span class="hljs-string">&quot;tomcat.request.session.redis.SessionManager&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>5、注意：因为tomcat-redis-session-manager这个版本的不同，classname会随着变化，2.0.4的版本是叫这两个。其实可以打开你下载的tomcat-cluster-redis-session-manager.jar看看他到底叫什么（不少小伙伴，本人第一次搞也是，网上代码一抄，发现tomcat启动就报类找不到。。。你classname都填错了，当然找不到了，能找到就奇怪了。。。）</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n040.png?versionId=CAEQKBiBgIDVvdnx8hciIDNjNmM1YjhlMTczMDQxMDBiYzZhNmZmZDZjNmU2NDFk"></p><p><strong>测试：</strong></p><p>1、nginx配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>   <br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br><span class="hljs-comment"># 反向代理配置</span><br><span class="hljs-attribute">upstream</span> server_list&#123;<br>   <span class="hljs-comment"># 这个是tomcat的访问路径</span><br>   <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">8080</span>;<br>   <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">9999</span>;<br>&#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br><span class="hljs-attribute">proxy_pass</span> http://server_list;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、准备两个tomcat，一个端口为8090，一个为9999</p><p>3、tomcat中jsp代码：新建 <code>webapps\myweb\index.jsp</code></p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> import=<span class="hljs-string">&quot;java.util.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;</span><span class="xml">  </span><br><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> import=<span class="hljs-string">&quot;java.text.SimpleDateFormat&quot;</span>%&gt;</span><span class="xml"></span><br><span class="xml"></span><span class="vbscript">&lt;%  </span><br><span class="vbscript">  <span class="hljs-built_in">request</span>.getSession().setAttribute(<span class="hljs-string">&quot;mzd&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);</span><br><span class="vbscript">  SimpleDateFormat simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="vbscript">  String date=simpleDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());</span><br><span class="vbscript">%&gt;</span><span class="xml">  </span><br><span class="xml"></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>tomcat1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  </span><br><span class="xml">        SessionID:</span><span class="vbscript">&lt;%=session.getId()%&gt;</span><span class="xml">  </span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        当前时间为:</span><span class="vbscript">&lt;%=date%&gt;</span><span class="xml">  </span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        SessionPort:</span><span class="vbscript">&lt;%=<span class="hljs-built_in">request</span>.getServerPort()%&gt;</span><span class="xml">  </span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        mzd的值为：</span><span class="vbscript">&lt;%=session.getAttribute(<span class="hljs-string">&quot;mzd&quot;</span>)%&gt;</span><span class="xml">  </span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        </span><span class="vbscript">&lt;%  </span><br><span class="vbscript">        out.println(<span class="hljs-string">&quot;这是tomcat1&quot;</span>);  </span><br><span class="vbscript">        %&gt;</span><span class="xml"> </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> </span><br></code></pre></td></tr></table></figure><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> import=<span class="hljs-string">&quot;java.util.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;</span><span class="xml"> </span><br><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> import=<span class="hljs-string">&quot;java.text.SimpleDateFormat&quot;</span>%&gt;</span><span class="xml"></span><br><span class="xml"></span><span class="vbscript">&lt;%  </span><br><span class="vbscript">   SimpleDateFormat simpleDateFormat=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="vbscript">   String date=simpleDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());</span><br><span class="vbscript">%&gt;</span><span class="xml">  </span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>tomcat2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  </span><br><span class="xml">        SessionID:</span><span class="vbscript">&lt;%=session.getId()%&gt;</span><span class="xml">  </span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        当前时间为:</span><span class="vbscript">&lt;%=date%&gt;</span><span class="xml">  </span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        SessionPort:</span><span class="vbscript">&lt;%=<span class="hljs-built_in">request</span>.getServerPort()%&gt;</span><span class="xml">  </span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        mzd的值为：</span><span class="vbscript">&lt;%=session.getAttribute(<span class="hljs-string">&quot;mzd&quot;</span>)%&gt;</span><span class="xml">  </span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span>  </span><br><span class="xml">        </span><span class="vbscript">&lt;%  </span><br><span class="vbscript">        out.println(<span class="hljs-string">&quot;这是tomcat2&quot;</span>);  </span><br><span class="vbscript">        %&gt;</span><span class="xml"> </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  </span><br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n041.png?versionId=CAEQKBiBgIDFvdnx8hciIDRmZGQ1OTIzODhlZjQ1OWQ4MzI5YTU4MWNjMDkwMWU0"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n042.png?versionId=CAEQKBiBgMCzvdnx8hciIDEyY2NjZGM2NjZiYzQ3YWI4ZTE2NTM3M2YxMmMzZGI5"></p><p>5 乱码问题</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n043.png?versionId=CAEQKBiBgMDFvdnx8hciIDBhNWI4MDk0ZDdhZTQxOTJiY2NjZWIyM2E2MmUxYzZh"></p><p>解决方案 ，如果设置 jsp 编码还是不行，在看看浏览器编码格式，浏览器默认是GBK</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n044.png?versionId=CAEQKBiBgIC.vtnx8hciIDZkOTdlMjFkYWZkNTQ2ODBhNjgwNGYzMmNhODNlMmVm"></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/Ngnix/Nginx/n045.png?versionId=CAEQKBiBgMCDvdnx8hciIDAwMTU5OGJmNTZmNTQ5MmRhNzU5MTdiM2I5ZGM1OGFm"></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="/2022/01/13/DistributedTransaction/"/>
      <url>/2022/01/13/DistributedTransaction/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="1-微服务化带来的分布式事务问题"><a href="#1-微服务化带来的分布式事务问题" class="headerlink" title="1 微服务化带来的分布式事务问题"></a><a href="#1-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8C%96%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98">1 微服务化带来的分布式事务问题</a></h2><p>开发当中真实场景：</p><p>首先，设想一个传统的单体应用（Monolithic App），通过 3 个 Module，在同一个数据源上更新数据来完成一项业务。</p><p>很自然的，整个业务过程的数据一致性由本地事务来保证。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT01.png"></p><p>随着业务需求和架构的变化，单体应用被拆分为微服务：原来的 3 个 Module 被拆分为 3 个独立的服务，分别使用独立的数据源。业务过程将由 3 个服务的调用来完成。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT02.png"></p><p>此时，每一个服务内部的数据一致性仍由本地事务来保证。而整个业务层面的全局数据一致性要如何保障呢？这就是微服务架构下面临的，典型的分布式事务需求：我们需要一个分布式事务的解决方案保障业务全局的数据一致性。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT03.png"></p><blockquote><p>需要解决的问题</p></blockquote><p>随着分布式服务架构的流行与普及，原来在单体应用中执行的多个逻辑操作，现在被拆分成了多个服务之间的远程调用。虽然服务化为我们的系统带来了水平伸缩的能力，然而随之而来挑战就是分布式事务问题，多个服务之间使用自己单独维护的数据库，它们彼此之间不在同一个事务中，假如A执行成功了，B执行却失败了，而A的事务此时已经提交，无法回滚，那么最终就会导致两边数据不一致性的问题；</p><h2 id="1-分布式事务介绍"><a href="#1-分布式事务介绍" class="headerlink" title="1 分布式事务介绍"></a><a href="#1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BB%8B%E7%BB%8D">1 分布式事务介绍</a></h2><p>回顾数据库事务</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT04.png"></p><h3 id="1-1-什么是事务"><a href="#1-1-什么是事务" class="headerlink" title="1.1 什么是事务"></a>1.1 什么是事务</h3><p>不知道你是否遇到过这样的情况，去小卖铺买东西，付了钱，但是店主因为处理了一些其他事，居然忘记你付了钱，又叫你重新付。</p><p>又或者在网上购物明明已经扣款，但是却告诉我没有发生交易。这一系列情况都是因为没有事务导致的。这说明了事务在生活中的一些重要性。</p><p>有了事务，你去小卖铺买东西，那就是一手交钱一手交货。有了事务，你去网上购物，扣款即产生订单交易。</p><p>事务提供一种机制将一个活动涉及的所有操作纳入到一个不可分割的执行单元，组成事务的所有操作只有在所有操作均能正常执行的情况下方能提交，只要其中任一操作执行失败，都将导致整个事务的回滚。</p><blockquote><p>简单地说，事务提供一种“要么什么都不做，要么做全套（All or Nothing）”机制。</p></blockquote><p>事务拥有以下四个特性，习惯上被称为ACID特性：</p><p>**A：原子性(Atomicity)**，一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。</p><p>事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p>就像你买东西要么交钱收货一起都执行，要么发不出货，就退钱。</p><p>**C：一致性(Consistency)**，事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p><p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p><p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p>**I：隔离性(Isolation)**，指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。</p><p>由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p>打个比方，你买东西这个事情，是不影响其他人的。</p><p>**D：持久性(Durability)**，指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。</p><p>即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><p>打个比方，你买东西的时候需要记录在账本上，即使老板忘记了那也有据可查。</p><h3 id="1-2-本地事务"><a href="#1-2-本地事务" class="headerlink" title="1.2 本地事务"></a>1.2 本地事务</h3><p>什么是本地事务（Local Transaction）？本地事务也称为<em>数据库事务</em>或<em>传统事务</em>（相对于分布式事务而言）。它的执行模式就是常见的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">1. transaction begin<br><br>2. insert/delete/update<br><br>3. insert/delete/update<br><br>4. ...<br><br>5. transaction commit/rollback<br></code></pre></td></tr></table></figure><p>本地事务有这么几个特征:</p><ol><li>一次事务只连接一个支持事务的数据库（一般来说都是关系型数据库）</li><li>事务的执行结果保证<a href="https://en.wikipedia.org/wiki/ACID">ACID</a></li><li>会用到数据库锁</li></ol><p>起初，事务仅限于对单一数据库资源的访问控制,架构服务化以后，事务的概念延伸到了服务中。倘若将一个单一的服务操作作为一个事务，那么整个服务操作只能涉及一个单一的数据库资源,这类基于单个服务单一数据库资源访问的事务，被称为本地事务(Local Transaction)。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT05.png"></p><h3 id="1-3-什么是分布式事务"><a href="#1-3-什么是分布式事务" class="headerlink" title="1.3 什么是分布式事务"></a>1.3 什么是分布式事务</h3><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上,且属于不同的应用。</p><p>指一次大的操作由不同的小操作组成的，这些小的操作分布在不同的服务器上，分布式事务需要保证这些小操作要么全部成功，要么全部失败。</p><p>本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><h4 id="1-3-0-假如没有分布式事务"><a href="#1-3-0-假如没有分布式事务" class="headerlink" title="1.3.0 假如没有分布式事务"></a>1.3.0 假如没有分布式事务</h4><p>在一系列微服务系统当中，假如不存在分布式事务，会发生什么呢？让我们以互联网中常用的交易业务为例子：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT06.png"></p><p>上图中包含了库存和订单两个独立的微服务，每个微服务维护了自己的数据库。在交易系统的业务逻辑中，一个商品在下单之前需要先调用库存服务，进行扣除库存，再调用订单服务，创建订单记录。</p><p>正常情况下，两个数据库各自更新成功，两边数据维持着一致性。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT07.png"></p><p>但是，在非正常情况下，有可能库存的扣减完成了，随后的订单记录却因为某些原因插入失败。这个时候，两边数据就失去了应有的一致性。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT08.png"></p><h4 id="1-3-1-谷粒学院真实项目订单与选课需求"><a href="#1-3-1-谷粒学院真实项目订单与选课需求" class="headerlink" title="1.3.1 谷粒学院真实项目订单与选课需求"></a>1.3.1 谷粒学院真实项目订单与选课需求</h4><p>谷粒学院的课程分为免费和收费两种。对于收费课程，用户需提交订单并完成支付方可在线学习。<br>提交订单及支付流程如下：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT09.png"></p><p>1、用户提交订单需要先登录系统<br>2、提交订单，订单信息保存到订单数据库<br>3、订单支付，调用微信支付接口完成支付<br>4、完成支付，微信支付系统通知谷粒学院支付结果<br>5、谷粒学院接收到支付结果通知，更新支付结果</p><p>提交订单流程：<br>1、用户进入课程详情页面<br>2、点击“立即购买”，打开订单确认信息</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT10.png"></p><p>3、点击“ 提交订单 ”</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT11.png"></p><p>订单提交成功，向订单数据库的orders订单表保存一条记录，向orders_detail订单明细表保存一条或多条记<br>录，向订单支付表插入一条记录。</p><p>4、订单提交成功自动进入订单支付页面</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT12.png"></p><p>5、点击“微信/支付宝支付”打开二维码</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT13.png"></p><p>6、用手机扫码支付，支付完成，点击“完成支付”<br>支付完成，收到微信支付系统的支付完成通知或请求微信查询支付已完成，更新谷粒学院订单支付表中的支付状态<br>字段。</p><h4 id="1-3-2-谷粒学院真实项目自动选课需求"><a href="#1-3-2-谷粒学院真实项目自动选课需求" class="headerlink" title="1.3.2 谷粒学院真实项目自动选课需求"></a>1.3.2 谷粒学院真实项目自动选课需求</h4><p>支付成功即完成订单，订单完成之后系统需自动添加选课。<br>下图是微信支付、谷粒学院订单服务、谷粒学院学习服务交互图：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT14.png"></p><p>1、用户支付完成，微信/支付宝支付系统会主动通知谷粒学院支付结果，谷粒学院也可主动请求微信支付查询订单的支付<br>结果。<br>最终得到支付结果后将订单支付结果保存到订单数据库中。<br>2、订单支付完成系统自动向选课表添加学生选课记录。<br>3、选课记录添加完成学习即可在线开始学习。</p><h4 id="1-3-3-问题描述"><a href="#1-3-3-问题描述" class="headerlink" title="1.3.3 问题描述"></a>1.3.3 问题描述</h4><p>根据上边的自动选课的需求，分析如下：<br>用户支付完成会将支付状态及订单状态保存在订单数据库中，由订单服务去维护订单数据库。而学生选课信息在学<br>习中心数据库，由学习服务去维护学习中心数据库的信息。下图是系统结构图：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT15.png"></p><p>上图中包含了学习和订单两个独立的微服务，每个微服务维护了自己的数据库。在交易系统的业务逻辑中，一个商品在下单之前需要先调用学习服务，进行学习选课，再调用订单服务，创建订单记录。</p><p>正常情况下，两个数据库各自更新成功，两边数据维持着一致性。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT16.png"></p><p>但是，在非正常情况下，有可能订单支付成功，学生理论上可以进行上课了，但确在学习数据库执行SQL语句执行失败了。这个时候花了钱，不能听课肯定非常崩溃，两边数据就失去了应有的一致性。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT17.png"></p><p>如何实现两个分布式服务（订单服务、学习服务）共同完成一件事即订单支付成功自动添加学生上课的需求，这里<br>的关键是如何保证两个分布式服务的事务的一致性。<br>尝试解决上边的需求，在订单服务中远程调用上课接口，伪代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">订单支付结果通知方法｛<br>    更新支付表中支付状态为“成功”。    <br>    远程调用上课接口添加上课记录。    <br>｝<br></code></pre></td></tr></table></figure><p>上边的逻辑说明：<br>1、更新支付表状态为本地数据库操作。<br>2、远程调用选课接口为网络远程调用请求。<br>3、为保存事务上边两步操作由spring控制事务，当遇到Exception异常则回滚本地数据库操作。<br>问题如下：<br>1、如果更新支付表失败则抛出异常，不再执行远程调用，此设想没有问题。<br>2、如果更新支付表成功，网络远程调用超时会拉长本地数据库事务时间，影响数据库性能。<br>3、如果更新支付表成功，远程调用添加选课成功（选课数据库commit成功），最后更新支付表commit失败，此<br>时出现操作不一致。<br>上边的问题涉及到分布式事务控制。</p><h3 id="1-4-分布式事务系统架构"><a href="#1-4-分布式事务系统架构" class="headerlink" title="1.4 分布式事务系统架构"></a>1.4 分布式事务系统架构</h3><p>本地事务主要限制在单个会话内，不涉及多个数据库资源。但是在基于SOA(Service-Oriented Architecture，面向服务架构)的分布式应用环境下，越来越多的应用要求对多个数据库资源，多个服务的访问都能纳入到同一个事务当中，分布式事务应运而生。</p><h4 id="1-4-1-什么是分布式系统？"><a href="#1-4-1-什么是分布式系统？" class="headerlink" title="1.4.1 什么是分布式系统？"></a>1.4.1 什么是分布式系统？</h4><p>部署在不同结点上的系统通过网络交互来完成协同工作的系统。<br>比如：充值加积分的业务，用户在充值系统向自己的账户充钱，在积分系统中自己积分相应的增加。充值系统和积<br>分系统是两个不同的系统，一次充值加积分的业务就需要这两个系统协同工作来完成。</p><h4 id="1-4-2-分布式事务有哪些场景？"><a href="#1-4-2-分布式事务有哪些场景？" class="headerlink" title="1.4.2 分布式事务有哪些场景？"></a>1.4.2 分布式事务有哪些场景？</h4><ol><li>电商系统中的下单扣库存<br>电商系统中，订单系统和库存系统是两个系统，一次下单的操作由两个系统协同完成</li></ol><p>2）金融系统中的银行卡充值<br>在金融系统中通过银行卡向平台充值需要通过银行系统和金融系统协同完成。</p><p>3）教育系统中下单选课业务<br>在线教育系统中，用户购买课程，下单支付成功后学生选课成功，此事务由订单系统和选课系统协同完成。</p><p>4） SNS系统的消息发送<br>在社交系统中发送站内消息同时发送手机短信，一次消息发送由站内消息系统和手机通信系统协同完成。</p><h4 id="1-4-3-单一服务分布式事务"><a href="#1-4-3-单一服务分布式事务" class="headerlink" title="1.4.3 单一服务分布式事务"></a>1.4.3 单一服务分布式事务</h4><p>最早的分布式事务应用架构很简单，不涉及服务间的访问调用，仅仅是服务内操作涉及到对多个数据库资源的访问。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT18.png"></p><h4 id="1-4-4-多服务分布式事务"><a href="#1-4-4-多服务分布式事务" class="headerlink" title="1.4.4 多服务分布式事务"></a>1.4.4 多服务分布式事务</h4><p>当一个服务操作访问不同的数据库资源，又希望对它们的访问具有事务特性时，就需要采用分布式事务来协调所有的事务参与者。</p><p>对于上面介绍的分布式事务应用架构，尽管一个服务操作会访问多个数据库资源，但是毕竟整个事务还是控制在单一服务的内部。如果一个服务操作需要调用另外一个服务，这时的事务就需要跨越多个服务了。在这种情况下，起始于某个服务的事务在调用另外一个服务的时候，需要以某种机制流转到另外一个服务，从而使被调用的服务访问的资源也自动加入到该事务当中来。下图反映了这样一个跨越多个服务的分布式事务：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT19.png"></p><h4 id="1-4-5-多服务多数据源分布式事务"><a href="#1-4-5-多服务多数据源分布式事务" class="headerlink" title="1.4.5 多服务多数据源分布式事务"></a>1.4.5 多服务多数据源分布式事务</h4><p>如果将上面这两种场景(一个服务可以调用多个数据库资源，也可以调用其他服务)结合在一起，对此进行延伸，整个分布式事务的参与者将会组成如下图所示的树形拓扑结构。在一个跨服务的分布式事务中，事务的发起者和提交均系同一个，它可以是整个调用的客户端，也可以是客户端最先调用的那个服务。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT20.png"></p><p>较之基于单一数据库资源访问的本地事务，分布式事务的应用架构更为复杂。在不同的分布式应用架构下，实现一个分布式事务要考虑的问题并不完全一样，比如对多资源的协调、事务的跨服务传播等，实现机制也是复杂多变。</p><p>事务的作用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">保证每个事务的数据一致性。<br></code></pre></td></tr></table></figure><h3 id="1-5-CAP定理"><a href="#1-5-CAP定理" class="headerlink" title="1.5 CAP定理"></a>1.5 CAP定理</h3><p>CAP 定理，又被叫作布鲁尔定理。对于设计分布式系统(不仅仅是分布式事务)的架构师来说，CAP 就是你的入门理论。</p><p>分布式系统（distributed system）正变得越来越重要，大型网站几乎都是分布式的。</p><p>分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT21.png"></p><p><strong>C (一致性)：</strong>指数据在多个副本之间能够保持一致的特性（严格的一致性）在分布式系统中的所有数据备份，在同一时刻是否同样的值。（所有节点在同一时间具有相同的数据）</p><p>一致性（Consistency）是指多副本（Replications）问题中的数据一致性。可以分为强一致性、与弱一致性。</p><p>① 强一致性</p><blockquote><p>简言之，在任意时刻，所有节点中的数据是一样的。</p></blockquote><p>例如，对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。</p><p>② 弱一致性</p><p>数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是弱一致性。</p><blockquote><p>最终一致性就属于弱一致性。</p></blockquote><p><strong>A (可用性)：</strong>指系统提供的服务必须一直处于可用的状态，每次只要收到用户的请求，服务器就必须给出回应。在合理的时间内返回合理的响应（不是错误和超时的响应）</p><blockquote><p>只有非故障节点才能满足业务正常；只有在合理的时间内，用户才能接受；只有返回合理的响应，用户才能接受。</p></blockquote><p><strong>P (网络分区容错性)：</strong>网络节点之间无法通信的情况下，节点被隔离，产生了网络分区， 整个系统仍然是可以工作的 . 大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。</p><p>什么是分区？</p><blockquote><p>在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域。这就是分区。</p></blockquote><ul><li>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。</li></ul><h4 id="1-5-1-CAP定理的证明"><a href="#1-5-1-CAP定理的证明" class="headerlink" title="1.5.1 CAP定理的证明"></a>1.5.1 CAP定理的证明</h4><p>现在我们就来证明一下，为什么不能同时满足三个特性？</p><p>假设有两台服务器，一台放着应用A和数据库V，一台放着应用B和数据库V，他们之间的网络可以互通，也就相当于分布式系统的两个部分。</p><p>在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT22.png"></p><p>当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库V0也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。</p><p>上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性，那么这样能不能同时满足一致性和可用性呢？</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT23.png"></p><p>假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；</p><p>如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。</p><p>上面的过程比较简单，但也说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。这就需要我们在搭建系统时进行取舍了，那么，怎么取舍才是更好的策略呢?</p><h4 id="1-5-2-取舍策略"><a href="#1-5-2-取舍策略" class="headerlink" title="1.5.2 取舍策略"></a>1.5.2 取舍策略</h4><p>现如今，对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，节点只会越来越多，所以节点故障、网络故障是常态，因此分区容错性也就成为了一个分布式系统必然要面对的问题。那么就只能在C和A之间进行取舍。</p><blockquote><p>原因是</p></blockquote><p>因为，在分布式系统中，网络无法 100% 可靠，分区其实是一个必然现象，随着网络节点出现问题，产生了分区, 这时候其他节点和出错节点的数据必然会不一致，这时候就要面临选择，</p><p>是选择停掉所有的服务，等网络节点修复后恢复数据，以此来保证一致性（PC）,<br>还是选择继续提供服务，放弃强一致性的要求，以此来保证整体的可用性（PA）。</p><p>所以，最多满足两个条件：</p><table><thead><tr><th>组合</th><th>分析结果</th></tr></thead><tbody><tr><td>CA</td><td>满足原子和可用，放弃分区容错。说白了，就是一个整体的应用。</td></tr><tr><td>CP</td><td>满足原子和分区容错，也就是说，要放弃可用。当系统被分区，为了保证原子性，必须放弃可用性，让服务停用。</td></tr><tr><td>AP</td><td>满足可用性和分区容错，当出现分区，同时为了保证可用性，必须让节点继续对外服务，这样必然导致失去原子性。</td></tr></tbody></table><p>在分布式系统设计中AP的应用较多，即保证分区容忍性和可用性，牺牲数据的强一致性（写操作后立刻读取到最<br>新数据），保证数据最终一致性。比如：订单退款，今日退款成功，明日账户到账，只要在预定的用户可以接受的<br>时间内退款事务走完即可。</p><p>顺便一提，CAP 理论中是忽略网络延迟，也就是当事务提交时，从节点 A 复制到节点 B 没有延迟，但是在现实中这个是明显不可能的，所以总会有一定的时间是不一致。</p><p>但是，有个特殊情况需要注意：但对于传统的项目就可能有所不同，拿银行的转账系统来说，涉及到金钱的对于数据一致性不能做出一丝的让步，C必须保证，出现网络故障的话，宁可停止服务，可以在A和P之间做取舍。</p><blockquote><p>总而言之，没有最好的策略，好的系统应该是根据业务场景来进行架构设计的，只有适合的才是最好的。</p></blockquote><h2 id="2-分布式事务解决方案"><a href="#2-分布式事务解决方案" class="headerlink" title="2 分布式事务解决方案"></a><a href="#2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">2 分布式事务解决方案</a></h2><p>1.XA两段提交(低效率)-分布式事务解决方案</p><p>2.TCC三段提交(2段,高效率[不推荐(补偿代码)])</p><p>3.本地消息(MQ+Table)</p><p>4.事务消息(RocketMQ[alibaba])</p><p>5.Seata(alibaba)</p><h3 id="2-1-基于XA协议的两阶段提交-2PC"><a href="#2-1-基于XA协议的两阶段提交-2PC" class="headerlink" title="2.1 基于XA协议的两阶段提交(2PC)"></a>2.1 基于XA协议的两阶段提交(2PC)</h3><p>X/Open 组织（即现在的 Open Group ）定义了分布式事务处理模型</p><p><strong>XA协议</strong>：XA是一个分布式事务协议。XA中大致分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如Oracle、DB2这些商业数据库都实现了XA接口，而事务管理器作为全局的调度者，负责各个本地资源的提交和回滚。</p><h4 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1 概念"></a>2.1.1 概念</h4><p>二阶段提交2PC（Two phase Commit）是指，在分布式系统里，为了保证所有节点在进行事务提交时保持一致性的一种算法。</p><h4 id="2-1-2-背景"><a href="#2-1-2-背景" class="headerlink" title="2.1.2 背景"></a>2.1.2 背景</h4><p>在分布式系统里，<strong>每个节点都可以知晓自己操作的成功或者失败，却无法知道其他节点操作的成功或失败。</strong></p><p>当一个事务跨多个节点时，为了保持事务的原子性与一致性，需要引入一个<strong>协调者</strong>（Coordinator）来统一掌控所有<strong>参与者</strong>（Participant）的操作结果，并指示它们是否要把操作结果进行真正的提交（commit）或者回滚（rollback）。</p><h4 id="2-1-3-思路"><a href="#2-1-3-思路" class="headerlink" title="2.1.3 思路"></a>2.1.3 思路</h4><p>2PC顾名思义分为两个阶段，其实施思路可概括为：</p><ol><li>投票阶段（voting phase）：参与者将操作结果通知协调者；</li><li>提交阶段（commit phase）：收到参与者的通知后，协调者再向参与者发出通知，根据反馈情况决定各参与者是否要提交还是回滚；</li></ol><h4 id="2-1-4-缺陷"><a href="#2-1-4-缺陷" class="headerlink" title="2.1.4 缺陷"></a>2.1.4 缺陷</h4><p>算法执行过程中，<strong>所有节点都处于阻塞状态，所有节点所持有的资源（例如数据库数据，本地文件等）都处于封锁状态。</strong></p><p>典型场景为：</p><ol><li>某一个参与者发出通知之前，所有参与者以及协调者都处于阻塞状态；</li><li>在协调者发出通知之前，所有参与者都处于阻塞状态；</li></ol><p>另外，如有协调者或者某个参与者出现了崩溃，为了避免整个算法处于一个完全阻塞状态，往往需要借助超时机制来将算法继续向前推进，故此时算法的效率比较低。</p><p>总的来说，<strong>2PC是一种比较保守的算法</strong>。</p><h4 id="2-1-5-举例"><a href="#2-1-5-举例" class="headerlink" title="2.1.5 举例"></a>2.1.5 举例</h4><p>甲乙丙丁四人要组织一个会议，需要确定会议时间，不妨设甲是协调者，乙丙丁是参与者。</p><p>投票阶段：</p><ol><li>甲发邮件给乙丙丁，周二十点开会是否有时间；</li><li>甲回复有时间；</li><li>乙回复有时间；</li><li>丙迟迟不回复，此时对于这个活动，甲乙丙均处于阻塞状态，算法无法继续进行；</li><li>丙回复有时间（或者没有时间）；</li></ol><p>提交阶段：</p><ol><li>协调者甲将收集到的结果反馈给乙丙丁（什么时候反馈，以及反馈结果如何，在此例中取决与丙的时间与决定）；</li><li>乙收到；</li><li>丙收到；</li><li>丁收到；</li></ol><h4 id="2-1-6-结论"><a href="#2-1-6-结论" class="headerlink" title="2.1.6 结论"></a>2.1.6 结论</h4><p><strong>2PC效率很低，分布式事务很难做</strong></p><h4 id="2-1-7-实际应用交互流程"><a href="#2-1-7-实际应用交互流程" class="headerlink" title="2.1.7 实际应用交互流程"></a>2.1.7 实际应用交互流程</h4><p><strong>第一阶段：</strong></p><p>2PC中包含着两个角色：<strong>事务协调者</strong>和<strong>事务参与者</strong>。让我们来看一看他们之间的交互流程：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT24.png"></p><p>在分布式事务的第一阶段，作为事务协调者的节点会首先向所有的参与者节点发送Prepare请求。</p><p>在接到Prepare请求之后，每一个参与者节点会各自执行与事务有关的数据更新，写入Undo Log和Redo Log。如果参与者执行成功，暂时不提交事务，而是向事务协调节点返回“完成”消息。</p><p>当事务协调者接到了所有参与者的返回消息，整个分布式事务将会进入第二阶段。</p><p><strong>第二阶段：</strong></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT25.png"></p><p>在2PC分布式事务的第二阶段，如果事务协调节点在之前所收到都是正向返回，那么它将会向所有事务参与者发出Commit请求。</p><p>接到Commit请求之后，事务参与者节点会各自进行本地的事务提交，并释放锁资源。当本地事务完成提交后，将会向事务协调者返回“完成”消息。</p><p>当事务协调者接收到所有事务参与者的“完成”反馈，整个分布式事务完成。</p><p>以上所描述的是2PC两阶段提交的正向流程，接下来我们看一看失败情况的处理流程：</p><p><strong>第一阶段：</strong></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT26.png"></p><p><strong>第二阶段：</strong></p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT27.png"></p><p>在2PC的第一阶段，如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</p><p>于是在第二阶段，事务协调节点向所有的事务参与者发送Abort(中止)请求。接收到Abort请求之后，各个事务参与者节点需要在本地进行事务的回滚操作，回滚操作依照Undo Log来进行。</p><p>以上就是2PC两阶段提交协议的详细过程。</p><p>2PC两阶段提交究竟有哪些不足呢？</p><p><strong>1.性能问题</strong></p><p>2PC遵循强一致性。在事务执行过程中，各个节点占用着数据库资源，只有当所有节点准备完毕，事务协调者才会通知提交，参与者提交后释放资源。这样的过程有着非常明显的性能问题。</p><p><strong>2.协调者单点故障问题</strong></p><p>事务协调者是整个2PC模型的核心，一旦事务协调者节点挂掉，参与者收不到提交或是回滚通知，参与者会一直处于中间状态无法完成事务。</p><p><strong>3.丢失消息导致的不一致问题。</strong></p><p>在2PC协议的第二个阶段，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。</p><h3 id="2-2-代码补偿事务-TCC）"><a href="#2-2-代码补偿事务-TCC）" class="headerlink" title="2.2 代码补偿事务(TCC）"></a>2.2 代码补偿事务(TCC）</h3><p>TCC的作用主要是解决跨服务调用场景下的分布式事务问题</p><h4 id="2-2-1-场景案例"><a href="#2-2-1-场景案例" class="headerlink" title="2.2.1 场景案例"></a>2.2.1 <strong>场景案例</strong></h4><p>以航班预定的案例，来介绍TCC要解决的事务场景。在这里笔者虚构一个场景，把自己当做航班预定的主人公，来介绍这个案例。从合肥 –&gt; 昆明 –&gt; 大理。</p><p>准备从合肥出发，到云南大理去游玩，然后使用美团App(机票代理商)来订机票。发现没有从合肥直达大理的航班，需要到昆明进行中转。如下图：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT28.png"></p><p>从图中我们可以看出来，从合肥到昆明乘坐的是四川航空，从昆明到大理乘坐的是东方航空。</p><p> 由于使用的是美团App预定，当我选择了这种航班预定方案后，美团App要去四川航空和东方航空各帮我购买一张票。如下图：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT29.png"></p><p>考虑最简单的情况：美团先去川航帮我买票，如果买不到，那么东航也没必要买了。如果川航购买成功，再去东航购买另一张票。</p><p> 现在问题来了：假设美团先从川航成功买到了票，然后去东航买票的时候，因为天气问题，东航航班被取消了。那么此时，美团必须取消川航的票，因为只有一张票是没用的，不取消就是浪费我的钱。那么如果取消会怎样呢？如果读者有取消机票经历的话，非正常退票，肯定要扣手续费的。在这里，川航本来已经购买成功，现在因为东航的原因要退川航的票，川航应该是要扣代理商的钱的。</p><p> 那么美团就要保证，如果任一航班购买失败，都不能扣钱，怎么做呢？</p><p> 两个航空公司都为美团提供以下3个接口：机票预留接口、确认接口、取消接口。美团App分2个阶段进行调用，如下所示:</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT30.png"></p><p><strong>在第1阶段：</strong></p><p> 美团分别请求两个航空公司预留机票，两个航空公司分别告诉美团预留成功还是失败。航空公司需要保证，机票预留成功的话，之后一定能购买到。</p><p><strong>在第2阶段：</strong></p><p> 如果两个航空公司都预留成功，则分别向两个公司发送确认购买请求。</p><p> 如果两个航空公司任意一个预留失败，则对于预留成功的航空公司也要取消预留。这种情况下，对于之前预留成功机票的航班取消，也不会扣用户的钱，因为购买并没实际发生，之前只是请求预留机票而已。</p><p> 通过这种方案，可以保证两个航空公司购买机票的一致性，要不都成功，要不都失败，即使失败也不会扣用户的钱。如果在两个航班都已经已经确认购买后，再退票，那肯定还是要扣钱的。</p><p> 当然，实际情况肯定这里提到的肯定要复杂，通常航空公司在第一阶段，对于预留的机票，会要求在指定的时间必须确认购买(支付成功)，如果没有及时确认购买，会自动取消。假设川航要求10分钟内支付成功，东航要求30分钟内支付成功。以较短的时间算，如果用户在10分钟内支付成功的话，那么美团会向两个航空公司都发送确认购买的请求，如果超过10分钟(以较短的时间为准)，那么就不能进行支付。</p><p> 这个方案提供给我们一种跨服务保证事务一致性的一种解决思路，可以把这种方案当做TCC的雏形。</p><p>TCC是Try ( 尝试 ) — Confirm(确认) — Cancel ( 取消 ) 的简称:</p><table><thead><tr><th>操作方法</th><th>含义</th></tr></thead><tbody><tr><td>Try</td><td>完成所有业务检查（一致性），预留业务资源(准隔离性) 回顾上面航班预定案例的阶段1，机票就是业务资源，所有的资源提供者(航空公司)预留都成功，try阶段才算成功</td></tr><tr><td>Confirm</td><td>确认执行业务操作，不做任何业务检查， 只使用Try阶段预留的业务资源。回顾上面航班预定案例的阶段2，美团APP确认两个航空公司机票都预留成功，因此向两个航空公司分别发送确认购买的请求。</td></tr><tr><td>Cancel</td><td>取消Try阶段预留的业务资源。回顾上面航班预定案例的阶段2，如果某个业务方的业务资源没有预留成功，则取消所有业务资源预留请求。</td></tr></tbody></table><p>有哥们立马会想到，TCC与XA两阶段提交有着异曲同工之妙，下图列出了二者之间的对比：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT31.png"></p><ol><li>在阶段1：</li></ol><p> 在XA中，各个RM准备提交各自的事务分支，事实上就是准备提交资源的更新操作(insert、delete、update等)；而在TCC中，是主业务活动请求(try)各个从业务服务预留资源。</p><ol start="2"><li>在阶段2：</li></ol><p> XA根据第一阶段每个RM是否都prepare成功，判断是要提交还是回滚。如果都prepare成功，那么就commit每个事务分支，反之则rollback每个事务分支。</p><p> TCC中，如果在第一阶段所有业务资源都预留成功，那么confirm各个从业务服务，否则取消(cancel)所有从业务服务的资源预留请求。</p><h4 id="2-2-2-TCC两阶段提交与XA两阶段提交的区别"><a href="#2-2-2-TCC两阶段提交与XA两阶段提交的区别" class="headerlink" title="2.2.2 TCC两阶段提交与XA两阶段提交的区别"></a>2.2.2 TCC两阶段提交与XA两阶段提交的区别</h4><p> <strong>XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。</strong></p><p> XA事务中的两阶段提交内部过程是对开发者屏蔽的 ，其内部会委派给TransactionManager进行真正的两阶段提交，因此开发者从代码层面是感知不到这个过程的。而事务管理器在两阶段提交过程中，从prepare到commit/rollback过程中，资源实际上一直都是被加锁的。如果有其他人需要更新这两条记录，那么就必须等待锁释放。</p><p><strong>TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。</strong></p><p> TCC中的两阶段提交并没有对开发者完全屏蔽，也就是说从代码层面，开发者是可以感受到两阶段提交的存在。如上述航班预定案例：在第一阶段，航空公司需要提供try接口(机票资源预留)。在第二阶段，航空公司提需要提供confirm/cancel接口(确认购买机票/取消预留)。开发者明显的感知到了两阶段提交过程的存在。try、confirm/cancel在执行过程中，一般都会开启各自的本地事务，来保证方法内部业务逻辑的ACID特性。其中：</p><p> 1、try过程的本地事务，是保证资源预留的业务逻辑的正确性。</p><p> 2、confirm/cancel执行的本地事务逻辑确认/取消预留资源，以保证最终一致性，也就是所谓的<code>补偿型事务</code></p><p>由于是多个独立的本地事务，因此不会对资源一直加锁。</p><p>TCC 将事务提交分为 Try - Confirm - Cancel 3个操作。其和两阶段提交有点类似，Try为第一阶段，Confirm - Cancel为第二阶段，是一种应用层面侵入业务的两阶段提交。</p><table><thead><tr><th>操作方法</th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Try</td><td>预留业务资源/数据效验-尝试检查当前操作是否可行</td></tr><tr><td>Confirm</td><td>确认执行业务操作，实际提交数据，不做任何业务检查，try成功，confirm必定成功</td></tr><tr><td>Cancel</td><td>取消执行业务操作，实际回滚数据</td></tr></tbody></table><p>其核心在于将业务分为两个操作步骤完成。不依赖 RM 对分布式事务的支持，而是通过对业务逻辑的分解来实现分布式事务。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT32.png"></p><p>例如： A要向 B 转账，思路大概是：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less">假设用户<span class="hljs-selector-tag">user</span>表中有两个字段：可用余额(available_money)、冻结余额(frozen_money)<br><span class="hljs-selector-tag">A</span>扣钱对应服务<span class="hljs-selector-tag">A</span>(ServiceA)<br><span class="hljs-selector-tag">B</span>加钱对应服务<span class="hljs-selector-tag">B</span>(ServiceB)<br>转账订单服务(OrderService)<br>业务转账方法服务(BusinessService)<br></code></pre></td></tr></table></figure><p>ServiceA，ServiceB，OrderService都需分别实现try()，confirm()，cancle()方法，方法对应业务逻辑如下</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT33.png"></p><p>其中业务调用方BusinessService中就需要调用<br>ServiceA.try()<br>ServiceB.try()<br>OrderService.try()</p><p>1、当所有try()方法均执行成功时，对全局事物进行提交，即由事物管理器调用每个微服务的confirm()方法</p><p>2、 当任意一个方法try()失败(预留资源不足，抑或网络异常，代码异常等任何异常)，由事物管理器调用每个微服务的cancle()方法对全局事务进行回滚</p><p><strong>优点：</strong> 跟2PC(很多第三方框架)比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些</p><p><strong>缺点：</strong> 缺点还是比较明显的，在2,3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理。</p><h3 id="2-3-本地消息表（异步确保）-事务最终一致性"><a href="#2-3-本地消息表（异步确保）-事务最终一致性" class="headerlink" title="2.3 本地消息表（异步确保）- 事务最终一致性"></a>2.3 本地消息表（异步确保）- 事务最终一致性</h3><p>这种实现方式的思路，其实是源于 ebay，后来通过支付宝等公司的布道，在业内广泛使用。<strong>其基本的设计思想是将远程分布式事务拆分成一系列的本地事务</strong>。如果不考虑性能及设计优雅，借助关系型数据库中的表即可实现。</p><p>举个经典的跨行转账的例子来描述。</p><p>第一步伪代码如下，扣款 1W，通过本地事务保证了凭证消息插入到消息表中。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT34.png"></p><p>第二步，通知对方银行账户上加 1W 了。那问题来了，如何通知到对方呢？</p><p>通常采用两种方式：</p><ol><li>采用时效性高的 MQ，由对方订阅消息并监听，有消息时自动触发事件</li><li>采用定时轮询扫描的方式，去检查消息表的数据</li></ol><p>两种方式其实各有利弊，仅仅依靠 MQ，可能会出现通知失败的问题。而过于频繁的定时轮询，效率也不是最佳的（90% 是无用功）。所以，我们一般会把两种方式结合起来使用。</p><p>解决了通知的问题，又有新的问题了。万一这消息有重复被消费，往用户帐号上多加了钱，那岂不是后果很严重？</p><p>仔细思考，其实我们可以消息消费方，也通过一个“消费状态表”来记录消费状态。在执行“加款”操作之前，检测下该消息（提供标识）是否已经消费过，消费完成后，通过本地事务控制来更新这个“消费状态表”。这样子就避免重复消费的问题。</p><p>总结：上述的方式是一种非常经典的实现，基本避免了分布式事务，实现了“最终一致性”。但是，关系型数据库的吞吐量和性能方面存在瓶颈，频繁的读写消息会给数据库造成压力。所以，在真正的高并发场景下，该方案也会有瓶颈和限制的。</p><p>在订单系统新增一条消息表，将新增订单和新增消息放到一个事务里完成，然后通过轮询的方式去查询消息表，将消息推送到 MQ，库存系统去消费 MQ。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT35.png"></p><p>执行流程：</p><ul><li>订单系统，添加一条订单和一条消息，在一个事务里提交。</li><li>订单系统，使用定时任务轮询查询状态为未同步的消息表，发送到 MQ，如果发送失败，就重试发送。</li><li>库存系统，接收 MQ 消息，修改库存表，需要保证幂等操作。</li><li>如果修改成功，调用 RPC 接口修改订单系统消息表的状态为已完成或者直接删除这条消息。</li><li>如果修改失败，可以不做处理，等待重试。</li></ul><p>订单系统中的消息有可能由于业务问题会一直重复发送，所以为了避免这种情况可以记录一下发送次数，当达到次数限制之后报警，人工接入处理；库存系统需要保证幂等，避免同一条消息被多次消费造成数据一致。</p><p>本地消息表这种方案实现了最终一致性，需要在业务系统里增加消息表，业务逻辑中多一次插入的 DB 操作，所以性能会有损耗，而且最终一致性的间隔主要由定时任务的间隔时间决定。</p><p><strong>优点：</strong> 一种非常经典的实现，避免了分布式事务，实现了最终一致性。在 .NET中 有现成的解决方案。</p><p><strong>缺点：</strong> 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p><h3 id="2-4-MQ-事务消息"><a href="#2-4-MQ-事务消息" class="headerlink" title="2.4 MQ 事务消息"></a>2.4 MQ 事务消息</h3><p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p><p>以阿里的 RocketMQ 中间件为例，其思路大致为：</p><ol><li>RocketMQ提供了类似X/Open XA的分布事务功能，通过MQ的事务消息能达到分布式事务的最终一致。</li><li>发送方在业务执行开始会先向<a href="https://cloud.tencent.com/product/cmq?from=10680">消息队列</a>中投递 “ 半消息 ” ，半消息即暂时不会真正投递的消息，当发送方（即生产者）将消息成功发送给了MQ服务端且并未将该消息的二次确认结果返回，此时消息状态是“ 暂时不可投递 ” 状态（可以认为是状态未知）。该状态下的消息即半消息。</li><li>如果出现网络闪断、生产者应用重启等原因导致事务消息二次确认丢失，MQ服务端会通过扫描发现某条消息长期处于 “ 半消息 ” 状态，MQ服务端会主动向生产者查询该消息的最终状态是处于Commit(消息提交)还是Rollback(消息回滚)。这个过程称为消息回查。</li></ol><p>在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</p><blockquote><p>总体而言RocketMQ事务消息分为两条主线</p></blockquote><p>定时任务发送流程：发送half message(半消息)，执行本地事务，发送事务执行结果</p><p>定时任务回查流程：MQ服务器回查本地事务，发送事务执行结果</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT36.png"></p><blockquote><p>具体流程如下</p></blockquote><p>1、<code>Producer</code> 向 <code>MQ</code> 服务器 发送消息 , <code>MQ Server</code> 将消息状态标记为 <code>Prepared</code>（预备状态），注意此时这条消息消费者（MQ订阅方）是无法消费到的。</p><p>2、<code>MQ</code> 服务器收到消息并持久化成功之后，会向<code>Producer</code> 确认首次消息发送成功，此时消息处于 <code>half message(半消息)</code> 状态，并未发送给对应的 <code>Consumer</code> 。</p><p>3、Producer 开始执行本地事务逻辑 , 通过本地数据库事务控制。</p><p>4、根据事务执行结果，<code>Producer</code> 向 <code>MQ</code> 服务器提交二次确认 ( <code>commit</code> 或者 <code>rollback</code>) 。<code>MQ Server</code> 收到 <code>Commit</code> 状态则将半消息标记为可投递，<code>Consumer</code> 最终将收到该消息；MQ Server 收到 Rollback 状态则删除半消息，<code>Consumer</code> 将不会接受该消息。</p><p>5、在断网或者应用重启的情况下，二次确认未成功的发给 MQ Server，MQ Server 会主动向 Producer 启动消息回查</p><p>6、Producer 根据事务执行结果，对消息回查返回对应的结果。</p><p>7、Mq Server根据返回结果，决定继续投递消息或者丢弃消息(重复第4步操作)。</p><p><strong>注意</strong> 1-4 为事务消息的发送过程， 5-6 为事务消息的回查过程。</p><p><strong>优点：</strong> 实现了最终一致性，不需要依赖本地数据库事务。</p><p><strong>缺点：</strong> 目前主流MQ中只有RocketMQ支持事务消息。</p><h3 id="2-5-分布式事务解决的方案"><a href="#2-5-分布式事务解决的方案" class="headerlink" title="2.5 分布式事务解决的方案"></a>2.5 分布式事务解决的方案</h3><p>目前分布式事务解决的方案主要有对业务无入侵和有入侵的方案，无入侵方案主要有基于数据库 XA 协议的两段式提交（2PC）方案，它的优点是对业务代码无入侵，但是它的缺点也是很明显：必须要求数据库对 XA 协议的支持，且由于 XA 协议自身的特点，它会造成事务资源长时间得不到释放，锁定周期长，而且在应用层上面无法干预，因此它性能很差，它的存在相当于七伤拳那样“伤人七分，损己三分”，因此在互联网项目中并不是很流行这种解决方案。</p><p>为了这个弥补这种方案带来性能低的问题，大佬们又想出了很多种方案来解决，但这无一例外都需要通过在应用层做手脚，即入侵业务的方式，比如很出名的 TCC 方案，基于 TCC 也有很多成熟的框架，如 ByteTCC、tcc-transaction 等。以及基于可靠消息的最终一致性来实现，如 RocketMQ 的事务消息。</p><p>入侵代码的方案是基于现有情形“迫不得已”才推出的解决方案，实际上它们实现起来非常不优雅，一个事务的调用通常伴随而来的是对该事务接口增加一系列的反向操作，比如 TCC 三段式提交，提交逻辑必然伴随着回滚的逻辑，这样的代码会使得项目非常臃肿，维护成本高。</p><blockquote><p>什么是侵入性</p></blockquote><p>当你的代码引入了一个组件,导致其它代码或者设计,要做相应的 <strong>更改以适应新组件</strong>.这样的情况我们就认为这个新组件具有侵入性</p><h3 id="2-5-理想的方案应该是什么样子"><a href="#2-5-理想的方案应该是什么样子" class="headerlink" title="2.5 理想的方案应该是什么样子"></a>2.5 理想的方案应该是什么样子</h3><p>针对上面所说的分布式事务解决方案的痛点，那很显然，我们理想的分布式事务解决方案肯定是性能要好而且要对业务无入侵，业务层上无需关心分布式事务机制的约束。</p><p>一个理想的分布式事务解决方案应该：像使用 <strong>本地事务</strong> 一样简单，业务逻辑只关注业务层面的需求，不需要考虑事务机制上的约束。</p><h4 id="2-5-1-原理和设计"><a href="#2-5-1-原理和设计" class="headerlink" title="2.5.1 原理和设计"></a>2.5.1 原理和设计</h4><p>我们要设计一个对业务无侵入的方案，所以从业务无侵入的 XA 方案来思考：</p><p>是否可以在 XA 的基础上演进，解决掉 XA 方案面临的问题呢？</p><h4 id="2-5-2-如何定义一个分布式事务"><a href="#2-5-2-如何定义一个分布式事务" class="headerlink" title="2.5.2 如何定义一个分布式事务"></a>2.5.2 如何定义一个分布式事务</h4><p>首先，很自然的，我们可以把一个分布式事务理解成一个包含了若干 <strong>分支事务</strong> 的 <strong>全局事务</strong>。<strong>全局事务</strong> 的职责是协调其下管辖的 <strong>分支事务</strong> 达成一致，要么一起成功提交，要么一起失败回滚。此外，通常 <strong>分支事务</strong> 本身就是一个满足 ACID 的 <strong>本地事务</strong>。这是我们对分布式事务结构的基本认识，与 XA 是一致的。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT37.png"></p><h4 id="2-5-3-Seata介绍"><a href="#2-5-3-Seata介绍" class="headerlink" title="2.5.3 Seata介绍"></a>2.5.3 Seata介绍</h4><p>seata是阿里开源的一个分布式事务框架，能够让大家在操作分布式事务时，像操作本地事务一样简单。一个注解搞定分布式事务。</p><p>解决分布式事务问题，有两个设计初衷</p><p><strong>对业务无侵入</strong>：即减少技术架构上的微服务化所带来的分布式事务问题对业务的侵入<br><strong>高性能</strong>：减少分布式事务解决方案所带来的性能消耗</p><p>seata中有两种分布式事务实现方案，AT及TCC</p><ul><li>AT模式主要关注多 DB 访问的数据一致性，当然也包括多服务下的多 DB 数据访问一致性问题 2PC-改进</li><li>TCC 模式主要关注业务拆分，在按照业务横向扩展资源时，解决微服务间调用的一致性问题</li></ul><p>那 Seata 是怎么做到的呢？下面说说它的各个模块之间的关系。</p><p>Seata 的设计思路是将一个分布式事务可以理解成一个全局事务，下面挂了若干个分支事务，而一个分支事务是一个满足 ACID 的本地事务，因此我们可以操作分布式事务像操作本地事务一样。</p><p>2019 年 1 月，阿里巴巴中间件团队发起了开源项目 <a href="https://www.oschina.net/p/fescar"><em>Fescar</em></a><em>（Fast &amp; EaSy Commit And Rollback）</em>，和社区一起共建开源分布式事务解决方案。Fescar 的愿景是让分布式事务的使用像本地事务的使用一样，简单和高效，并逐步解决开发者们遇到的分布式事务方面的所有难题。</p><h5 id="2-5-3-1-AT模式"><a href="#2-5-3-1-AT模式" class="headerlink" title="2.5.3.1 AT模式"></a>2.5.3.1 AT模式</h5><p>它使得应用代码可以像使用本地事务一样使用分布式事务，完全屏蔽了底层细节</p><p>AT 模式下，把每个数据库被当做是一个 Resource，Seata 里称为 DataSource Resource。业务通过 JDBC 标准接口访问数据库资源时，Seata 框架会对所有请求进行拦截，做一些操作。每个本地事务提交时，Seata RM（Resource Manager，资源管理器） 都会向 TC（Transaction Coordinator，事务协调器） 注册一个分支事务。当请求链路调用完成后，发起方通知 TC 提交或回滚分布式事务，进入二阶段调用流程。此时，TC 会根据之前注册的分支事务回调到对应参与者去执行对应资源的第二阶段。TC 是怎么找到分支事务与资源的对应关系呢？每个资源都有一个全局唯一的资源 ID，并且在初始化时用该 ID 向 TC 注册资源。在运行时，每个分支事务的注册都会带上其资源 ID。这样 TC 就能在二阶段调用时正确找到对应的资源。</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT38.png"></p><p>解释：</p><p>**Transaction Coordinator (TC)**： 事务协调器，维护全局事务的运行状态，负责协调并决定全局事务的提交或回滚。<br><strong>Transaction Manager（TM）</strong>： 控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议。<br>**Resource Manager (RM)**： 资源管理器，负责本地事务的注册，本地事务状态的汇报(投票)，并且负责本地事务的提交和回滚。</p><p>XID：一个全局事务的唯一标识</p><p>其中，TM是一个分布式事务的发起者和终结者，TC负责维护分布式事务的运行状态，而RM则负责本地事务的运行。如下图所示：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT39.png"></p><p>下面是一个分布式事务在Seata中的执行流程：</p><ol><li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID</li><li>XID 在微服务调用链路的上下文中传播。</li><li>RM 向 TC 注册分支事务，接着执行这个分支事务并提交（重点：RM在第一阶段就已经执行了本地事务的提交/回滚），最后将执行结果汇报给TC</li><li>TM 根据 TC 中所有的分支事务的执行情况，发起全局提交或回滚决议。</li><li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li></ol><p>Seata 中有三大模块，分别是 TM、RM 和 TC。 其中 TM 和 RM 是作为 Seata 的客户端与业务系统集成在一起，TC 作为 Seata 的服务端独立部署。</p><p>2.5.3.4 MT 模式</p><p>Seata还支持MT模式。MT模式本质上是一种TCC方案，业务逻辑需要被拆分为 Prepare/Commit/Rollback 3 部分，形成一个 MT 分支，加入全局事务。如图所示：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/DistributedTransaction/DT40.png"></p><p>MT 模式一方面是 AT 模式的补充。另外，更重要的价值在于，通过 MT 模式可以把众多非事务性资源纳入全局事务的管理中。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-高级客户端</title>
      <link href="/2022/01/11/ElasticSearch/"/>
      <url>/2022/01/11/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="ES-amp-SpringData-ES"><a href="#ES-amp-SpringData-ES" class="headerlink" title="ES &amp; SpringData ES"></a>ES &amp; SpringData ES</h1><h2 id="高级客户端"><a href="#高级客户端" class="headerlink" title="高级客户端"></a><a href="#%E9%AB%98%E7%BA%A7%E5%AE%A2%E6%88%B7%E7%AB%AF">高级客户端</a></h2><p>创建项目 <code>elasticsearch-demo</code></p><p>导入pom文件，ES依赖的版本最好和客户端对应</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--引入es的坐标--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.在 <code>resource</code> 文件夹下面创建 <code>application.yml</code> 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">IP地址</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure><p>2.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchDemoApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ElasticsearchDemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.创建 <code>com.atguigu.config.ElasticSearchConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.config;<br><br><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfig</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHost</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHost</span><span class="hljs-params">(String host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPort</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">client</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(<br>                <span class="hljs-keyword">new</span> HttpHost(<br>                        host,<br>                        port,<br>                        <span class="hljs-string">&quot;http&quot;</span><br>                )<br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br> <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a><a href="#%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95">创建索引</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1.使用client获取操作索引的对象</span><br>        IndicesClient indicesClient = client.indices();<br>        <span class="hljs-comment">//2.具体操作，获取返回值</span><br>        CreateIndexRequest createRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;abc&quot;</span>);<br>        CreateIndexResponse response = indicesClient.create(createRequest, RequestOptions.DEFAULT);<br><br>        <span class="hljs-comment">//3.根据返回值判断结果</span><br>        System.out.println(response.isAcknowledged());<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s001.png" alt="s001"></p><h3 id="添加索引和映射"><a href="#添加索引和映射" class="headerlink" title="添加索引和映射"></a><a href="#%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E5%92%8C%E6%98%A0%E5%B0%84">添加索引和映射</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIndexAndMapping</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.使用client获取操作索引的对象</span><br>        IndicesClient indicesClient = client.indices();<br>        <span class="hljs-comment">//2.具体操作，获取返回值</span><br>        CreateIndexRequest createRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-comment">//2.1 设置mappings</span><br>        String mapping = <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;properties\&quot; : &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;address\&quot; : &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;text\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;analyzer\&quot; : \&quot;ik_max_word\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;age\&quot; : &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;long\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;name\&quot; : &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;keyword\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;&quot;</span>;<br>        createRequest.mapping(mapping,XContentType.JSON);<br>        CreateIndexResponse response = indicesClient.create(createRequest, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">//3.根据返回值判断结果</span><br>        System.out.println(response.isAcknowledged());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s002.png" alt="s002"></p><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a><a href="#%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95">查询索引</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询索引</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>     IndicesClient indices = client.indices();<br>     GetIndexRequest getReqeust = <span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;aaa&quot;</span>);<br>     GetIndexResponse response = indices.get(getReqeust, RequestOptions.DEFAULT);<br><br>     <span class="hljs-comment">//获取结果</span><br>     Map&lt;String, MappingMetaData&gt; mappings = response.getMappings();<br>     <span class="hljs-keyword">for</span> (String key : mappings.keySet()) &#123;<br>         System.out.println(key+<span class="hljs-string">&quot;:&quot;</span> + mappings.get(key).getSourceAsMap());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s003.png" alt="s003"></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a><a href="#%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95">删除索引</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 删除索引</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       IndicesClient indices = client.indices();<br><br>       DeleteIndexRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;abc&quot;</span>);<br>       AcknowledgedResponse response = indices.delete(deleteRequest, RequestOptions.DEFAULT);<br><br>       System.out.println(response.isAcknowledged());<br><br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="判断索引是否存在"><a href="#判断索引是否存在" class="headerlink" title="判断索引是否存在"></a><a href="#%E5%88%A4%E6%96%AD%E7%B4%A2%E5%BC%95%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8">判断索引是否存在</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 判断索引是否存在</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">existIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       IndicesClient indices = client.indices();<br><br>       GetIndexRequest getRequest = <span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;aaa&quot;</span>);<br>       <span class="hljs-keyword">boolean</span> exists = indices.exists(getRequest, RequestOptions.DEFAULT);<br>       System.out.println(exists);<br><br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="添加文档-使用map作为数据"><a href="#添加文档-使用map作为数据" class="headerlink" title="添加文档,使用map作为数据"></a><a href="#%E6%B7%BB%E5%8A%A0%E6%96%87%E6%A1%A3-%E4%BD%BF%E7%94%A8map%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE">添加文档,使用map作为数据</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 添加文档,使用map作为数据</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//数据对象，map</span><br>       Map data = <span class="hljs-keyword">new</span> HashMap();<br>       data.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;深圳宝安&quot;</span>);<br>       data.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>       data.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>);<br><br><br>       <span class="hljs-comment">//1.获取操作文档的对象</span><br>       IndexRequest request = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;aaa&quot;</span>).id(<span class="hljs-string">&quot;1&quot;</span>).source(data);<br>       <span class="hljs-comment">//添加数据，获取结果</span><br>       IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br><br>       <span class="hljs-comment">//打印响应结果</span><br>       System.out.println(response.getId());<br>   &#125;<br></code></pre></td></tr></table></figure><p>创建 <code>com.atguigu.domain.Person</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-comment">// 设置 set get 和tostring方法</span><br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="添加文档-使用对象作为数据"><a href="#添加文档-使用对象作为数据" class="headerlink" title="添加文档,使用对象作为数据"></a><a href="#%E6%B7%BB%E5%8A%A0%E6%96%87%E6%A1%A3-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE">添加文档,使用对象作为数据</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 添加文档,使用对象作为数据</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDoc2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//数据对象，javaObject</span><br>       Person p = <span class="hljs-keyword">new</span> Person();<br>       p.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>       p.setName(<span class="hljs-string">&quot;硅谷2222&quot;</span>);<br>       p.setAge(<span class="hljs-number">30</span>);<br>       p.setAddress(<span class="hljs-string">&quot;北京昌平区&quot;</span>);<br><br>       <span class="hljs-comment">//将对象转为json</span><br>       String data = JSON.toJSONString(p);<br><br>       <span class="hljs-comment">//1.获取操作文档的对象</span><br>       IndexRequest request = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;aaa&quot;</span>).id(p.getId()).source(data,XContentType.JSON);<br>       <span class="hljs-comment">//添加数据，获取结果</span><br>       IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br><br>       <span class="hljs-comment">//打印响应结果</span><br>       System.out.println(response.getId());<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s004.png" alt="s004"></p><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E6%A1%A3">修改文档</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改文档：添加文档时，如果id存在则修改，id不存在则添加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//数据对象，javaObject</span><br>        Person p = <span class="hljs-keyword">new</span> Person();<br>        p.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>        p.setName(<span class="hljs-string">&quot;硅谷&quot;</span>);<br>        p.setAge(<span class="hljs-number">30</span>);<br>        p.setAddress(<span class="hljs-string">&quot;北京昌平区&quot;</span>);<br><br>        <span class="hljs-comment">//将对象转为json</span><br>        String data = JSON.toJSONString(p);<br><br>        <span class="hljs-comment">//1.获取操作文档的对象</span><br>        IndexRequest request = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;aaa&quot;</span>).id(p.getId()).source(data,XContentType.JSON);<br>        <span class="hljs-comment">//添加数据，获取结果</span><br>        IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br><br>        <span class="hljs-comment">//打印响应结果</span><br>        System.out.println(response.getId());<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="根据id查询文档"><a href="#根据id查询文档" class="headerlink" title="根据id查询文档"></a><a href="#%E6%A0%B9%E6%8D%AEid%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3">根据id查询文档</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询文档</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findDocById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        GetRequest getReqeust = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-comment">//getReqeust.id(&quot;1&quot;);</span><br>        GetResponse response = client.get(getReqeust, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">//获取数据对应的json</span><br>        System.out.println(response.getSourceAsString());<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="根据id删除文档"><a href="#根据id删除文档" class="headerlink" title="根据id删除文档"></a><a href="#%E6%A0%B9%E6%8D%AEid%E5%88%A0%E9%99%A4%E6%96%87%E6%A1%A3">根据id删除文档</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除文档</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DeleteResponse response = client.delete(deleteRequest, RequestOptions.DEFAULT);<br>        System.out.println(response.getId());<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="批量操作-脚本"><a href="#批量操作-脚本" class="headerlink" title="批量操作-脚本"></a>批量操作-脚本</h3><p>Bulk 批量操作是将文档的增删改查一些列操作，通过一次请求全都做完。减少网络传输次数。</p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s005.png"></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vala">GET person/_search<br><br><span class="hljs-meta"># 批量操作</span><br><span class="hljs-meta"># 1 删除1号记录</span><br><span class="hljs-meta"># 2 添加8号记录</span><br><span class="hljs-meta"># 3 修改2号记录 名称为二号</span><br><br>POST _bulk<br>&#123;<span class="hljs-string">&quot;delete&quot;</span>:&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;person&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;create&quot;</span>:&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;person&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;8号&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">80</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;update&quot;</span>:&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;person&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;doc&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;2号&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 1. 批量操作 bulk</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBulk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      <span class="hljs-comment">//创建bulkrequest对象，整合所有操作</span><br>      BulkRequest bulkRequest = <span class="hljs-keyword">new</span> BulkRequest();<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      # 1. 删除1号记录</span><br><span class="hljs-comment">      # 2. 添加6号记录</span><br><span class="hljs-comment">      # 3. 修改3号记录 名称为 “三号”</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-comment">//添加对应操作</span><br>      <span class="hljs-comment">//1. 删除1号记录</span><br>      DeleteRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;person&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>      bulkRequest.add(deleteRequest);<br><br>      <span class="hljs-comment">//2. 添加6号记录</span><br>      Map map = <span class="hljs-keyword">new</span> HashMap();<br>      map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;六号&quot;</span>);<br>      IndexRequest indexRequest = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;person&quot;</span>).id(<span class="hljs-string">&quot;6&quot;</span>).source(map);<br>      bulkRequest.add(indexRequest);<br><br>      Map map2 = <span class="hljs-keyword">new</span> HashMap();<br>      map2.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;三号&quot;</span>);<br>      <span class="hljs-comment">//3. 修改3号记录 名称为 “三号”</span><br>      UpdateRequest updateReqeust = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;person&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>).doc(map2);<br>      bulkRequest.add(updateReqeust);<br><br>      <span class="hljs-comment">//执行批量操作</span><br>      BulkResponse response = client.bulk(bulkRequest, RequestOptions.DEFAULT);<br>      RestStatus status = response.status();<br>      System.out.println(status);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a><a href="#%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE">导入数据</a></h3><p>将数据库中Goods表的数据导入到ElasticSearch中</p><p>① 将数据库中Goods表的数据导入到ElasticSearch中</p><p>② 创建索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT goods<br>&#123;<br><span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br><span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br><span class="hljs-attr">&quot;title&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;price&quot;</span>: &#123; <br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;createTime&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;categoryName&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;brandName&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;spec&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;saleNum&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;stock&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br># 查询索引<br>GET goods<br></code></pre></td></tr></table></figure><ul><li>title:商品标题</li><li>price:商品价格</li><li>createTime:创建时间</li><li>categoryName:分类名称。如：家电，手机</li><li>brandName:品牌名称。如：华为，小米</li><li>spec: 商品规格。如： spec:{“屏幕尺寸”,“5寸”，“内存大小”,“128G”}</li><li>saleNum:销量</li><li>stock:库存量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table `goods` (<br>`id` double ,<br>`title` varchar (300),<br>`price` Decimal (22),<br>`stock` double ,<br>`saleNum` double ,<br>`createTime` datetime ,<br>`categoryName` varchar (600),<br>`brandName` varchar (300),<br>`spec` varchar (600)<br>); <br></code></pre></td></tr></table></figure><p>测试数据：测试数据：链接：<a href="https://pan.baidu.com/s/14V3csJT1Xf2c-cKFDl7lNg">https://pan.baidu.com/s/14V3csJT1Xf2c-cKFDl7lNg</a><br>提取码：sxzx</p><p>添加文档数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">POST goods/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-attr">&quot;title&quot;</span>:<span class="hljs-string">&quot;小米手机&quot;</span>,<br>  <span class="hljs-attr">&quot;price&quot;</span>:<span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">&quot;createTime&quot;</span>:<span class="hljs-string">&quot;2019-12-01&quot;</span>,<br>  <span class="hljs-attr">&quot;categoryName&quot;</span>:<span class="hljs-string">&quot;手机&quot;</span>,<br>  <span class="hljs-attr">&quot;brandName&quot;</span>:<span class="hljs-string">&quot;小米&quot;</span>,<br>  <span class="hljs-attr">&quot;saleNum&quot;</span>:<span class="hljs-number">3000</span>,<br>  <span class="hljs-attr">&quot;stock&quot;</span>:<span class="hljs-number">10000</span>,<br>  <span class="hljs-attr">&quot;spec&quot;</span>:&#123;<br>    <span class="hljs-attr">&quot;网络制式&quot;</span>:<span class="hljs-string">&quot;移动4G&quot;</span>,<br>    <span class="hljs-attr">&quot;屏幕尺寸&quot;</span>:<span class="hljs-string">&quot;4.5&quot;</span><br>  &#125;<br>&#125;<br><br># 查询文档数据<br>GET goods/_search<br></code></pre></td></tr></table></figure><p>添加坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加 <code>application.yml</code> 配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># datasource</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql:///es?serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><br><span class="hljs-comment"># mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*Mapper.xml</span> <span class="hljs-comment"># mapper映射文件路径</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.atguigu.domain</span><br></code></pre></td></tr></table></figure><p>添加 javabean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> stock;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> saleNum;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> String categoryName;<br>    <span class="hljs-keyword">private</span> String brandName;<br>    <span class="hljs-keyword">private</span> Map spec;<br><br>   <span class="hljs-comment">// @JSONField(serialize = false)//在转换JSON时，忽略该字段</span><br>    <span class="hljs-keyword">private</span> String specStr;<span class="hljs-comment">//接收数据库的信息 &quot;&#123;&#125;&quot;</span><br>    <br>    <span class="hljs-comment">// 生成set  get  和 toString方法</span><br>    <br>&#125;    <br></code></pre></td></tr></table></figure><p>创建 dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsMapper</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Goods&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​    在 <code>resource</code> 文件夹下面 创建 <code>mapper/GoodMapper.xml</code> 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mapper.GoodsMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;goods&quot;</span>&gt;</span><br>        select<br>              `id`         ,<br>              `title`       ,<br>              `price`       ,<br>              `stock`       ,<br>              `saleNum`     ,<br>              `createTime`  ,<br>              `categoryName`,<br>              `brandName`   ,<br>              `spec`  as specStr<br>         from goods<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchTest2</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GoodsMapper goodsMapper;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量导入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.查询所有数据，mysql</span><br>        List&lt;Goods&gt; goodsList = goodsMapper.findAll();<br><br>        <span class="hljs-comment">//System.out.println(goodsList.size());</span><br>        <span class="hljs-comment">//2.bulk导入</span><br>        BulkRequest bulkRequest = <span class="hljs-keyword">new</span> BulkRequest();<br><br>        <span class="hljs-comment">//2.1 循环goodsList，创建IndexRequest添加数据</span><br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            <span class="hljs-comment">//2.2 设置spec规格信息 Map的数据   specStr:&#123;&#125;</span><br>            <span class="hljs-comment">//goods.setSpec(JSON.parseObject(goods.getSpecStr(),Map.class));</span><br><br>            String specStr = goods.getSpecStr();<br>            <span class="hljs-comment">//将json格式字符串转为Map集合</span><br>            Map map = JSON.parseObject(specStr, Map.class);<br>            <span class="hljs-comment">//设置spec map</span><br>            goods.setSpec(map);<br>            <span class="hljs-comment">//将goods对象转换为json字符串</span><br>            String data = JSON.toJSONString(goods);<span class="hljs-comment">//map --&gt; &#123;&#125;</span><br>            IndexRequest indexRequest = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br>            indexRequest.id(goods.getId()+<span class="hljs-string">&quot;&quot;</span>).source(data, XContentType.JSON);<br>            bulkRequest.add(indexRequest);<br>        &#125;<br>        BulkResponse response = client.bulk(bulkRequest, RequestOptions.DEFAULT);<br>        System.out.println(response.status());<br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>查询数据是否导入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> goods/_search<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s006.png"></p><h3 id="查询所有matchAll查询"><a href="#查询所有matchAll查询" class="headerlink" title="查询所有matchAll查询"></a><a href="#%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89matchall%E6%9F%A5%E8%AF%A2">查询所有matchAll查询</a></h3><p>matchAll查询：查询所有文档</p><p><code>kibana</code> 演示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><br># 查询<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     *  1. matchAll</span><br><span class="hljs-comment">     *  2. 将查询结果封装为Goods对象，装载到List中</span><br><span class="hljs-comment">     *  3. 分页。默认显示10条</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//2. 构建查询请求对象，指定查询的索引名称</span><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br>        <span class="hljs-comment">//4. 创建查询条件构建器SearchSourceBuilder</span><br>        SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        <span class="hljs-comment">//6. 查询条件</span><br>        QueryBuilder query = QueryBuilders.matchAllQuery();<span class="hljs-comment">//查询所有文档</span><br>        <span class="hljs-comment">//5. 指定查询条件</span><br>        sourceBuilder.query(query);<br><br>        <span class="hljs-comment">//3. 添加查询条件构建器 SearchSourceBuilder</span><br>        searchRequest.source(sourceBuilder);<br><br>        <span class="hljs-comment">// 8 . 添加分页信息</span><br>        sourceBuilder.from(<span class="hljs-number">0</span>);<br>        sourceBuilder.size(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">//1. 查询,获取查询结果</span><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br>        <span class="hljs-comment">//7. 获取命中对象 SearchHits</span><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//7.1 获取总记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//7.2 获取Hits数据  数组</span><br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            <span class="hljs-comment">//获取json字符串格式的数据</span><br>            String sourceAsString = hit.getSourceAsString();<br>            <span class="hljs-comment">//转为java对象</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br>            goodsList.add(goods);<br><br>        &#125;<br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="term-查询"><a href="#term-查询" class="headerlink" title="term 查询"></a><a href="#term-%E6%9F%A5%E8%AF%A2">term 查询</a></h3><p>term查询：不会对查询条件进行分词。</p><p><code>kibana</code> 演示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">GET goods<br><br># term 查询<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;categoryName&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;手机&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchTest2</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * termQuery:词条查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTermQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br>        SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        QueryBuilder query = QueryBuilders.termQuery(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;华为&quot;</span>);<span class="hljs-comment">//term词条查询</span><br>        sourceBulider.query(query);<br><br>        searchRequest.source(sourceBulider);<br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br> &#125;    <br></code></pre></td></tr></table></figure><h3 id="matchQuery-词条分词查询"><a href="#matchQuery-词条分词查询" class="headerlink" title="matchQuery:词条分词查询"></a>matchQuery:词条分词查询</h3><p>match查询：<br>• 会对查询条件进行分词。<br>• 然后将分词后的查询条件和词条进行等值匹配<br>• 默认取并集（OR）</p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s007.png"></p><p><code>kibana</code> 演示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"># match 查询 <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;手机&quot;</span><br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>      <br>    &#125;<br>  &#125;<br>&#125;<br># match 查询  <span class="hljs-string">&quot;operator&quot;</span>: <span class="hljs-string">&quot;or&quot;</span><br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;华为手机&quot;</span>,<br>        <span class="hljs-attr">&quot;operator&quot;</span>: <span class="hljs-string">&quot;and&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * matchQuery:词条分词查询，分词之后的等值匹配</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br><br>        SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        MatchQueryBuilder query = QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;华为手机&quot;</span>);<br>        query.operator(Operator.AND);<span class="hljs-comment">//求并集</span><br>        sourceBulider.query(query);<br><br>        searchRequest.source(sourceBulider);<br><br><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="模糊查询-脚本"><a href="#模糊查询-脚本" class="headerlink" title="模糊查询-脚本"></a>模糊查询-脚本</h3><p>wildcard查询：会对查询条件进行分词。还可以使用通配符 ?（任意单个字符） 和 * （0个或多个字符）<br>prefix查询：前缀查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"># wildcard 查询。查询条件分词，模糊查询 华为，华，*华*<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;wildcard&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;华*&quot;</span> <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br># 前缀查询<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;prefix&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;brandName&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;三&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模糊查询:WildcardQuery</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testWildcardQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br><br>        SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        WildcardQueryBuilder query = QueryBuilders.wildcardQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;华*&quot;</span>);<br><br>        sourceBulider.query(query);<br><br>        searchRequest.source(sourceBulider);<br><br><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模糊查询:perfixQuery</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrefixQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br><br>        SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        PrefixQueryBuilder query = QueryBuilders.prefixQuery(<span class="hljs-string">&quot;brandName&quot;</span>, <span class="hljs-string">&quot;三&quot;</span>);<br><br>        sourceBulider.query(query);<br><br>        searchRequest.source(sourceBulider);<br><br><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="范围查询-脚本"><a href="#范围查询-脚本" class="headerlink" title="范围查询-脚本"></a>范围查询-脚本</h3><p>range 范围查询：查找指定字段在指定范围内包含值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"># 范围查询 gte 大于等于 lte小于等于<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">2000</span>,<br>        <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">3000</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br># 范围查询 gte 大于等于 lte小于等于<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">2000</span>,<br>        <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">3000</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1. 范围查询：rangeQuery</span><br><span class="hljs-comment">     * 2. 排序</span><br><span class="hljs-comment">     */</span><br>    @Test<br>    public void testRangeQuery() throws IOException &#123;<br>        SearchRequest searchRequest = new SearchRequest(<span class="hljs-attr">&quot;goods&quot;</span>);<br><br>        SearchSourceBuilder sourceBulider = new SearchSourceBuilder();<br><br>        <span class="hljs-comment">//范围查询</span><br>        RangeQueryBuilder query = QueryBuilders.rangeQuery(<span class="hljs-attr">&quot;price&quot;</span>);<br><br>        <span class="hljs-comment">//指定下限 gte大于等于</span><br>        query.gte(2000);<br>        <span class="hljs-comment">//指定上限 小于等于</span><br>        query.lte(3000);<br><br>        sourceBulider.query(query);<br><br>        <span class="hljs-comment">//排序</span><br>        sourceBulider.sort(<span class="hljs-attr">&quot;price&quot;</span>, SortOrder.DESC);<br>        searchRequest.source(sourceBulider);<br><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        long value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-attr">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = new ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        for (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br>        for (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="queryString查询-脚本"><a href="#queryString查询-脚本" class="headerlink" title="queryString查询-脚本"></a>queryString查询-脚本</h3><p>queryString：<br>• 会对查询条件进行分词。<br>• 然后将分词后的查询条件和词条进行等值匹配<br>• 默认取并集（OR）<br>• 可以指定多个查询字段</p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s008.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"># queryString<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;query_string&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;categoryName&quot;</span>,<span class="hljs-string">&quot;brandName&quot;</span>],<br>      <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * queryString</span><br><span class="hljs-comment">     */</span><br>    @Test<br>    public void testQueryStringQuery() throws IOException &#123;<br><br><br>        SearchRequest searchRequest = new SearchRequest(<span class="hljs-attr">&quot;goods&quot;</span>);<br><br>        SearchSourceBuilder sourceBulider = new SearchSourceBuilder();<br><br>        <span class="hljs-comment">//queryString</span><br>        QueryStringQueryBuilder query = QueryBuilders.queryStringQuery(<span class="hljs-attr">&quot;华为手机&quot;</span>)<br>                .field(<span class="hljs-attr">&quot;title&quot;</span>)<br>                .field(<span class="hljs-attr">&quot;categoryName&quot;</span>)<br>                .field(<span class="hljs-attr">&quot;brandName&quot;</span>)<br>                .defaultOperator(Operator.AND);<br>        sourceBulider.query(query);<br>        searchRequest.source(sourceBulider);<br><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        long value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-attr">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = new ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        for (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br><br>        for (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="布尔查询"><a href="#布尔查询" class="headerlink" title="布尔查询"></a><a href="#%E5%B8%83%E5%B0%94%E6%9F%A5%E8%AF%A2">布尔查询</a></h3><p>boolQuery：对多个查询条件连接。连接方式：<br>• must（and）：条件必须成立<br>• must_not（not）：条件必须不成立<br>• should（or）：条件可以成立<br>• filter：条件必须成立，性能比must高。不会计算得分</p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s009.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;华为手机&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">500</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s010.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs json"># 计算得分<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;brandName&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br># 不计算得分<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;filter&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;brandName&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;  <br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br><br># 计算得分 品牌是三星，标题还得电视<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;brandName&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;三星&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-attr">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;电视&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 布尔查询：boolQuery</span><br><span class="hljs-comment">     * 1. 查询品牌名称为:华为</span><br><span class="hljs-comment">     * 2. 查询标题包含：手机</span><br><span class="hljs-comment">     * 3. 查询价格在：2000-3000</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBoolQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br>        SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br>        <span class="hljs-comment">//1.构建boolQuery</span><br>        BoolQueryBuilder query = QueryBuilders.boolQuery();<br><br>        <span class="hljs-comment">//2.构建各个查询条件</span><br>        <span class="hljs-comment">//2.1 查询品牌名称为:华为</span><br>        QueryBuilder termQuery = QueryBuilders.termQuery(<span class="hljs-string">&quot;brandName&quot;</span>,<span class="hljs-string">&quot;华为&quot;</span>);<br>        query.must(termQuery);<br><br>        <span class="hljs-comment">//2.2. 查询标题包含：手机</span><br>        QueryBuilder matchQuery = QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;手机&quot;</span>);<br>        query.filter(matchQuery);<br><br>        <span class="hljs-comment">//2.3 查询价格在：2000-3000</span><br>        QueryBuilder rangeQuery = QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>);<br>        ((RangeQueryBuilder) rangeQuery).gte(<span class="hljs-number">2000</span>);<br>        ((RangeQueryBuilder) rangeQuery).lte(<span class="hljs-number">3000</span>);<br>        query.filter(rangeQuery);<br><br>        <span class="hljs-comment">//3.使用boolQuery连接</span><br>        sourceBulider.query(query);<br>        searchRequest.source(sourceBulider);<br><br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a><a href="#%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2">聚合查询</a></h3><p>• 指标聚合：相当于MySQL的聚合函数。max、min、avg、sum等<br>• 桶聚合：相当于MySQL的 group by 操作。不要对text类型的数据进行分组，会失败。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"># 查询最贵的华为手机，max_price命名随便取，取一个有意义的名字<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;华为手机&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;max_price&quot;</span>:&#123;<br>      <span class="hljs-attr">&quot;max&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br># 桶聚合 分组<br>GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;电视&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;goods_brands&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;brandName&quot;</span>,<br>        <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">100</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 聚合查询：桶聚合，分组查询</span><br><span class="hljs-comment">     * 1. 查询title包含手机的数据</span><br><span class="hljs-comment">     * 2. 查询品牌列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAggQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br><br>        SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        <span class="hljs-comment">// 1. 查询title包含手机的数据</span><br>        MatchQueryBuilder query = QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>);<br><br>        sourceBulider.query(query);<br><br>        <span class="hljs-comment">// 2. 查询品牌列表</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        参数：</span><br><span class="hljs-comment">            1. 自定义的名称，将来用于获取数据</span><br><span class="hljs-comment">            2. 分组的字段</span><br><span class="hljs-comment">         */</span><br>        AggregationBuilder agg = AggregationBuilders.terms(<span class="hljs-string">&quot;goods_brands&quot;</span>).field(<span class="hljs-string">&quot;brandName&quot;</span>).size(<span class="hljs-number">100</span>);<br>        sourceBulider.aggregation(agg);<br><br>        searchRequest.source(sourceBulider);<br>        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br>        SearchHits searchHits = searchResponse.getHits();<br>        <span class="hljs-comment">//获取记录数</span><br>        <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>        System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>        List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        SearchHit[] hits = searchHits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br><br>            <span class="hljs-comment">//转为java</span><br>            Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>            goodsList.add(goods);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>            System.out.println(goods);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取聚合结果</span><br>        Aggregations aggregations = searchResponse.getAggregations();<br><br>        Map&lt;String, Aggregation&gt; aggregationMap = aggregations.asMap();<br><br>        <span class="hljs-comment">//System.out.println(aggregationMap);</span><br>        Terms goods_brands = (Terms) aggregationMap.get(<span class="hljs-string">&quot;goods_brands&quot;</span>);<br><br>        List&lt;? extends Terms.Bucket&gt; buckets = goods_brands.getBuckets();<br><br>        List brands = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>            Object key = bucket.getKey();<br>            brands.add(key);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Object brand : brands) &#123;<br>            System.out.println(brand);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a><a href="#%E9%AB%98%E4%BA%AE%E6%9F%A5%E8%AF%A2">高亮查询</a></h3><p>高亮三要素：<br>• 高亮字段<br>• 前缀<br>• 后缀</p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s011.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">GET goods/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;电视&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;pre_tags&quot;</span>: <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>,<br>        <span class="hljs-attr">&quot;post_tags&quot;</span>: <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 高亮查询：</span><br><span class="hljs-comment">    *  1. 设置高亮</span><br><span class="hljs-comment">    *      * 高亮字段</span><br><span class="hljs-comment">    *      * 前缀</span><br><span class="hljs-comment">    *      * 后缀</span><br><span class="hljs-comment">    *  2. 将高亮了的字段数据，替换原有数据</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHighLightQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;goods&quot;</span>);<br><br>       SearchSourceBuilder sourceBulider = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>       <span class="hljs-comment">// 1. 查询title包含手机的数据</span><br>       MatchQueryBuilder query = QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>);<br><br>       sourceBulider.query(query);<br><br>       <span class="hljs-comment">//设置高亮</span><br>       HighlightBuilder highlighter = <span class="hljs-keyword">new</span> HighlightBuilder();<br>       <span class="hljs-comment">//设置三要素</span><br>       highlighter.field(<span class="hljs-string">&quot;title&quot;</span>);<br>       highlighter.preTags(<span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);<br>       highlighter.postTags(<span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>);<br>       sourceBulider.highlighter(highlighter);<br>       <span class="hljs-comment">// 2. 查询品牌列表</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       参数：</span><br><span class="hljs-comment">           1. 自定义的名称，将来用于获取数据</span><br><span class="hljs-comment">           2. 分组的字段</span><br><span class="hljs-comment">        */</span><br>       AggregationBuilder agg = AggregationBuilders.terms(<span class="hljs-string">&quot;goods_brands&quot;</span>).field(<span class="hljs-string">&quot;brandName&quot;</span>).size(<span class="hljs-number">100</span>);<br>       sourceBulider.aggregation(agg);<br><br>       searchRequest.source(sourceBulider);<br>       SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br><br>       SearchHits searchHits = searchResponse.getHits();<br>       <span class="hljs-comment">//获取记录数</span><br>       <span class="hljs-keyword">long</span> value = searchHits.getTotalHits().value;<br>       System.out.println(<span class="hljs-string">&quot;总记录数：&quot;</span>+value);<br><br>       List&lt;Goods&gt; goodsList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       SearchHit[] hits = searchHits.getHits();<br>       <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>           String sourceAsString = hit.getSourceAsString();<br><br>           <span class="hljs-comment">//转为java</span><br>           Goods goods = JSON.parseObject(sourceAsString, Goods.class);<br><br>           <span class="hljs-comment">// 获取高亮结果，替换goods中的title</span><br>           Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>           HighlightField HighlightField = highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>);<br>           Text[] fragments = HighlightField.fragments();<br>           <span class="hljs-comment">//替换</span><br>           goods.setTitle(fragments[<span class="hljs-number">0</span>].toString());<br><br><br>           goodsList.add(goods);<br>       &#125;<br><br>       <span class="hljs-keyword">for</span> (Goods goods : goodsList) &#123;<br>           System.out.println(goods);<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a><a href="#%E9%87%8D%E5%BB%BA%E7%B4%A2%E5%BC%95">重建索引</a></h3><p>随着业务需求的变更，索引的结构可能发生改变。<br>ElasticSearch的索引一旦创建，只允许添加字段，不允许改变字段。因为改变字段，需要重建倒排索引，影响内部缓<br>存结构，性能太低。<br>那么此时，就需要重建一个新的索引，并将原有索引的数据导入到新索引中。</p><p>原索引库 ：student_index_v1</p><p>新索引库 ：student_index_v2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs json"># 新建student_index_v1索引，索引名称必须全部小写<br>PUT student_index_v1 <br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;birthday&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br># 查询索引<br>GET student_index_v1<br># 添加数据<br>PUT student_index_v1/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-attr">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;2020-11-11&quot;</span><br>&#125;<br># 查询数据<br>GET student_index_v1/_search<br># 随着业务的变更，换种数据类型进行添加数据，程序会直接报错<br>PUT student_index_v1/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-attr">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;2020年11月11号&quot;</span><br>&#125;<br># 业务变更，需要改变birthday数据类型为text<br># <span class="hljs-number">1</span>：创建新的索引 student_index_v2<br># <span class="hljs-number">2</span>：将student_index_v1 数据拷贝到 student_index_v2<br><br># 创建新的索引<br>PUT student_index_v2 <br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;birthday&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>DELETE student_index_v2<br># <span class="hljs-number">2</span>：将student_index_v1 数据拷贝到 student_index_v2<br>POST _reindex<br>&#123;<br>  <span class="hljs-attr">&quot;source&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;student_index_v1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;dest&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;student_index_v2&quot;</span><br>  &#125;<br>&#125;<br># 查询新索引库数据<br>GET student_index_v2/_search<br># 在新的索引库里面添加数据<br>PUT student_index_v2/_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-attr">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;2020年11月13号&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-SpringData-Elasticsearch客户端"><a href="#2-SpringData-Elasticsearch客户端" class="headerlink" title="2 SpringData Elasticsearch客户端"></a><a href="#2-springdata-elasticsearch%E5%AE%A2%E6%88%B7%E7%AB%AF">2 SpringData Elasticsearch客户端</a></h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>SpringData的作用:简化了数据库的增删改查操作</li><li>SpringDataElasticsearch入门[掌握]</li><li>SpringDataElasticsearch查询命名规则[掌握]</li></ul><h4 id="SpringDataJpa介绍-集成"><a href="#SpringDataJpa介绍-集成" class="headerlink" title="SpringDataJpa介绍[集成]"></a>SpringDataJpa介绍[集成]</h4><p>JPA是一个规范，真正操作数据库的是Hibernate（实现数据库增删改查框架[ORM框架],操作数据库采用的方式是面向对象[不写SQL语句]），而springdatajpa是对jpa的封装，将CRUD的方法封装到指定的方法中，操作的时候，只需要调用方法即可。</p><p>Spring Data Jpa的实现过程：</p><ol><li>定义实体，实体类添加Jpa的注解  @Entity  @Talbe @Cloumn @Id</li><li>定义接口，接口要继承JpaRepository的接口</li><li>配置spring容器，applicationContext.xml/SpringApplication.run(T.class,args)</li></ol><h4 id="Spring-Data-ElasticSearch简介"><a href="#Spring-Data-ElasticSearch简介" class="headerlink" title="Spring Data ElasticSearch简介"></a>Spring Data ElasticSearch简介</h4><p>(1)SpringData介绍</p><p>Spring Data是一个用于简化数据库、非关系型数据库、索引库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持map-reduce框架和云计算数据服务。 Spring Data可以极大的简化JPA（Elasticsearch…）的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD外，还包括如分页、排序等一些常用的功能。</p><p>Spring Data的官网：<a href="http://projects.spring.io/spring-data/">http://projects.spring.io/spring-data/</a></p><p>Spring Data常用的功能模块如下：</p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s012.png"></p><p><img src="http://www.slx.blue/2022/01/11/ElasticSearch/s013.png"></p><p>(2)SpringData Elasticsearch介绍</p><p>Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储索引库数据访问层。</p><p>官方网站：<a href="http://projects.spring.io/spring-data-elasticsearch/">http://projects.spring.io/spring-data-elasticsearch/</a></p><h4 id="SpringData-Elasticsearch入门"><a href="#SpringData-Elasticsearch入门" class="headerlink" title="SpringData Elasticsearch入门"></a>SpringData Elasticsearch入门</h4><h5 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h5><p>(1)搭建工程</p><p>创建项目 <code>elasticsearch-springdata-es</code></p><p>(2)pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-springdata-es<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- java编译插件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="增加索引数据"><a href="#增加索引数据" class="headerlink" title="增加索引数据"></a>增加索引数据</h5><p>(1)编写实体类</p><p>创建<code>com.atguigu.domain.Item</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Document(indexName = &quot;item&quot;,shards = 1,replicas = 1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String category;<span class="hljs-comment">// 分类</span><br><br>    <span class="hljs-meta">@Field(type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String brand; <span class="hljs-comment">// 品牌</span><br><br>    <span class="hljs-meta">@Field(type = FieldType.Double)</span><br>    <span class="hljs-keyword">private</span> Double price; <span class="hljs-comment">// 价格</span><br><br>    <span class="hljs-meta">@Field(index = false, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String images; <span class="hljs-comment">// 图片地址</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>映射</p></blockquote><p>Spring Data通过注解来声明字段的映射属性，有下面的三个注解：</p><p>@Document 作用在类，标记实体类为文档对象，一般有四个属性<br>indexName：对应索引库名称<br>shards：分片数量，默认5<br>replicas：副本数量，默认1<br>@Id 作用在成员变量，标记一个字段作为id主键<br>@Field 作用在成员变量，标记为文档的字段，并指定字段映射属性：<br>type：字段类型，取值是枚举：FieldType<br>index：是否索引，布尔类型，默认是true<br>store：是否存储，布尔类型，默认是false<br>analyzer：分词器名称：ik_max_word</p><p>配置 <code>application.yml</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">spring:<br>  data:<br>    elasticsearch:<br>      cluster-name: elasticsearch   #自己ES中配置文件的cluster-name<br>      cluster-nodes: 127.0.0.1:9300<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringBootES</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ItemRepository itemRepository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 创建索引，会根据Item类的@Document注解信息来创建</span><br>        elasticsearchTemplate.createIndex(Item.class);<br>        <span class="hljs-comment">// 配置映射，会根据Item类中的id、Field等字段来自动完成映射</span><br>        elasticsearchTemplate.putMapping(Item.class);<br>    &#125;<br></code></pre></td></tr></table></figure><p>使用 <code>kibana</code> 查询</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> item<br></code></pre></td></tr></table></figure><p>增删改操作</p><p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p><p>编写 ItemRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ItemRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">Item</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringBootES</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ItemRepository itemRepository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> </span>&#123;<br>        Item item = <span class="hljs-keyword">new</span> Item(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;小米手机7&quot;</span>, <span class="hljs-string">&quot; 手机&quot;</span>,<br>                <span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">3499.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>);<br>        itemRepository.save(item);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> item/_search<br></code></pre></td></tr></table></figure><p>修改(id存在就是修改，否则就是插入)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>    Item item = <span class="hljs-keyword">new</span> Item(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;小米手机7777&quot;</span>, <span class="hljs-string">&quot; 手机&quot;</span>,<br>                         <span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">9499.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>);<br>    itemRepository.save(item);<br>&#125;<br>GET item/_search<br></code></pre></td></tr></table></figure><p>批量新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">indexList</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Item&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;坚果手机R1&quot;</span>, <span class="hljs-string">&quot; 手机&quot;</span>, <span class="hljs-string">&quot;锤子&quot;</span>, <span class="hljs-number">3699.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/123.jpg&quot;</span>));<br>        list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;华为META10&quot;</span>, <span class="hljs-string">&quot; 手机&quot;</span>, <span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">4499.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/3.jpg&quot;</span>));<br>        <span class="hljs-comment">// 接收对象集合，实现批量新增</span><br>        itemRepository.saveAll(list);<br>    &#125;<br>GET item/_search<br></code></pre></td></tr></table></figure><p>删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>    itemRepository.deleteById(<span class="hljs-number">1L</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据id查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery</span><span class="hljs-params">()</span></span>&#123;<br>        Optional&lt;Item&gt; optional = itemRepository.findById(<span class="hljs-number">2L</span>);<br>        System.out.println(optional.get());<br>    &#125;<br></code></pre></td></tr></table></figure><p>查询全部，并按照价格降序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFind</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-comment">// 查询全部，并按照价格降序排序</span><br>      Iterable&lt;Item&gt; items = <span class="hljs-keyword">this</span>.itemRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="hljs-string">&quot;price&quot;</span>));<br>      items.forEach(item-&gt; System.out.println(item));<br>  &#125;<br></code></pre></td></tr></table></figure><p>自定义方法</p><p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。<br>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。<br>当然，方法名称要符合一定的约定：</p><table><thead><tr><th>Keyword</th><th align="left">Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td align="left"><code>findByNameAndPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Or</code></td><td align="left"><code>findByNameOrPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Is</code></td><td align="left"><code>findByName</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Not</code></td><td align="left"><code>findByNameNot</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Between</code></td><td align="left"><code>findByPriceBetween</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>LessThanEqual</code></td><td align="left"><code>findByPriceLessThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td align="left"><code>findByPriceGreaterThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Before</code></td><td align="left"><code>findByPriceBefore</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>After</code></td><td align="left"><code>findByPriceAfter</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Like</code></td><td align="left"><code>findByNameLike</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>StartingWith</code></td><td align="left"><code>findByNameStartingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>EndingWith</code></td><td align="left"><code>findByNameEndingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Contains/Containing</code></td><td align="left"><code>findByNameContaining</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>In</code></td><td align="left"><code>findByNameIn(Collectionnames)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>NotIn</code></td><td align="left"><code>findByNameNotIn(Collectionnames)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Near</code></td><td align="left"><code>findByStoreNear</code></td><td><code>Not Supported Yet !</code></td></tr><tr><td><code>True</code></td><td align="left"><code>findByAvailableTrue</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>False</code></td><td align="left"><code>findByAvailableFalse</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : false&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>OrderBy</code></td><td align="left"><code>findByAvailableTrueOrderByNameDesc</code></td><td><code>&#123;&quot;sort&quot; : [&#123; &quot;name&quot; : &#123;&quot;order&quot; : &quot;desc&quot;&#125; &#125;],&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr></tbody></table><p>例如，我们来按照价格区间查询，定义这样的一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ItemRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">Item</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据价格区间查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Item&gt; <span class="hljs-title">findByPriceBetween</span><span class="hljs-params">(<span class="hljs-keyword">double</span> price1, <span class="hljs-keyword">double</span> price2)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后添加一些测试数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">indexList</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Item&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;小米手机7&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">3299.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;坚果手机R1&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-string">&quot;锤子&quot;</span>, <span class="hljs-number">3699.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;华为META10&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">4499.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">4L</span>, <span class="hljs-string">&quot;小米Mix2S&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">4299.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-number">5L</span>, <span class="hljs-string">&quot;荣耀V10&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>, <span class="hljs-string">&quot;华为&quot;</span>, <span class="hljs-number">2799.00</span>, <span class="hljs-string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));<br>    <span class="hljs-comment">// 接收对象集合，实现批量新增</span><br>    itemRepository.saveAll(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>不需要写实现类，然后我们直接去运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryByPriceBetween</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Item&gt; list = <span class="hljs-keyword">this</span>.itemRepository.findByPriceBetween(<span class="hljs-number">2000.00</span>, <span class="hljs-number">3500.00</span>);<br>        <span class="hljs-keyword">for</span> (Item item : list) &#123;<br>            System.out.println(<span class="hljs-string">&quot;item = &quot;</span> + item);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>虽然基本查询和自定义方法已经很强大了，但是如果是复杂查询（模糊、通配符、词条查询等）就显得力不从心了。此时，我们只能使用原生查询。</p>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2022/01/08/SpringSecurity/"/>
      <url>/2022/01/08/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security简介"><a href="#Spring-Security简介" class="headerlink" title="Spring Security简介"></a><strong>Spring Security简介</strong></h2><p>Spring Security是 Spring提供的安全认证服务的框架。 使用Spring Security可以帮助我们来简化认证和授权的过程。官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p><p>中文官网：<a href="https://www.w3cschool.cn/springsecurity/">https://www.w3cschool.cn/springsecurity/</a></p><p>​    对应的maven坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用的权限框架除了Spring Security，还有Apache的shiro框架。</p><h3 id="【小结】"><a href="#【小结】" class="headerlink" title="【小结】"></a><a href="#%E5%B0%8F%E7%BB%93-">【小结】</a></h3><ol><li>SpringSecurity是Spring家族的一个安全框架, 简化我们开发里面的认证和授权过程</li><li>SpringSecurity内部封装了Filter（只需要在web.xml容器中配置一个过滤器–代理过滤器，真实的过滤器在spring的容器中配置）</li><li>常见的安全框架</li></ol><ul><li>Spring的 <code>SpringSecurity</code></li><li>Apache的Shiro <code>http://shiro.apache.org/</code></li></ul><h2 id="Spring-Security入门案例"><a href="#Spring-Security入门案例" class="headerlink" title="Spring Security入门案例"></a><strong>Spring Security入门案例</strong></h2><p>【需求】</p><p> 使用Spring Security进行控制: 网站(一些页面)需要登录才能访问（认证）</p><ol><li>创建Maven工程 <code>spring_security_demo</code>,导入坐标</li><li>配置 <code>web.xml</code> (前端控制器, <code>SpringSecurity</code>相关的过滤器)</li><li>创建 <code>spring-security.xml</code>（核心）</li></ol><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ol><li><p>创建maven工程，打包方式为war。</p><p>pom.xml</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 指定端口 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 请求路径 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内置提供 <code>index.html</code> 页面，内容为“登录成功”!!</p><ol start="2"><li><p>配置web.xml</p><p>1：DelegatingFilterProxy用于整合第三方框架（代理过滤器，非真正的过滤器，真正的过滤器需要在spring的配置文件）==</p><p>2：springmvc的核心控制器</p><p>在<code>web.xml</code> 中主要配置 <code>SpringMVC</code> 的 <code>DispatcherServlet</code> 和用于整合第三方框架的<code>DelegatingFilterProxy</code>（代理过滤器，真正的过滤器在spring的配置文件），用于整合<code>Spring Security</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">         1：DelegatingFilterProxy用于整合第三方框架（代理过滤器，非真正的过滤器，真正的过滤器需要在spring的配置文件）</span><br><span class="hljs-comment">          整合Spring Security时过滤器的名称必须为springSecurityFilterChain，</span><br><span class="hljs-comment">          否则会抛出NoSuchBeanDefinitionException异常</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2：springmvc的核心控制器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-security.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置spring-security.xml</p><p>1：定义哪些链接可以放行</p><p>2：定义哪些链接不可以放行，即需要有角色、权限才可以放行</p><p>3：认证管理，定义登录账号名和密码，并授予访问的角色、权限</p><p>在 <code>spring-security.xml</code> 中主要配置 <code>Spring Security</code> 的拦截规则和认证管理器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:security</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/security&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://code.alibabatech.com/schema/dubbo</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                          http://www.springframework.org/schema/security</span></span><br><span class="hljs-string"><span class="hljs-tag">                          http://www.springframework.org/schema/security/spring-security.xsd&quot;</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       ① 配置哪些链接可以放行(没有认证通过也可以访问的资源)</span><br><span class="hljs-comment">       security=&quot;none&quot;：没有权限</span><br><span class="hljs-comment">       pattern=&quot;/login.html&quot;：没有任何权限，可以访问login.html</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;security:http security=&quot;none&quot; pattern=&quot;/login.html&quot;&gt;&lt;/security:http&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    ② 定义哪些链接不可以放行(必须通过认证才能访问的资源)，及需要有角色，有权限才可以放行访问资源</span><br><span class="hljs-comment">    &lt;security:http auto-config=&quot;true&quot; use-expressions=&quot;true&quot;&gt;</span><br><span class="hljs-comment">          auto-config=&quot;true&quot;:开启自动配置 由springsecurity提供登录页面，提供登录的url地址，退出的url地址</span><br><span class="hljs-comment">          use-expressions=&quot;true&quot;：使用表达式的方式控制权限</span><br><span class="hljs-comment">             security:intercept-url：定义哪些链接不可以放行，需要当前角色和权限才能放行</span><br><span class="hljs-comment">                pattern=&quot;/**&quot;：要求系统中的所有资源，都必须通过角色和权限才能访问</span><br><span class="hljs-comment">                access：指定角色和权限</span><br><span class="hljs-comment">                   如果使用表达式use-expressions=&quot;true&quot;</span><br><span class="hljs-comment">                       access=&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)：表示具有ROLE_ADMIN的角色才能访问系统的资源</span><br><span class="hljs-comment">                   如果不使用表达式use-expressions=&quot;false&quot;</span><br><span class="hljs-comment">                       access=&quot;ROLE_ADMIN：表示具有ROLE_ADMIN的角色才能访问系统的资源</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">auto-config</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">use-expressions</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/**&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security:http</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      ③ 认证管理：定义登录账号和密码，并授予当前用户访问的角色或权限</span><br><span class="hljs-comment">        （1）：将用户名和密码：当前用户具有的角色，写死到配置文件中（现在:入门）</span><br><span class="hljs-comment">                security:user name=&quot;admin&quot; :登录名</span><br><span class="hljs-comment">                authorities=&quot;ROLE_ADMIN&quot;   ：角色(ROLE_ADMIN),权限</span><br><span class="hljs-comment">                password=&quot;admin&quot;          ：密码</span><br><span class="hljs-comment">         （2）：用户名和密码，当前用户具有的角色，从数据库中查询（后续）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-manager</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-provider</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">security:user-service</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">security:user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">authorities</span>=<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:user</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">security:user-service</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-provider</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-manager</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求 url 地址：<code>http://localhost:85/</code></p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s002.png" alt="s002"></p><p>输入错误用户名和密码    </p><p>​                                                    <img src="http://www.slx.blue/2022/01/08/SpringSecurity/s003.png" alt="s003"></p></li></ol><p>输入正确用户名和密码（admin/admin），因为 spring security 提供了一套安全机制，登录的时候进行了拦截，参考系统源码<code>PasswordEncoderFactories</code></p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s004.png" alt="s004"></p><p>需要修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">authorities</span>=<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;&#123;noop&#125;admin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输入正确用户名和密码（admin/admin），缺少资源</p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s005.png" alt="s005"></p><p>此时说明没有登录成功的页面。</p><p>{noop}：表示当前使用的密码为明文。表示当前密码不需要加密 <code>PasswordEncoderFactories</code></p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s006.png" alt="s006"></p><p>在 <code>webapp</code> 文件夹下面，新建 <code>index.html</code> ，可以正常访问 <code>index.html</code></p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s007.png" alt="s007"></p><h3 id="【小结】-1"><a href="#【小结】-1" class="headerlink" title="【小结】"></a><a href="#%E5%B0%8F%E7%BB%93-">【小结】</a></h3><p>使用步骤</p><ol><li>创建Maven工程, 添加坐标</li><li>配置web.xml(前端控制器,==springSecurity权限相关的过滤器==)</li><li>创建spring-security.xml(自动配置,使用表达式的方式完成授权，只要具有ROLE_ADMIN的角色权限才能访问系统中的所有功能； 授权管理器，指定用户名admin，密码admin，具有ROLE_ADMIN的角色权限)</li></ol><p>注意实现</p><p> 1.在web.xml里面配置的权限相关的过滤器名字==不能改==（springSecurityFilterChain）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 2.入门案例里面没有指定密码加密方式的. 配置密码的时候的加=={noop}==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:user-service</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">security:user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;&#123;noop&#125;admin&quot;</span> <span class="hljs-attr">authorities</span>=<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security:user-service</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spring-Security进阶"><a href="#Spring-Security进阶" class="headerlink" title="Spring Security进阶"></a><strong>Spring Security进阶</strong></h2><p>前面我们已经完成了Spring Security的入门案例，通过入门案例我们可以看到，Spring Security将我们项目中的所有资源都保护了起来，要访问这些资源必须要完成认证而且需要具有ROLE_ADMIN角色。</p><p>但是入门案例中的使用方法离我们真实生产环境还差很远，还存在如下一些问题：</p><p>1、项目中我们将所有的资源（所有请求URL）都保护起来，实际环境下往往有一些资源不需要认证也可以访问，也就是可以匿名访问。</p><p>2、登录页面是由框架生成的，而我们的项目往往会使用自己的登录页面。</p><p>3、直接将用户名和密码配置在了配置文件中，而真实生产环境下的用户名和密码往往保存在数据库中。</p><p>4、在配置文件中配置的密码使用明文，这非常不安全，而真实生产环境下密码需要进行加密。</p><p>需要对这些问题进行改进。</p><ol><li>配置可匿名访问的资源(不需要登录,权限 角色 就可以访问的资源)</li><li>使用指定的登录页面（login.html)</li><li>从数据库查询用户信息</li><li>对密码进行加密</li><li>配置多种校验规则（对访问的页面做权限控制）</li><li>注解方式权限控制（对访问的Controller类做权限控制）</li><li>退出登录</li></ol><h3 id="配置可匿名访问的资源"><a href="#配置可匿名访问的资源" class="headerlink" title="配置可匿名访问的资源"></a><strong>配置可匿名访问的资源</strong></h3><p>1：在项目中创建js、css目录并在两个目录下提供任意一些测试文件</p><p>2：在spring-security.xml文件中配置，指定哪些资源可以匿名访问</p><p>第一步：在项目中创建js、css目录并在两个目录下提供任意一些测试文件</p><p>把 meinian_web 项目里面的 js 和 css 文件夹 拷贝到项目中</p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s008.png" alt="s008"></p><p>访问<a href="http://localhost:85/js/vue.js">http://localhost:85/js/vue.js</a></p><p>请求 vue.js 文件 ，发现被拦截不能访问</p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s009.png" alt="s009"></p><p>第二步：在spring-security.xml文件中配置，指定哪些资源可以匿名访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  http：用于定义相关权限控制</span><br><span class="hljs-comment">  指定哪些资源不需要进行权限校验，可以使用通配符</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/js/**&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/css/**&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>通过上面的配置可以发现，js和css目录下的文件可以在没有认证的情况下任意访问。</p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s010.png" alt="s010"></p><h3 id="使用指定的登录页面"><a href="#使用指定的登录页面" class="headerlink" title="使用指定的登录页面"></a><strong>使用指定的登录页面</strong></h3><ol><li>在webapp文件夹下面，提供login.html作为项目的登录页面</li><li>修改spring-security.xml文件，指定login.html页面可以匿名访问</li><li>修改spring-security.xml文件，加入表单登录信息的配置</li><li>修改spring-security.xml文件，关闭csrfFilter过滤器</li></ol><p>第一步：提供login.html作为项目的登录页面</p><p>1：用户名是username</p><p>2：密码是password</p><p>3：登录的url是login.do</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login.do&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：修改spring-security.xml文件，指定login.html页面可以匿名访问，否则无法访问。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">security</span>:http <span class="hljs-keyword">security</span>=&quot;none&quot; pattern=&quot;/login.html&quot; /&gt;<br></code></pre></td></tr></table></figure><p>第三步：修改spring-security.xml文件，加入表单登录信息的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:security</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/security&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://code.alibabatech.com/schema/dubbo</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                          http://www.springframework.org/schema/security</span></span><br><span class="hljs-string"><span class="hljs-tag">                          http://www.springframework.org/schema/security/spring-security.xsd&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      ① 配置哪些链接可以放行(没有认证通过也可以访问的资源)</span><br><span class="hljs-comment">      security=&quot;none&quot;：没有权限</span><br><span class="hljs-comment">      pattern=&quot;/login.html&quot;：没有任何权限，可以访问login.html</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;security:http security=&quot;none&quot; pattern=&quot;/login.html&quot;&gt;&lt;/security:http&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/login.html&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  http：用于定义相关权限控制</span><br><span class="hljs-comment">  指定哪些资源不需要进行权限校验，可以使用通配符</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/js/**&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/css/**&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  form-login：定义表单登录信息</span><br><span class="hljs-comment">            login-page=&quot;/login.html&quot;：表示指定登录页面</span><br><span class="hljs-comment">            username-parameter=&quot;username&quot;：使用登录名的名称，默认值是username</span><br><span class="hljs-comment">            password-parameter=&quot;password&quot;：使用登录名的密码，默认值是password</span><br><span class="hljs-comment">            login-processing-url=&quot;/login.do&quot;：表示登录的url地址</span><br><span class="hljs-comment">            default-target-url=&quot;/index.html&quot;：登录成功后的url地址</span><br><span class="hljs-comment">            authentication-failure-url=&quot;/login.html&quot;：认证失败后跳转的url地址，失败后指定/login.html</span><br><span class="hljs-comment">            always-use-default-target=&quot;true&quot;：登录成功后，始终跳转到default-target-url指定的地址，即登录成功的默认地址</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">auto-config</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">use-expressions</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/**&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security:form-login</span> <span class="hljs-attr">login-page</span>=<span class="hljs-string">&quot;/login.html&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">username-parameter</span>=<span class="hljs-string">&quot;username&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">password-parameter</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">login-processing-url</span>=<span class="hljs-string">&quot;/login.do&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">default-target-url</span>=<span class="hljs-string">&quot;/index.html&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">authentication-failure-url</span>=<span class="hljs-string">&quot;/login.html&quot;</span></span><br><span class="hljs-tag">                              <span class="hljs-attr">always-use-default-target</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  csrf：对应CsrfFilter过滤器</span><br><span class="hljs-comment">  disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）</span><br><span class="hljs-comment">--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">security:csrf</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:csrf</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">security:http</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注意1："><a href="#注意1：" class="headerlink" title="注意1："></a><strong>注意1：</strong></h4><p>如果用户名和密码输入正确。抛出异常：<img src="http://www.slx.blue/2022/01/08/SpringSecurity/s011.png" alt="s011"></p><p>分析原因：</p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s012.png" alt="s012"></p><p>Spring-security采用盗链机制，其中_csrf使用token标识和随机字符，每次访问页面都会随机生成，然后和服务器进行比较，成功可以访问，不成功不能访问。</p><p>解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关闭盗链安全请求--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:csrf</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s013.png" alt="s013"></p><h3 id="从数据库查询用户信息"><a href="#从数据库查询用户信息" class="headerlink" title="从数据库查询用户信息"></a><strong>从数据库查询用户信息</strong></h3><ol><li>定义UserService类，实现UserDetailsService接口。</li><li>修改spring-security.xml配置（注入UserService）</li></ol><p>如果我们要从数据库动态查询用户信息，就必须按照spring security框架的要求提供一个实现UserDetailsService接口的实现类，并按照框架的要求进行配置即可。框架会自动调用实现类中的方法并自动进行密码校验。</p><p>第一步：创建java bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String telephone;<br>    <span class="hljs-comment">// 生成set get 和 tostring 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：定义UserService类，实现UserDetailsService接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-comment">//模拟数据库中的用户数据</span><br>   <span class="hljs-keyword">static</span> Map&lt;String,com.atguigu.pojo.User&gt; map =   <span class="hljs-keyword">new</span> HashMap&lt;String,com.atguigu.pojo.User&gt;();<br><br>   <span class="hljs-keyword">static</span> &#123;<br>       com.atguigu.pojo.User user1 =  <span class="hljs-keyword">new</span> com.atguigu.pojo.User();<br>       user1.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>       user1.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br>       user1.setTelephone(<span class="hljs-string">&quot;123&quot;</span>);<br><br>       com.atguigu.pojo.User user2 =  <span class="hljs-keyword">new</span> com.atguigu.pojo.User();<br>       user2.setUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>       user2.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>       user2.setTelephone(<span class="hljs-string">&quot;321&quot;</span>);<br><br>       map.put(user1.getUsername(),user1);<br>       map.put(user2.getUsername(),user2);<br>   &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名加载用户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UsernameNotFoundException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;username&quot;</span>+username);<br>        <span class="hljs-comment">//模拟根据用户名查询数据库</span><br>        com.atguigu.pojo.User userInDb = map.get(username);<br><br>        <span class="hljs-keyword">if</span> (userInDb==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//根据用户名没有查询到用户，抛出异常，表示登录名输入有误</span><br>            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//模拟数据库中的密码，后期需要查询数据库</span><br>        String passwordInDb =<span class="hljs-string">&quot;&#123;noop&#125;&quot;</span> + userInDb.getPassword();<br>        <span class="hljs-comment">//授权，后期需要改为查询数据库动态获得用户拥有的权限和角色</span><br>        List&lt;GrantedAuthority&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        lists.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(<span class="hljs-string">&quot;add&quot;</span>));<br>        lists.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(<span class="hljs-string">&quot;delete&quot;</span>));<br>        lists.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span>));<br><br><span class="hljs-comment">//public User(String username, String password,</span><br><span class="hljs-comment">//                Collection&lt;? extends GrantedAuthority &gt; authorities)</span><br>        <span class="hljs-comment">//返回User，参数一：存放登录名，</span><br>        <span class="hljs-comment">// 参数二：存放数据库查询的密码（数据库获取的密码，默认会和页面获取的密码进行比对，成功跳转到成功页面，失败回到登录页面，并抛出异常表示失败），存放当前用户具有的角色</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(username,passwordInDb,lists);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：spring-security.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    三：认证管理，定义登录账号名和密码，并授予访问的角色、权限</span><br><span class="hljs-comment">    authentication-manager：认证管理器，用于处理认证操作</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-manager</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        authentication-provider：认证提供者，执行具体的认证逻辑</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-provider</span> <span class="hljs-attr">user-service-ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-provider</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-manager</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>本章节我们提供了UserService实现类，并且按照框架的要求实现了UserDetailsService接口。在spring配置文件中注册UserService，指定其作为认证过程中根据用户名查询用户信息的处理类。当我们进行登录操作时，spring security框架会调用UserService的loadUserByUsername方法查询用户信息，并根据此方法中提供的密码和用户页面输入的密码进行比对来实现认证操作。</p><h3 id="对密码进行加密"><a href="#对密码进行加密" class="headerlink" title="对密码进行加密"></a><strong>对密码进行加密</strong></h3><p>前面我们使用的密码都是明文的，这是非常不安全的。一般情况下用户的密码需要进行加密后再保存到数据库中。</p><p>常见的密码加密方式有：</p><p>3DES、AES、DES：使用对称加密算法，可以通过解密来还原出原始密码</p><p>MD5、SHA1：使用单向HASH算法，无法通过计算还原出原始密码，但是可以建立彩虹表进行查表破解</p><p>MD5可进行<strong>加盐</strong>加密，保证安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMD5</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMD5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 密码同样是1234却变成了密码不相同</span><br>        System.out.println(MD5Utils.md5(<span class="hljs-string">&quot;1234xiaowang&quot;</span>)); <span class="hljs-comment">//a8231077b3d5b40ffadee7f4c8f66cb7</span><br>        System.out.println(MD5Utils.md5(<span class="hljs-string">&quot;1234xiaoli&quot;</span>)); <span class="hljs-comment">//7d5250d8620fcdb53b25f96a1c7be591</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的密码值，盐值不同，加密的结果不同。</p><p>bcrypt：将salt随机并混入最终加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题</p><p><strong>spring security中的BCryptPasswordEncoder方法采用SHA-256 +随机盐+密钥对密码进行加密。</strong>SHA系列是Hash算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p><p>**（1）加密(encode)**：注册用户时，使用SHA-256+随机盐+密钥把用户输入的密码进行hash处理，得到密码的hash值，然后将其存入数据库中。</p><p>**（2）密码匹配(matches)**：用户登录时，密码匹配阶段并没有进行密码解密（因为密码经过Hash处理，是不可逆的），而是使用相同的算法把用户输入的密码进行hash处理，得到密码的hash值，然后将其与从数据库中查询到的密码hash值进行比较。如果两者相同，说明用户输入的密码正确。</p><p>这正是为什么处理密码时要用hash算法，而不用加密算法。因为这样处理即使数据库泄漏，黑客也很难破解密码。</p><p>在 <code>meinian_common</code>项目的 <code>test</code> 文件夹下面新建测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringSecurity</span> </span>&#123;<br>    <span class="hljs-comment">// SpringSecurity加盐加密</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSpringSecurity</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// $2a$10$dyIf5fOjCRZs/pYXiBYy8uOiTa1z7I.mpqWlK5B/0icpAKijKCgxe</span><br>        <span class="hljs-comment">// $2a$10$OphM.agzJ55McriN2BzCFeoLZh/z8uL.8dcGx.VCnjLq01vav7qEm</span><br><br>        BCryptPasswordEncoder encoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        String s = encoder.encode(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(s);<br>        String s1 = encoder.encode(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(s1);<br><br>        <span class="hljs-comment">// 进行判断</span><br>        <span class="hljs-keyword">boolean</span> b = encoder.matches(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;$2a$10$dyIf5fOjCRZs/pYXiBYy8uOiTa1z7I.mpqWlK5B/0icpAKijKCgxe&quot;</span>);<br>        System.out.println(b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加密后的格式一般为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$2a</span><span class="hljs-variable">$10</span><span class="hljs-variable">$/</span>bTVvqqlH9UiE0ZJZ7N2Me3RIgUCdgMheyTgV0B4cMCSokPa.<span class="hljs-number">6</span>oCa<br></code></pre></td></tr></table></figure><p>加密后字符串的长度为固定的60位。其中：</p><blockquote><p>$是分割符，无意义；</p><p>2a是bcrypt加密版本号；</p><p>10是cost的值；</p><p>而后的前22位是salt值；</p><p>再然后的字符串就是密码的密文了。</p></blockquote><p>实现步骤：</p><p>1：在spring-security.xml文件中指定密码加密对象</p><p>2：修改UserService实现类</p><p>第一步：在spring-security.xml文件中指定密码加密对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    三：认证管理，定义登录账号名和密码，并授予访问的角色、权限</span><br><span class="hljs-comment">    authentication-manager：认证管理器，用于处理认证操作</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-manager</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        authentication-provider：认证提供者，执行具体的认证逻辑</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-provider</span> <span class="hljs-attr">user-service-ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定密码加密策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security:password-encoder</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;passwordEncoder&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:password-encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-provider</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-manager</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置密码加密对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;passwordEncoder&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：修改UserService实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-comment">//模拟数据库中的用户数据</span><br>   <span class="hljs-keyword">static</span> Map&lt;String,com.atguigu.pojo.User&gt; map =   <span class="hljs-keyword">new</span> HashMap&lt;String,com.atguigu.pojo.User&gt;();<br><br>   <span class="hljs-keyword">static</span> &#123;<br>       com.atguigu.pojo.User user1 =  <span class="hljs-keyword">new</span> com.atguigu.pojo.User();<br>       user1.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>       user1.setPassword(<span class="hljs-string">&quot;$2a$10$kRdUwbkOu8f.TRNHthPKquJE5yObiKov29Fo5qrnQK2j2qkjZLuEG&quot;</span>);<br>       user1.setTelephone(<span class="hljs-string">&quot;123&quot;</span>);<br><br>       com.atguigu.pojo.User user2 =  <span class="hljs-keyword">new</span> com.atguigu.pojo.User();<br>       user2.setUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>       user2.setPassword(<span class="hljs-string">&quot;$2a$10$ay1JuL6FQHEVq7HorZGWZ.W0HgvXtwtfmzbe8R5H3on5nUtG/ZXDK&quot;</span>);<br>       user2.setTelephone(<span class="hljs-string">&quot;321&quot;</span>);<br><br>       map.put(user1.getUsername(),user1);<br>       map.put(user2.getUsername(),user2);<br>   &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名加载用户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UsernameNotFoundException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;username&quot;</span>+username);<br>        <span class="hljs-comment">//模拟根据用户名查询数据库</span><br>        com.atguigu.pojo.User userInDb = map.get(username);<br><br>        <span class="hljs-keyword">if</span> (userInDb==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//根据用户名没有查询到用户，抛出异常，表示登录名输入有误</span><br>            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//模拟数据库中的密码，后期需要查询数据库</span><br><span class="hljs-comment">//        String passwordInDb =&quot;&#123;noop&#125;&quot; + userInDb.getPassword();</span><br>        String passwordInDb = userInDb.getPassword();<br>        <span class="hljs-comment">//授权，后期需要改为查询数据库动态获得用户拥有的权限和角色</span><br>        List&lt;GrantedAuthority&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        lists.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(<span class="hljs-string">&quot;add&quot;</span>));<br>        lists.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(<span class="hljs-string">&quot;delete&quot;</span>));<br>        lists.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span>));<br><br>        <span class="hljs-comment">//public User(String username, String password,</span><br>        <span class="hljs-comment">//Collection&lt;? extends GrantedAuthority &gt; authorities)</span><br>        <span class="hljs-comment">//返回User，参数一：存放登录名，</span><br>        <span class="hljs-comment">// 参数二：存放数据库查询的密码（数据库获取的密码，默认会和页面获取的密码进行比对，成功跳转到成功页面，失败回到登录页面，并抛出异常表示失败），存放当前用户具有的角色</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(username,passwordInDb,lists);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置多种校验规则（对页面）"><a href="#配置多种校验规则（对页面）" class="headerlink" title="配置多种校验规则（对页面）"></a>配置多种校验规则（对页面）</h3><p>为了测试方便，首先在项目的<code>webapp</code>文件夹下面创建 a.html、b.html、c.html、d.html几个页面</p><p>修改spring-security.xml文件：</p><p><strong>前提：&lt;security:http auto-config=“true” use-expressions=“true”&gt;</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">auto-config</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">use-expressions</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--&lt;security:intercept-url pattern=&quot;/**&quot; access=&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;&gt;&lt;/security:intercept-url&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--只要认证通过就可以访问--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/index.html&quot;</span>  <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/a.html&quot;</span>  <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--拥有add权限就可以访问b.html页面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/b.html&quot;</span>  <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasAuthority(&#x27;add&#x27;)&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--拥有ROLE_ADMIN角色就可以访问c.html页面，</span><br><span class="hljs-comment">        注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/c.html&quot;</span>  <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--拥有ROLE_ADMIN角色就可以访问d.html页面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/d.html&quot;</span>  <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasRole(&#x27;ABC&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security:http</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><p>登录后可以访问a.html,b.html,c.html，不能访问d.html</p><h3 id="注解方式权限控制（对类）"><a href="#注解方式权限控制（对类）" class="headerlink" title="注解方式权限控制（对类）"></a>注解方式权限控制（对类）</h3><p>Spring Security除了可以在配置文件中配置权限校验规则，还可以使用注解方式控制类中方法的调用。例如Controller中的某个方法要求必须具有某个权限才可以访问，此时就可以使用Spring Security框架提供的注解方式进行控制。</p><p>【路径】</p><p>1：在spring-security.xml文件中配置组件扫描和mvc的注解驱动，用于扫描Controller</p><p>2：在spring-security.xml文件中开启权限注解支持</p><p>3：创建Controller类并在Controller的方法上加入注解（@PreAuthorize）进行权限控制</p><p>实现步骤：</p><p>第一步：在spring-security.xml文件中配置组件扫描，用于扫描Controller</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：在spring-security.xml文件中开启权限注解支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启注解方式权限控制--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:global-method-security</span> <span class="hljs-attr">pre-post-annotations</span>=<span class="hljs-string">&quot;enabled&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>第三步：创建Controller类并在Controller的方法上加入注解（@PreAuthorize）进行权限控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;add&#x27;)&quot;)</span><span class="hljs-comment">//表示用户必须拥有add权限才能调用当前方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/update&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;)</span><span class="hljs-comment">//表示用户必须拥有ROLE_ADMIN角色才能调用当前方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;update...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/delete&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;ABC&#x27;)&quot;)</span><span class="hljs-comment">//表示用户必须拥有ABC角色才能调用当前方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;delete...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试delete方法不能访问</p><p><img src="http://www.slx.blue/2022/01/08/SpringSecurity/s014.png" alt="s014"></p><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a><strong>退出登录</strong></h3><p>用户完成登录后Spring Security框架会记录当前用户认证状态为已认证状态，即表示用户登录成功了。那用户如何退出登录呢？我们可以在spring-security.xml文件中进行如下配置：</p><ol><li>index.html定义退出登录链接</li><li>在spring-security.xml定义</li></ol><p>第一步：index.html定义退出登录链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    登录成功！<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout.do&quot;</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：在spring-security.xml定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  logout：退出登录</span><br><span class="hljs-comment">  logout-url：退出登录操作对应的请求路径</span><br><span class="hljs-comment">  logout-success-url：退出登录后的跳转页面</span><br><span class="hljs-comment">  invalidate-session=&quot;true&quot; 默认为true,用户在退出后Http session失效</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:logout</span> <span class="hljs-attr">logout-url</span>=<span class="hljs-string">&quot;/logout.do&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">logout-success-url</span>=<span class="hljs-string">&quot;/login.html&quot;</span> <span class="hljs-attr">invalidate-session</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p> 通过上面的配置可以发现，如果用户要退出登录，只需要请求/logout.do这个URL地址就可以，同时会将当前session失效，最后页面会跳转到login.html页面。</p><h3 id="【小结】-2"><a href="#【小结】-2" class="headerlink" title="【小结】"></a><a href="#%E5%B0%8F%E7%BB%93-">【小结】</a></h3><p>1：配置可匿名访问的资源(不需要登录,权限 角色 就可以访问)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/js/**&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:http</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/css/**&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:http</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:http</span> <span class="hljs-attr">security</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/login.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:http</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2：使用指定的登录页面（login.html)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:form-login</span> <span class="hljs-attr">login-page</span>=<span class="hljs-string">&quot;/login.html&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">username-parameter</span>=<span class="hljs-string">&quot;username&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">password-parameter</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">login-processing-url</span>=<span class="hljs-string">&quot;/login.do&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">default-target-url</span>=<span class="hljs-string">&quot;/index.html&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">authentication-failure-url</span>=<span class="hljs-string">&quot;/login.html&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">always-use-default-target</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3：从数据库查询用户信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-manager</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security:authentication-provider</span> <span class="hljs-attr">user-service-ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security:password-encoder</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bCryptPasswordEncoder&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:password-encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-provider</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">security:authentication-manager</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4：对密码进行加密</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bCryptPasswordEncoder&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5：配置多种校验规则（对访问的页面做权限控制）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/index.html&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/a.html&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/b.html&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasAuthority(&#x27;add&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/c.html&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">security:intercept-url</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;/d.html&quot;</span> <span class="hljs-attr">access</span>=<span class="hljs-string">&quot;hasRole(&#x27;ABC&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:intercept-url</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6：注解方式权限控制（对访问的Controller类做权限控制）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:global-method-security</span> <span class="hljs-attr">pre-post-annotations</span>=<span class="hljs-string">&quot;enabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">security:global-method-security</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7：退出登录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">security:logout</span> <span class="hljs-attr">logout-url</span>=<span class="hljs-string">&quot;/logout.do&quot;</span> <span class="hljs-attr">logout-success-url</span>=<span class="hljs-string">&quot;/login.html&quot;</span> <span class="hljs-attr">inv</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务组件Quartz</title>
      <link href="/2021/12/28/Quartz/"/>
      <url>/2021/12/28/Quartz/</url>
      
        <content type="html"><![CDATA[<h1 id="定时任务组件Quartz"><a href="#定时任务组件Quartz" class="headerlink" title="定时任务组件Quartz"></a><strong>定时任务组件Quartz</strong></h1><ol><li>Quart介绍<ul><li>掌握场景（定时任务</li></ul></li><li>Quartz入门案例<ul><li>spring整合Quartz（spring中配置）</li></ul></li><li>cron表达式</li><li>cron表达式在线生成器</li></ol><h2 id="Quartz介绍"><a href="#Quartz介绍" class="headerlink" title="Quartz介绍"></a><strong>Quartz介绍</strong></h2><p>Quartz是Job scheduling（作业调度）领域的一个开源项目，Quartz既可以单独使用也可以跟spring框架整合使用，在实际开发中一般会使用后者。使用Quartz可以开发一个或者多个定时任务，每个定时任务可以单独指定执行的时间，例如每隔1小时执行一次、每个月第一天上午10点执行一次、每个月最后一天下午5点执行一次等。</p><blockquote><p>官网：<a href="https://www.w3cschool.cn/quartz_doc/">https://www.w3cschool.cn/quartz_doc/</a></p></blockquote><p>简单来说，就是可以帮助我们设置一个有规律的或者在某个具体的时间点干点想干的事的一个开源框架。</p><p><img src="http://www.slx.blue/2021/12/28/Quartz/img.jpg" alt="img"></p><p>在使用Scheduler之前，需要实例化 , scheduler实例化后，可以启动(start)、暂停(stand-by)、停止(shutdown)。</p><p>Quartz API的关键接口是：</p><ul><li>Scheduler：任务调度器，所有的任务都是从这里开始。</li><li>Trigger：触发器，定义任务执行的方式、间隔。</li><li>JobDetail &amp; Job ： 定义任务具体执行的逻辑。</li></ul><p>Scheduler的生命期，从SchedulerFactory创建它时开始，到Scheduler调用shutdown()方法时结束；Scheduler被创建后，可以增加、删除和列举Job和Trigger，以及执行其它与调度相关的操作（如暂停Trigger）。但是，Scheduler只有在调用start()方法后，才会真正地触发trigger（即执行job）</p><p>创建项目 <code>quartz_demo</code> 导入 <code>maven</code> 坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--引入Quartz的依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz-jobs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Quartz 入门案例</p><p>① 创建QuartzTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> org.quartz.*;<br><span class="hljs-keyword">import</span> org.quartz.impl.StdSchedulerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: MavenSSMProject</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 龙龙</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-12-28 09:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuarztTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Grab the Scheduler instance from the Factory</span><br>            <span class="hljs-comment">//通过工厂获取调度器对象</span><br>            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();<br><br>            <span class="hljs-comment">// and start it off</span><br>            scheduler.start();<br>            <span class="hljs-comment">//在开始和结束之间 实现业务逻辑</span><br><br>            <span class="hljs-comment">// define the job and tie it to our HelloJob class</span><br>            <span class="hljs-comment">// jobBuilder构建 定义工作接口 HelloJob</span><br>            JobDetail job= JobBuilder.newJob(HelloJob.class)<br>                    <span class="hljs-comment">//定义完成知乎 给当前借口一个身份job1</span><br>                    .withIdentity(<span class="hljs-string">&quot;job1&quot;</span>, <span class="hljs-string">&quot;group1&quot;</span>)<br>                    <span class="hljs-comment">//创建成功</span><br>                    .build();<br><br>            <span class="hljs-comment">// Trigger the job to run now, and then repeat every 40 seconds</span><br>            <span class="hljs-comment">// 构造一个触发器对象trigger</span><br>            Trigger trigger=TriggerBuilder.newTrigger()<br>                    <span class="hljs-comment">//构造出之后 给他一个身份trigger1</span><br>                    .withIdentity(<span class="hljs-string">&quot;trigger1&quot;</span>, <span class="hljs-string">&quot;group1&quot;</span>)<br>                    <span class="hljs-comment">//立即开始</span><br>                    .startNow()<br>                    <span class="hljs-comment">//渐渐一个简单地时间触发器 每四十秒触发一次</span><br>                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()<br>                            .withIntervalInSeconds(<span class="hljs-number">3</span>)<br>                            .repeatForever())<br>                    .build();<br><br>            <span class="hljs-comment">// Tell quartz to schedule the job using our trigger</span><br>            scheduler.scheduleJob(job, trigger);<br><br>            Thread.sleep(<span class="hljs-number">9000</span>);<br><br>            scheduler.shutdown();<br><br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException | InterruptedException se) &#123;<br>            se.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>② 创建HelloQuartz</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.quartz.Job;<br><span class="hljs-keyword">import</span> org.quartz.JobDetail;<br><span class="hljs-keyword">import</span> org.quartz.JobExecutionContext;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloQuartz</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Job</span> </span>&#123;<br>   <span class="hljs-comment">//执行工作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException </span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/28/Quartz/img2.png" alt="image-20211228112017378"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring整合Quartz--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Quartz整合springboot"><a href="#Quartz整合springboot" class="headerlink" title="Quartz整合springboot"></a><strong>Quartz整合springboot</strong></h2><p>创建项目 <code>quartz_demo</code></p><p>添加pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加 Scheduled 坐标 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建 <code>BootApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BootApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(BootApplication.class, args);<br>    &#125;<br></code></pre></td></tr></table></figure><p>创建 <code>TaskController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller(&quot;Task&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskController</span></span>&#123;<br><br>    <span class="hljs-meta">@Scheduled(fixedDelay = 3000)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myTask1</span><span class="hljs-params">()</span></span>&#123;<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        System.out.println(simpleDateFormat.format(<span class="hljs-keyword">new</span> Date()));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myTask2</span><span class="hljs-params">()</span></span>&#123;<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        System.out.println(simpleDateFormat.format(<span class="hljs-keyword">new</span> Date()));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *       cron:,项目启动后每5秒执行一次</span><br><span class="hljs-comment">     *       fixedDelay:距离上一次定时任务执行完毕后N毫秒在执行，</span><br><span class="hljs-comment">     *       比如参数是3000，上次执行A任务花了5秒，执行完成之后在过3秒执行</span><br><span class="hljs-comment">     *       fixedRate:执行周期，执行频率，</span><br><span class="hljs-comment">     *       上一个定时任务执行开始，在过N毫秒后执行，比如参数是3000，上次执行A任务花了2秒，在过1秒后执行，</span><br><span class="hljs-comment">     *       上次执行A任务花了15秒，任务执行后，直接执行</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@auther</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cronTask</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;Cron方式-定时任务执行时间：&quot;</span>+ dateFormat.format(<span class="hljs-keyword">new</span> Date()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Quartz整合spring"><a href="#Quartz整合spring" class="headerlink" title="Quartz整合spring"></a><strong>Quartz整合spring</strong></h2><ol><li>创建maven工程quartzdemo，打包方式为war，导入jar包</li><li>自定义一个Job</li><li>提供Spring配置文件application-jobs.xml，配置自定义Job、任务描述、触发器、调度工厂等</li><li>web.xml中定义</li><li>启动tomcat完成测试</li></ol><p>本案例基于Quartz和spring整合的方式使用。具体步骤：</p><p>（1）创建maven工程quartz_demo，打包方式为war，导入Quartz和spring相关坐标，pom.xml文件如下</p><p><img src="http://www.slx.blue/2021/12/28/Quartz/img3.jpg" alt="img"></p><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz_demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz-jobs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 指定端口 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 请求路径 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）自定义一个Job</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//工作接口 任务调度类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JobDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">excute</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行任务&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）提供Spring配置文件application-jobs.xml，配置自定义Job、任务描述、触发器、调度工厂等</p><ol><li>创建JobDetail对象,作用是负责通过反射调用指定的Job，注入目标对象，注入目标方法</li><li>注册一个触发器，指定任务触发的时间</li><li>注册一个统一的调度工厂，通过这个调度工厂调度任务</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注册自定义Job --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jobDemo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.JobDemo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1：创建JobDetail对象,作用是负责通过反射调用指定的Job，注入目标对象，注入目标方法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jobDetail&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入目标对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;targetObject&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jobDemo&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入目标方法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;targetMethod&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;run&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2：注册一个触发器，指定任务触发的时间 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myTrigger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入JobDetail --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jobDetail&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jobDetail&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定触发的时间，基于Cron表达式（0/10表示从0秒开始，每10秒执行一次） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cronExpression&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>0/10 * * * * ?<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 3：注册一个统一的调度工厂，通过这个调度工厂调度任务 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scheduler&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入多个触发器 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;triggers&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;myTrigger&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）web.xml中定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:application-jobs.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>启动tomcat <a href="http://localhost:8080/">http://localhost:8080/</a></p></blockquote><p><img src="http://www.slx.blue/2021/12/28/Quartz/img4.jpg" alt="image-20211228114754288"></p><h2 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a><strong>cron表达式</strong></h2><p>上面的入门案例中我们指定了一个表达式：0/10 * * * * ?</p><p>这种表达式称为cron表达式，通过cron表达式可以灵活的定义出符合要求的程序执行的时间。</p><p><img src="http://www.slx.blue/2021/12/28/Quartz/img5.jpg" alt="img"></p><p>cron表达式分为七个域，之间使用空格分隔。其中最后一个域（年）可以为空。每个域都有自己允许的值和一些特殊字符构成。使用这些特殊字符可以使我们定义的表达式更加灵活。</p><p>下面是对这些特殊字符的介绍：</p><p>逗号（,）：指定一个值列表，例如使用在月域上1,4,5,7表示1月、4月、5月和7月</p><p>横杠（-）：指定一个范围，例如在时域上3-6表示3点到6点（即3点、4点、5点、6点）</p><p>星号（*）：表示这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月都会触发</p><p>斜线（/）：表示递增，例如使用在秒域上0/15表示每15秒</p><p>问号（?）：只能用在日和周域上，但是不能在这两个域上同时使用。表示不指定，例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用 *，如果使用 * 表示不管星期几都会触发，实际上并不是这样。</p><p>井号（#）：只能使用在周域上，用于指定月份中的第几周的哪一天，例如6#3，意思是某月的第三个周五 (6=星期五，3意味着月份中的第三周)</p><p>L：某域上允许的最后一个值。只能使用在日和周域上。当用在日域上，表示的是在月域上指定的月份的最后一天。用于周域上时，表示周的最后一天，就是星期六</p><p>W：W 字符代表着工作日 (星期一到星期五)，只能用在日域上，它用来指定离指定日的最近的一个工作日</p><h3 id="常用表达式例子"><a href="#常用表达式例子" class="headerlink" title="常用表达式例子"></a><strong>常用表达式例子</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml">（1）0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务<br><br>　　（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业<br><br>　　（3）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 <br><br>　　（4）0 0 12 ? * WED    表示每个星期三中午12点 <br><br>　　（5）0 0 12 * * ?   每天中午12点触发 <br><br>　　（6）0 15 10 ? * *    每天上午10:15触发 <br><br>　　（7）0 15 10 * * ?     每天上午10:15触发 <br><br>　　（8）0 15 10 * * ? *    每天上午10:15触发 <br><br>　　（9）0 15 10 * * ? 2005    2005年的每天上午10:15触发 <br><br>　　（10）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 <br><br>　　（11）0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 <br><br>　　（12）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 <br><br>　　（13）0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发 <br><br>　　（14）0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发 <br><br>　　（15）0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 <br><br>　　（16）0 15 10 15 * ?    每月15日上午10:15触发 <br><br>　　（17）0 15 10 L * ?    每月最后一日的上午10:15触发 <br><br>　　（18）0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发 <br><br>　　（19）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发 <br><br>　　（20）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发<br>　　<br>　　（21）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作<br><br>　　（22）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时<br></code></pre></td></tr></table></figure><h2 id="cron表达式在线生成器"><a href="#cron表达式在线生成器" class="headerlink" title="cron表达式在线生成器"></a><strong>cron表达式在线生成器</strong></h2><p>前面介绍了cron表达式，但是自己编写表达式还是有一些困难的，我们可以借助一些cron表达式在线生成器来根据我们的需求生成表达式即可。</p><blockquote><p><a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Quartz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的奶奶</title>
      <link href="/2021/12/23/%E6%88%91%E7%9A%84%E5%A5%B6%E5%A5%B6/"/>
      <url>/2021/12/23/%E6%88%91%E7%9A%84%E5%A5%B6%E5%A5%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="我的奶奶"><a href="#我的奶奶" class="headerlink" title="我的奶奶"></a>我的奶奶</h2><pre><code>  “你奶奶就是人太好啦，我这辈子都没见到过像你奶奶这么好的人了，谁有困难都去帮忙，帮别人干活从不偷懒……”爷爷哽咽着说到。</code></pre><p>​      读幼儿园时，懵懂的我在奶奶的古诗词和乘法口诀表的碎碎念中醒来，后来才发现这些我早就懂得的东西，大家都是上了小学才学的。这或许就是奶奶给我的特殊早教吧。</p><p>​      在精明能干的爷爷眼里，奶奶做过很多在他看来比较傻的事。每次被爷爷骂了之后，奶奶都感到很委屈，但没过多久就会嘻嘻哈哈的对我说：“你爷爷就会欺负我。”但是，我知道，爷爷记得奶奶喜欢吃的每一样东西，清楚奶奶的各种喜好和禁忌。每次出门办事骑着个小摩托，却总是要带上奶奶。执子之手 ，与子偕老，这或许便是很多人口中所向往的爱情吧。</p><p>​      文化程度不高的奶奶，特别的勤劳，是一个闲不住的人。小时候和奶奶一起住，我迷糊还没有睡醒的时候，奶奶便起床给我准备早餐了，弄好后，便伴着五六点钟的晨光出门去砖厂搬砖了。那时最幸福的事，就是每天下午搬个小板凳，在家门口等奶奶踏着夕阳的光辉回到家，给我做香喷喷的晚饭。</p><p>​     奶奶不爱在县城里待着，因为这里没有她热爱的土地，没有她可以一展身手的菜田，没有随时可以陪她唠嗑的同乡，也没有人亲切地喊她“大嫂”，经常与她互相帮助、会和她相互分享美食的老街坊。奶奶是劳碌命，一闲下来就觉得别扭的慌。闲不住的奶奶经常帮别人干活儿挣点小钱，但是她的钱，很多都被她塞进了我们这些后辈的口袋里。小时候每次放假回老家，奶奶都会塞给我一百块钱零花钱，我的心里乐开了花，奶奶的脸上也笑咧了嘴。</p><p>​      别看奶奶给小辈零花钱时出手大方，但她却是个超级节俭的人。每逢过年姑姑和妈妈给奶奶买的新衣服，她从不舍得穿，每次都要念叨几句：“旧衣服还没穿烂呢！”。后来啊，奶奶每年都穿着好多年前买的，放旧了的“新衣服”。</p><p>​      一粥一饭，当思来处不易；半丝半缕，恒念物力维艰。奶奶极度爱惜粮食，总觉得浪费了粮食很可惜。每次我们要把菜倒掉的时候，她总会发脾气，说剩饭菜可以拿去喂狗，可是每次她又舍不得真拿去喂狗，总是与狗“抢食”，自己偷偷的吃掉。</p><p>​      我渐渐的长大，爷爷奶奶渐渐的老去。</p><p>​      在我读高中的时候，爷爷说要去养家畜，在深山处开辟了个小农庄。鸡鸭鱼，猪狗鹅。两个人忙的不亦乐乎。小农庄热闹起来了，每天都有好多人进去唠嗑，奶奶也有了很多很多地方种菜。每次带回去的水果，奶奶都把种子搜集起来看看能不能种活。几年后，每次我们回去，总能吃上奶奶种出来的各种水果。</p><p>​      别看奶奶年纪大了，她可不是一个老古董。在我教会爷爷奶奶怎么样玩手机后，每次大学放假回家时，总能看到爷爷奶奶坐在凳子上，用手机刷着时下流行的抖音小视频，看到搞笑视频时哈哈大笑。</p><p>​      树欲静而风不止，子欲养而亲不待。后来啊，奶奶还没有等到我实现小时候许下的诺言，工作挣很多钱给她花就走了，没有看到我娶妻生子，让她四世同堂便在做完脑肿瘤破裂的手术后，再也没有醒来，没能来得及最后看一眼她牵挂的亲人。</p><p>​      给奶奶整理衣物的时候，奶奶的每一件衣服里都放着几百块钱，甚至有一些都发霉了，最后一共整理出一万六千多块钱，爸爸说那是奶奶给我攒的，准备给我成家立业时用的钱。</p><p>​      幼年时奶奶养我长大，长大后我却没能给奶奶养老。我不甘心，但是无可奈何。</p><p>​     ——— 12/20 纪念65岁的奶奶。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ-Docker安装</title>
      <link href="/2021/12/23/RabbitMQ/"/>
      <url>/2021/12/23/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装RabbitMQ和HelloWord入门"><a href="#Docker安装RabbitMQ和HelloWord入门" class="headerlink" title="Docker安装RabbitMQ和HelloWord入门"></a>Docker安装RabbitMQ和HelloWord入门</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>1.<code>docker search rabbitmq</code>  //搜索镜像</p><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/search.png" alt="image-20211223092829902"></p><p>2.<code>docker pull rabbitmq</code> </p><blockquote><p>//默认安装最新的版本  如果不安装最新版加上版本号即可</p></blockquote><p>3.<code>docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq</code></p><blockquote><p>映射端口 名字自己随意取</p></blockquote><p>4.docker ps </p><blockquote><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223093300459.png"></p></blockquote><p>5.进入容器</p><blockquote><p>docker exec -it <code>镜像ID</code> /bin/bash</p></blockquote><p>6.进入镜像后 开启 web 管理插件</p><blockquote><p>rabbitmq-plugins enable rabbitmq_management</p></blockquote><p>7.ctrl+p+q退出当前容器  让容器后台运行</p><p>8.浏览器进入 IP替换成自己服务器或者linux的  账号和密码默认都是guest</p><blockquote><p>http://<code>IP</code>:15672/</p><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/web.png" alt="image-20211223093934827"></p></blockquote><p>9.如果登录进不去可能是防火墙拦截了，需要开放15672端口，自己的虚拟机可以直接关闭防火墙</p><h2 id="2-创建新用户"><a href="#2-创建新用户" class="headerlink" title="2.创建新用户"></a>2.创建新用户</h2><p>1.进入容器</p><blockquote><p>docker exec -it <code>镜像ID</code> /bin/bash</p></blockquote><p>2.添加账号   admin和123456对应账号密码 随意设置</p><blockquote><p>创建账号<br>rabbitmqctl add_user admin123456</p></blockquote><p>3.给admin设置管理员角色</p><blockquote><p>rabbitmqctl set_user_tags admin administrator</p></blockquote><p>4.给admin设置权限</p><blockquote><p>语法 ：set_permissions [-p <vhostpath>] <user> <conf> <write> <read></read></write></conf></user></vhostpath></p><p>命令：rabbitmqctl set_permissions -p “/“ admin “.<em>“ “.</em>“ “.*”   //给admin用户设置所有权限 </p><p>//用户 user_admin 具有/vhost1 这个 virtual host 中所有资源的配置、写、读权限</p><p>设置完可以去浏览器登录</p><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223094453233.png" alt="image-20211223094453233"></p></blockquote><p>当然也可以在web界面直接设置</p><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223094604783.png" alt="image-20211223094604783"></p><p>5.查看当前用户和角色</p><blockquote><p>docker exec -it 镜像ID /bin/bash</p><p>rabbitmqctl list_users</p><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223094804470.png" alt="image-20211223094804470"></p></blockquote><ol start="6"><li>重置命令<br> 1.关闭应用的命令为</li></ol><blockquote><p>rabbitmqctl stop_app</p></blockquote><p>  2.清除的命令为</p><blockquote><p>rabbitmqctl reset</p></blockquote><p>  3.重新启动命令为</p><blockquote><p>rabbitmqctl start_app</p></blockquote><h2 id="3-RabbitMQ的HelloWord"><a href="#3-RabbitMQ的HelloWord" class="headerlink" title="3.RabbitMQ的HelloWord"></a>3.RabbitMQ的HelloWord</h2><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定 jdk 编译版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--rabbitmq 依赖客户端--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--操作文件流的一个依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.编写入门程序（如果是云服务器，记得开启5672端口，不然连接不上）</p><p>1.生产者 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME =<span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">//发消息、</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>        <span class="hljs-comment">//创建一个链接工厂</span><br>        ConnectionFactory factory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//工厂IP 链接RabbitMQ的队列</span><br>        factory.setHost(<span class="hljs-string">&quot;自己的服务器IP&quot;</span>);<br>        <span class="hljs-comment">//用户名</span><br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-comment">//密码</span><br>        factory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>); <span class="hljs-comment">//默认端口</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建链接</span><br>            Connection connection = factory.newConnection();<br>            <span class="hljs-comment">//获取信道   交换机可以省略 采用默认的交换机</span><br>            <span class="hljs-comment">//channel 实现了自动 close 接口 自动关闭 不需要显示关闭</span><br>            Channel channel = connection.createChannel();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            生成一个队列</span><br><span class="hljs-comment">            1.队列名称</span><br><span class="hljs-comment">            2.队列里面的消息是否持久化(磁盘中) 默认情况消息存储在内存中</span><br><span class="hljs-comment">            3.改队列是否只供一个消费者进行消费,是否进行消息共享，</span><br><span class="hljs-comment">                true:只能一个消费者消费</span><br><span class="hljs-comment">                false:可以多个消费者消费</span><br><span class="hljs-comment">            4.是否自动删除 最后一个消费者端开连接后 该队列是否自动删除 如果是true自动删除 false不自动删除</span><br><span class="hljs-comment">         */</span><br>            channel.queueDeclare(QUEUE_NAME,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);<br>            <span class="hljs-comment">//发消息</span><br>            String message = <span class="hljs-string">&quot;Hello RabbitMQ2&quot;</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            1.发送一个消费者</span><br><span class="hljs-comment">            2.路由的Key值是哪个 本次是队列的名称</span><br><span class="hljs-comment">            3.其他参数信息</span><br><span class="hljs-comment">         */</span><br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-keyword">null</span>,message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;消息发送完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> </span>&#123;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME =<span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">//接受消息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建一个链接工厂</span><br>        ConnectionFactory factory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//工厂IP 链接RabbitMQ的队列</span><br>        factory.setHost(<span class="hljs-string">&quot;自己的服务器IP&quot;</span>);<br>        <span class="hljs-comment">//用户名</span><br>        factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-comment">//密码</span><br>        factory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>); <span class="hljs-comment">//默认端口</span><br>        Connection connection = factory.newConnection();<br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明 写死右箭头 落地大可好</span><br>        DeliverCallback deliverCallback = (consumerTag,message) -&gt; &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(message.getBody()));<br>        &#125;;<br><br>        <span class="hljs-comment">//取消消息的回调</span><br>        CancelCallback cancelCallback = consumerTag -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;消息被中断&quot;</span> );<br>        &#125;;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            消费者消费消息</span><br><span class="hljs-comment">            1.消费哪个队列</span><br><span class="hljs-comment">            2.消费成功之后是否要自动应答</span><br><span class="hljs-comment">                true 自动应答</span><br><span class="hljs-comment">                false 手动应答</span><br><span class="hljs-comment">            3.消费者接收消息的回调</span><br><span class="hljs-comment">            4.消费者取消消费的回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(QUEUE_NAME,<span class="hljs-keyword">true</span>,deliverCallback,cancelCallback);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.发送消息后即可在web上看到消息</p><blockquote><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223095539504.png" alt="image-20211223095539504"></p><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223095603218.png" alt="image-20211223095603218"></p></blockquote><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223095355716.png" alt="image-20211223095355716"></p><h2 id="4-常见错误"><a href="#4-常见错误" class="headerlink" title="4.常见错误"></a>4.常见错误</h2><blockquote><p>Stats in management UI are disabled on this node</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">#进入rabbitmq容器<br>docker exec -it &#123;rabbitmq容器名称或者id&#125; /bin/bash<br><br>#进入容器后，cd到以下路径<br>cd /etc/rabbitmq/conf.d/<br><br>#修改 management_agent.disable_metrics_collector = false<br>echo management_agent.disable_metrics_collector = false &gt; management_agent.disable_metrics_collector.conf<br><br>#退出容器<br>exit<br><br>#重启rabbitmq容器<br>docker retart &#123;rabbitmq容器id&#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/23/RabbitMQ/image-20211223141604710.png" alt="image-20211223141604710"></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-进阶</title>
      <link href="/2021/12/19/redis-02/"/>
      <url>/2021/12/19/redis-02/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-day02"><a href="#Redis-day02" class="headerlink" title="Redis-day02"></a>Redis-day02</h1><h2 id="第一章-Redis持久化机制"><a href="#第一章-Redis持久化机制" class="headerlink" title="第一章 Redis持久化机制"></a>第一章 Redis持久化机制</h2><p>Redis的高性能是由于其将所有数据都存储在了内存中，为了使Redis在重启之后仍能保证数据不丢失，需要将数据<strong>从内存中同步到硬盘(文件)中，这一过程就是持久化</strong>。Redis 提供了一系列不同的持久化选项，包含: RDB、AOF、不持久以及RDB+AOF这四种选项</p><p>官网地址: <a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a> </p><h3 id="第一节-RDB持久化机制"><a href="#第一节-RDB持久化机制" class="headerlink" title="第一节 RDB持久化机制"></a>第一节 RDB持久化机制</h3><h4 id="1-RDB的概念"><a href="#1-RDB的概念" class="headerlink" title="1. RDB的概念"></a>1. RDB的概念</h4><p>RDB 持久化以指定的时间间隔执行数据集的快照。RDB持久化方式是Redis默认开启的，我们不配置也可以默认使用RDB持久化机制</p><h4 id="2-快照的触发时机"><a href="#2-快照的触发时机" class="headerlink" title="2. 快照的触发时机"></a>2. 快照的触发时机</h4><h5 id="2-1-基于默认配置"><a href="#2-1-基于默认配置" class="headerlink" title="2.1 基于默认配置"></a>2.1 基于默认配置</h5><table><thead><tr><th>配置</th><th>含义</th></tr></thead><tbody><tr><td>save 900 1</td><td>900秒内至少有一次修改则触发保存操作</td></tr><tr><td>save 300 10</td><td>300秒内至少有10次修改则触发保存操作</td></tr><tr><td>save 60 10000</td><td>60秒内至少有1万次修改则触发保存操作</td></tr></tbody></table><h5 id="2-2-使用保存命令"><a href="#2-2-使用保存命令" class="headerlink" title="2.2 使用保存命令"></a>2.2 使用保存命令</h5><p> save或bgsave </p><h5 id="2-3-使用flushall命令"><a href="#2-3-使用flushall命令" class="headerlink" title="2.3 使用flushall命令"></a>2.3 使用flushall命令</h5><p>这个命令也会产生dump.rdb文件，但里面是空的，没有意义 </p><h5 id="2-4-正常关闭服务器"><a href="#2-4-正常关闭服务器" class="headerlink" title="2.4 正常关闭服务器"></a>2.4 正常关闭服务器</h5><p>如果执行SHUTDOWN命令让Redis正常退出，那么此前Redis就会执行一次持久化保存。</p><h4 id="3-RDB的相关配置"><a href="#3-RDB的相关配置" class="headerlink" title="3. RDB的相关配置"></a>3. RDB的相关配置</h4><table><thead><tr><th>配置项</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>save</td><td>900 1</td><td>设置RDB的快照时间点，如果为空则禁用RDB</td></tr><tr><td>dbfilename</td><td>文件名，例如：dump.rdb</td><td>设置RDB机制下，数据存储文件的文件名</td></tr><tr><td>dir</td><td>Redis工作目录路径</td><td>指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr></tbody></table><h4 id="4-RDB持久化的优势"><a href="#4-RDB持久化的优势" class="headerlink" title="4. RDB持久化的优势"></a>4. RDB持久化的优势</h4><ol><li>RDB是一个简洁的按时间点生成的文件，RDB 文件非常适合备份。例如，你可能希望在最近 24 小时内每小时存档一次 RDB 文件，并在 30 天内每天保存一个 RDB 快照。这使您可以在发生灾难时轻松恢复不同版本的数据集。 </li><li>RDB 非常适合灾难恢复，它是一个可以传输到远程数据中心或者云服务器的简洁文件(文件体积不大)，并且进行数据恢复时速度很快(便于数据恢复)</li><li>RDB 最大限度地提高了 Redis 的性能，因为 Redis 父进程为了持久化需要做的唯一工作是创建一个能完成所有持久化工作子进程。父进程永远不会执行磁盘 I/O 或类似操作。</li><li>在副本上，RDB 支持重启和故障转移后的部分重新同步。</li></ol><h4 id="5-RDB的缺点"><a href="#5-RDB的缺点" class="headerlink" title="5. RDB的缺点"></a>5. RDB的缺点</h4><ol><li>容易造成数据丢失，因为RDB是在一定的时间点才会去进行持久化，例如( 300秒内至少有10次修改则触发保存操作)，那么此时如果发生不可预期的关机或断电，则会导致这几分钟之内的数据丢失</li><li> RDB 经常需要 fork() 以便使用子进程在磁盘上持久化。如果数据集很大，Fork() 可能会很耗时，如果数据集很大且 CPU 性能不是很好，则可能导致 Redis 停止为客户端服务几毫秒甚至一秒钟。 AOF 也需要 fork() 但你可以调整你想要重写日志的频率，而不会对持久性进行任何权衡。 </li></ol><h3 id="第二节-AOF持久化机制"><a href="#第二节-AOF持久化机制" class="headerlink" title="第二节 AOF持久化机制"></a>第二节 AOF持久化机制</h3><h4 id="1-AOF的概念"><a href="#1-AOF的概念" class="headerlink" title="1. AOF的概念"></a>1. AOF的概念</h4><p>AOF 持久化记录服务器收到的每个写操作，这些操作将在服务器启动时再次播放，重建原始数据集。命令使用与 Redis 协议本身相同的格式以仅附加的方式记录。当日志变得太大时，Redis 能够在后台重写日志。 </p><h4 id="2-AOF的基本配置"><a href="#2-AOF的基本配置" class="headerlink" title="2. AOF的基本配置"></a>2. AOF的基本配置</h4><table><thead><tr><th>配置项</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>appendonly</td><td>yes</td><td>启用AOF持久化机制</td></tr><tr><td></td><td>no</td><td>禁用AOF持久化机制[默认值]</td></tr><tr><td>appendfilename</td><td>“文件名”</td><td>AOF持久化文件名</td></tr><tr><td>dir</td><td>Redis工作目录路径</td><td>指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr><tr><td>appendfsync</td><td>always</td><td>每一次数据修改后都将执行文件写入操作，是最安全的方式但是速度缓慢。</td></tr><tr><td></td><td>everysec</td><td>每秒执行一次写入操作。折中。</td></tr><tr><td></td><td>no</td><td>由操作系统在适当的时候执行写入操作，Redis性能最好，数据保存次数最少。</td></tr></tbody></table><p>注意: 当 AOF 和 RDB 机制并存时，Redis 会优先采纳 AOF 机制。使用 AOF 持久化文件恢复内存中的数据。而 AOF 刚刚开启时 appendonly.aof 持久化文件中没有任何数据。拿空的 appendonly.aof 持久化文件恢复内存，就会导致以前所有数据都丢失。 </p><h4 id="3-AOF的优势"><a href="#3-AOF的优势" class="headerlink" title="3. AOF的优势"></a>3. AOF的优势</h4><ol><li>使用AOF可以让Redis更持久：你可以有不同的 fsync 策略：不进行fsync，每秒进行fsync，每次执行Redis命令都进行fsync。使用 fsync每秒写入性能的默认策略仍然很棒（fsync是使用后台线程执行的，当没有 fsync 正在进行时，主线程将努力执行写入。）但您只能丢失一秒钟的写入。 </li><li>AOF 日志是仅附加日志，因此在断电时不会出现寻道或损坏问题。即使日志由于某种原因（磁盘已满或其他原因）以半写命令结束，redis-check-aof 工具也能够轻松修复它。 </li><li>当 AOF文件变大时，Redis 能够在后台自动重写 AOF。重写是完全安全的，因为当 Redis 继续追加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，Redis 就会切换这两个文件并开始追加到新的。 </li><li>AOF以易于理解和解析的格式包含所有操作的日志。您甚至可以轻松导出 AOF 文件。例如，即使您不小心使用 FLUSHALL删除了所有内容，只要在此期间没有重写日志，您仍然可以通过停止服务器、删除最新命令并重新启动Redis 来保存您的数据集再次。 </li></ol><h4 id="4-AOF的缺点"><a href="#4-AOF的缺点" class="headerlink" title="4. AOF的缺点"></a>4. AOF的缺点</h4><ol><li>AOF文件通常比相同数据集的等效 RDB 文件大。 </li><li>AOF持久化数据的恢复速度比RDB要慢很多</li><li>AOF可能在特定命令中遇到罕见的错误（例如，有一个涉及像 BRPOPLPUSH 这样的阻塞命令）导致生成的 AOF在重新加载时无法重现完全相同的数据集。但这种错误是极其罕见的</li></ol><h4 id="5-AOF文件重写"><a href="#5-AOF文件重写" class="headerlink" title="5. AOF文件重写"></a>5. AOF文件重写</h4><h5 id="5-1-AOF文件为什么会重写"><a href="#5-1-AOF文件为什么会重写" class="headerlink" title="5.1 AOF文件为什么会重写"></a>5.1 AOF文件为什么会重写</h5><p>随着写入操作的执行，AOF 变得越来越大。例如，如果您将计数器递增 100 次，您最终将在数据集中只有一个键包含最终值，但在 AOF 中有 100 个条目。重建当前状态不需要这些条目中的 99 个。 所以Redis支持了一个有趣的特性它能够在不中断对客户端的服务的情况下在后台重建AOF。每当您发出BGREWRITEAOF时，Redis 都会写入在内存中重建当前数据集所需的最短命令序列。在Redis 2.2及以上的版本中使用 AOF，则需要不时运行 BGREWRITEAOF，它会自动触发日志重写</p><h5 id="5-2-AOF文件重写的效果"><a href="#5-2-AOF文件重写的效果" class="headerlink" title="5.2 AOF文件重写的效果"></a>5.2 AOF文件重写的效果</h5><p>对比下面两组命令：</p><p><img src="http://www.slx.blue/2021/12/19/redis-02/tu_001.png"></p><p>两组命令执行后对于count来说最终的值是一致的，但是进行AOF重写后省略了中间过程，可以让AOF文件体积更小，缩短数据恢复时间。而Redis会根据AOF文件的体积来决定是否进行AOF重写。参考的配置项如下：</p><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>auto-aof-rewrite-percentage 100</td><td>文件体积增大100%时执行AOF重写</td></tr><tr><td>auto-aof-rewrite-min-size 64mb</td><td>文件体积增长到64mb时执行AOF重写</td></tr></tbody></table><p>实际工作中不要进行频繁的AOF重写，因为CPU、内存资源和硬盘资源三者之间肯定是CPU、内存资源更加宝贵，所以不应该过多耗费CPU性能去节省硬盘空间。另外数据恢复也不是高频操作，所以节约数据恢复时间价值也不是非常大。</p><h3 id="第三节-如何修复损坏的AOF文件"><a href="#第三节-如何修复损坏的AOF文件" class="headerlink" title="第三节 如何修复损坏的AOF文件"></a>第三节 如何修复损坏的AOF文件</h3><p>Redis服务器启动时如果读取了损坏的AOF持久化文件会导致启动失败，此时为了让Redis服务器能够正常启动，需要对损坏的持久化文件进行修复。 </p><ul><li><p>第一步：备份要修复的appendonly.aof文件</p></li><li><p>第二步：执行修复程序</p><p>/usr/local/redis/bin/redis-check-aof –fix /usr/local/redis/appendonly.aof</p></li><li><p>第三步：重启Redis</p></li></ul><p>注意：所谓修复持久化文件仅仅是把损坏的部分去掉，而没法把受损的数据找回。</p><h3 id="第四节-如何选择Redis的持久化选项"><a href="#第四节-如何选择Redis的持久化选项" class="headerlink" title="第四节 如何选择Redis的持久化选项"></a>第四节 如何选择Redis的持久化选项</h3><p>官方建议:</p><p>一般的迹象是，如果您想要与 PostgreSQL 可以提供的数据安全程度相当的数据安全性，则应该同时使用这两种持久性方法。 如果您非常关心您的数据，但在发生灾难时仍然可以忍受几分钟的数据丢失，您可以简单地单独使用 RDB。 有许多用户单独使用 AOF，但我们不鼓励它，因为不时拥有 RDB 快照对于进行数据库备份、更快地重新启动以及在 AOF 引擎中出现错误时是一个好主意。 注意：由于所有这些原因，我们很可能在未来将 AOF 和 RDB 统一为一个持久化模型（长期计划）。 </p><p>我的理解是:</p><p>如果Redis仅仅作为缓存可以不使用任何持久化方式。</p><p>其他应用方式综合考虑性能和完整性、一致性要求。</p><p>RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘允许，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。如果不开启AOF，仅靠Master-Slave Replication 实现高可用性能也不错。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时挂掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构。</p><h2 id="第二章-Jedis"><a href="#第二章-Jedis" class="headerlink" title="第二章 Jedis"></a>第二章 Jedis</h2><h3 id="第一节-Jedis的入门"><a href="#第一节-Jedis的入门" class="headerlink" title="第一节 Jedis的入门"></a>第一节 Jedis的入门</h3><h4 id="1-Jedis的简介"><a href="#1-Jedis的简介" class="headerlink" title="1. Jedis的简介"></a>1. Jedis的简介</h4><p>Redis不仅是使用命令来操作，现在基本上主流的语言都有客户端支持，比如java、C、C#、C++、php、Node.js、Go等。 在官方网站里列一些Java的客户端，有Jedis、Redisson、Jredis、JDBC-Redis、等其中官方推荐使用Jedis和Redisson。 在企业中用的最多的就是Jedis，Jedis同样也是托管在github上</p><h4 id="2-修改Redis配置文件中的bind配置项"><a href="#2-修改Redis配置文件中的bind配置项" class="headerlink" title="2. 修改Redis配置文件中的bind配置项"></a>2. 修改Redis配置文件中的bind配置项</h4><h5 id="2-1-bind配置项的作用"><a href="#2-1-bind配置项的作用" class="headerlink" title="2.1 bind配置项的作用"></a>2.1 bind配置项的作用</h5><p>bind后面跟的ip地址是客户端访问Redis时使用的IP地址。规则是：Redis要求客户端访问的地址，必须是 bind 配置项绑定的地址。看下面例子：</p><table><thead><tr><th>bind值</th><th>访问方式</th></tr></thead><tbody><tr><td>127.0.0.1</td><td>./redis-cli -h 127.0.0.1</td></tr><tr><td>192.168.200.100</td><td>./redis-cli -h 192.168.200.100</td></tr></tbody></table><p>所以，结论是：bind 配置项要绑定可以对外暴露的本机地址。那么 Redis 为什么会有这样的要求？就是因为在实际项目中，Redis 不是给用户直接访问的，而是给 Java 程序访问的。所以 Redis 只要绑定一个内部访问地址，就能够屏蔽外部的访问，所以这个地址绑定机制，能够对 Redis 进行保护。 </p><h5 id="2-2-修改bind配置项"><a href="#2-2-修改bind配置项" class="headerlink" title="2.2 修改bind配置项"></a>2.2 修改bind配置项</h5><p>因为我们是在宿主机Windows系统中编写Java代码，而Redis服务器是在虚拟机Linux系统中运行，所以为了让Redis能够被远程客户端访问，我们需要修改bind的配置，在redis.conf配置文件中将bind的值配置成虚拟机的IP地址</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">例如:原本的是<br>bind <span class="hljs-number">127.0.0.1</span><br>现在改成<br>bind <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">192.168.141.135</span><br>改完需要重启redis服务器<br></code></pre></td></tr></table></figure><p>千万不要把<code>127.0.0.1删掉</code>，如果删掉了的话，则Linux本机无法访问Redis。</p><p>将bind的值修改成<code>0.0.0.0</code>也可以实现本机和远程都能连接redis服务器。</p><p>当然还有另一种方式可以让Redis被远程客户端访问，那就是关闭Redis的安全模式: 在redis.conf配置文件中将<code>protected-mode</code>的值设置为<code>no</code></p><h4 id="3-使用Jedis"><a href="#3-使用Jedis" class="headerlink" title="3. 使用Jedis"></a>3. 使用Jedis</h4><h5 id="3-1-引入Jedis的依赖"><a href="#3-1-引入Jedis的依赖" class="headerlink" title="3.1 引入Jedis的依赖"></a>3.1 引入Jedis的依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-Jedis的使用代码"><a href="#3-2-Jedis的使用代码" class="headerlink" title="3.2 Jedis的使用代码"></a>3.2 Jedis的使用代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//指定Redis服务器的IP地址和端口号</span><br>Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;Jedis服务器的IP地址&quot;</span>, <span class="hljs-number">6379</span>);<br><br><span class="hljs-comment">//jedis的方法是与jedis的命令一一对应的</span><br><span class="hljs-comment">//存储一个键值对</span><br>jedis.set(<span class="hljs-string">&quot;tom:code&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><br><span class="hljs-comment">//根据key获取值</span><br>System.out.println(jedis.get(<span class="hljs-string">&quot;tom:code&quot;</span>));    <br><br><span class="hljs-comment">//关闭连接</span><br>jedis.close();<br></code></pre></td></tr></table></figure><h4 id="4-JedisPool的使用"><a href="#4-JedisPool的使用" class="headerlink" title="4. JedisPool的使用"></a>4. JedisPool的使用</h4><p>JedisPool是Jedis的连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testJedisPool</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//测试使用Jedis连接池</span><br>    <span class="hljs-comment">//1. 创建连接池</span><br>    JedisPool jedisPool = <span class="hljs-keyword">new</span> JedisPool(<span class="hljs-string">&quot;192.168.141.136&quot;</span>,<span class="hljs-number">6379</span>);<br><br>    <span class="hljs-comment">//2. 我们可以对连接池进行配置</span><br>    GenericObjectPoolConfig poolConfig = <span class="hljs-keyword">new</span> GenericObjectPoolConfig();<br>    <span class="hljs-comment">//最大连接数</span><br>    poolConfig.setMaxTotal(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//最大闲置连接数</span><br>    poolConfig.setMaxIdle(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//最小闲置连接数</span><br>    poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>    poolConfig.setMaxWaitMillis(<span class="hljs-number">3000</span>);<br><br>    <span class="hljs-comment">//3. 使用连接池获取连接</span><br>    Jedis jedis = jedisPool.getResource();<br><br>    System.out.println(jedis.get(<span class="hljs-string">&quot;username&quot;</span>));<br><br>    <span class="hljs-comment">//归还连接</span><br>    jedis.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三章-Redis事务控制"><a href="#第三章-Redis事务控制" class="headerlink" title="第三章 Redis事务控制"></a>第三章 Redis事务控制</h2><h3 id="第一节-Redis事务的概述"><a href="#第一节-Redis事务的概述" class="headerlink" title="第一节 Redis事务的概述"></a>第一节 Redis事务的概述</h3><h4 id="1-事务的作用"><a href="#1-事务的作用" class="headerlink" title="1. 事务的作用"></a>1. 事务的作用</h4><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p><h4 id="2-事务控制的相关命令"><a href="#2-事务控制的相关命令" class="headerlink" title="2. 事务控制的相关命令"></a>2. 事务控制的相关命令</h4><table><thead><tr><th>命令名</th><th>作用</th></tr></thead><tbody><tr><td>MULTI</td><td>表示开始收集命令，后面所有命令都不是马上执行，而是加入到一个队列中。</td></tr><tr><td>EXEC</td><td>执行MULTI后面命令队列中的所有命令。</td></tr><tr><td>DISCARD</td><td>放弃执行队列中的命令。</td></tr><tr><td>WATCH</td><td>“观察“、”监控“一个KEY，在当前队列外的其他命令操作这个KEY时，放弃执行自己队列的命令</td></tr><tr><td>UNWATCH</td><td>放弃监控一个KEY</td></tr></tbody></table><h3 id="第二节-命令队列执行失败的两种情况"><a href="#第二节-命令队列执行失败的两种情况" class="headerlink" title="第二节 命令队列执行失败的两种情况"></a>第二节 命令队列执行失败的两种情况</h3><h4 id="1-加入队列时失败"><a href="#1-加入队列时失败" class="headerlink" title="1. 加入队列时失败"></a>1. 加入队列时失败</h4><p><img src="http://www.slx.blue/2021/12/19/redis-02/tu_003.png"></p><p>入队过程中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><h4 id="2-执行队列时失败"><a href="#2-执行队列时失败" class="headerlink" title="2. 执行队列时失败"></a>2. 执行队列时失败</h4><p><img src="http://www.slx.blue/2021/12/19/redis-02/tu_004.png"></p><p>错误在入队时检测不出来，整个队列执行时有错的命令执行失败，但是其他命令并没有回滚。 </p><h4 id="3-Redis为什么不支持回滚"><a href="#3-Redis为什么不支持回滚" class="headerlink" title="3. Redis为什么不支持回滚"></a>3. Redis为什么不支持回滚</h4><p>官方解释如下：</p><blockquote><p>如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪。以下是这种做法的优点： 1.Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。 2.因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。 有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子， 如果你本来想通过 INCR 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 INCR ， 回滚是没有办法处理这些情况的。</p></blockquote><h3 id="第三节-悲观锁和乐观锁"><a href="#第三节-悲观锁和乐观锁" class="headerlink" title="第三节 悲观锁和乐观锁"></a>第三节 悲观锁和乐观锁</h3><h4 id="1-悲观锁"><a href="#1-悲观锁" class="headerlink" title="1. 悲观锁"></a>1. 悲观锁</h4><p>顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><h4 id="2-乐观锁"><a href="#2-乐观锁" class="headerlink" title="2. 乐观锁"></a>2. 乐观锁</h4><p>顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。</p><ul><li>如果是基于最新的版本所做的修改：服务器接受，修改成功</li><li>如果是基于旧的版本号所做的修改：服务器不接受，修改失败，整个MULTI队列中的操作都被丢弃</li></ul><p>乐观锁适用于多读的应用类型，这样可以提高吞吐量。在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。这就是乐观锁的具体体现</p><h2 id="第四章-Redis的主从复制机制"><a href="#第四章-Redis的主从复制机制" class="headerlink" title="第四章 Redis的主从复制机制"></a>第四章 Redis的主从复制机制</h2><h3 id="第一节-主从复制的概述"><a href="#第一节-主从复制的概述" class="headerlink" title="第一节 主从复制的概述"></a>第一节 主从复制的概述</h3><h4 id="1-什么是主从复制"><a href="#1-什么是主从复制" class="headerlink" title="1. 什么是主从复制"></a>1. 什么是主从复制</h4><p>主从复制是主机数据更新后根据配置和策略， 自动同步到备机的master/slave机制，Master以写为主，Slave以读为主</p><p><img src="http://www.slx.blue/2021/12/19/redis-02/tu_005.png"></p><h4 id="2-主从复制的目的"><a href="#2-主从复制的目的" class="headerlink" title="2. 主从复制的目的"></a>2. 主从复制的目的</h4><ul><li>性能优化：主服务器专注于写操作，可以用更适合写入数据的模式工作；同样，从服务器专注于读操作，可以用更适合读取数据的模式工作。</li><li>强化数据安全，避免单点故障：由于数据同步机制的存在，各个服务器之间数据保持一致，所以其中某个服务器宕机不会导致数据丢失或无法访问。从这个角度说参与主从复制的Redis服务器构成了一个<strong>集群</strong>。</li></ul><h3 id="第二节-搭建主从复制集群"><a href="#第二节-搭建主从复制集群" class="headerlink" title="第二节 搭建主从复制集群"></a>第二节 搭建主从复制集群</h3><h4 id="1-搭建思路"><a href="#1-搭建思路" class="headerlink" title="1. 搭建思路"></a>1. 搭建思路</h4><p>Redis集群在运行时使用的是同一个可执行文件(redis-server)，只是对应的配置文件(redis.conf)不同。 </p><p><img src="http://www.slx.blue/2021/12/19/redis-02/tu_006.png"></p><p>每个配置文件相同的参数是:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">daemonize yes<br><span class="hljs-keyword">dir</span> /usr/<span class="hljs-keyword">local</span>/<span class="hljs-keyword">cluster</span>-redis<br></code></pre></td></tr></table></figure><p>不同的参数是:</p><table><thead><tr><th>配置项名称</th><th align="left">作用</th><th>取值</th></tr></thead><tbody><tr><td>port</td><td align="left">Redis服务器启动后监听的端口号</td><td>6000 7000 8000</td></tr><tr><td>dbfilename</td><td align="left">RDB文件存储文件名</td><td>dump6000.rdb                                                                                   dump7000.rdb                                                                        dump8000.rdb</td></tr><tr><td>logfile</td><td align="left">日志文件位置</td><td>/var/logs/redis6000.log                                                /var/logs/redis7000.log                                               /var/logs/redis8000.log</td></tr><tr><td>pidfile</td><td align="left">pid文件位置</td><td>/var/run/redis6000.pid                                                          /var/run/redis7000.pid                                                         /var/run/redis8000.pid</td></tr></tbody></table><h4 id="2-搭建步骤"><a href="#2-搭建步骤" class="headerlink" title="2. 搭建步骤"></a>2. 搭建步骤</h4><ul><li>第一步：创建/usr/local/cluster-redis目录<code>mkdir /usr/local/cluster-redis</code></li><li>第二步：把原始未经修改的redis.conf复制到/usr/local/cluster-redis目录,并且改名为redis6000.conf</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis.conf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cluster-redis/</span>redis6000.conf<br></code></pre></td></tr></table></figure><ul><li>第三步：按照既定计划修改redis6000.conf中的相关配置项<ul><li>daemonize yes</li><li>dir</li><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第五步：复制redis6000.conf为redis7000.conf</li><li>第六步：修改redis7000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第七步：复制redis6000.conf为redis8000.conf</li><li>第八步：修改redis8000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li></ul><h4 id="3-启动Redis主从复制集群"><a href="#3-启动Redis主从复制集群" class="headerlink" title="3. 启动Redis主从复制集群"></a>3. 启动Redis主从复制集群</h4><p>进入<code>/usr/local/redis/bin</code>目录下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/redis-server /u</span>sr<span class="hljs-regexp">/local/</span>cluster-redis/redis6000.conf<br>.<span class="hljs-regexp">/redis-server /u</span>sr<span class="hljs-regexp">/local/</span>cluster-redis/redis7000.conf<br>.<span class="hljs-regexp">/redis-server /u</span>sr<span class="hljs-regexp">/local/</span>cluster-redis/redis8000.conf<br></code></pre></td></tr></table></figure><p>使用redis-cli连接指定服务器的命令格式如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>bin/redis-cli -h IP地址 -p 端口号<br></code></pre></td></tr></table></figure><p>使用redis-cli停止指定服务器的命令格式如下：<br><code>/usr/local/redis/bin/redis-cli -h IP地址 -p 端口号 shutdown </code></p><h3 id="第三节-主从关系"><a href="#第三节-主从关系" class="headerlink" title="第三节 主从关系"></a>第三节 主从关系</h3><h4 id="1-查看主从关系"><a href="#1-查看主从关系" class="headerlink" title="1. 查看主从关系"></a>1. 查看主从关系</h4><p>刚刚启动的集群服务器中每一个节点服务器都认为自己是主服务器。需要建立主从关系。 </p><p><img src="http://www.slx.blue/2021/12/19/redis-02/tu_007.png"></p><h4 id="2-配置主从关系"><a href="#2-配置主从关系" class="headerlink" title="2. 配置主从关系"></a>2. 配置主从关系</h4><p>只需要在从机上指定主机的地址和端口号即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SLAVEOF</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure><p>此时表示本机的<code>6000</code>端口是主机</p><h4 id="3-取消主从关系"><a href="#3-取消主从关系" class="headerlink" title="3. 取消主从关系"></a>3. 取消主从关系</h4><p>只需要在从机上执行命令<code>SLAVEOF NO ONE</code>即可，那么此时从机就自己变成了主机</p><h4 id="4-执行测试"><a href="#4-执行测试" class="headerlink" title="4. 执行测试"></a>4. 执行测试</h4><ul><li>测试1：在主机写入数据，在从机查看</li><li>测试2：在从机写入数据会报错。配置文件中的依据是：slave-read-only yes</li><li>测试3：主机执行SHUTDOWN看从机状态</li><li>测试4：主机恢复启动，看从机状态</li><li>测试5：从机SHUTDOWN，此时主机写入数据，从机恢复启动查看状态。重新设定主从关系后看新写入的数据是否同步。</li></ul><h3 id="第四节-哨兵模式"><a href="#第四节-哨兵模式" class="headerlink" title="第四节 哨兵模式"></a>第四节 哨兵模式</h3><h4 id="1-哨兵模式的概念"><a href="#1-哨兵模式的概念" class="headerlink" title="1. 哨兵模式的概念"></a>1. 哨兵模式的概念</h4><p>能够后台监控主机是否故障，如果故障了根据投票数自动将从机转换为主机，通过哨兵服务器监控master/slave可以实现主从复制集群的自动管理</p><h4 id="2-相关概念"><a href="#2-相关概念" class="headerlink" title="2. 相关概念"></a>2. 相关概念</h4><h5 id="2-1-主观下线"><a href="#2-1-主观下线" class="headerlink" title="2.1 主观下线"></a>2.1 主观下线</h5><p>一台哨兵服务器检测到某个节点服务器下线了</p><h5 id="2-2-客观下线"><a href="#2-2-客观下线" class="headerlink" title="2.2 客观下线"></a>2.2 客观下线</h5><p>检测到某个节点服务器下线的哨兵服务器达到了一定数量，这个数量后续会在哨兵的启动配置文件中指定。注意：只有master机需要做客观下线判断，slave机只需要做主观下线判断</p><h5 id="2-3-心跳检查"><a href="#2-3-心跳检查" class="headerlink" title="2.3 心跳检查"></a>2.3 心跳检查</h5><p>心跳(heart beat)检查是指客户端为了确认服务器端是否正常运行，会不断地给服务器端发送数据包，通过服务器端返回的数据包判断服务器端是否正在运行的一种工作机制</p><h4 id="3-配置哨兵"><a href="#3-配置哨兵" class="headerlink" title="3. 配置哨兵"></a>3. 配置哨兵</h4><p>简单起见我们只配置一台哨兵。我们所需要做的就是创建一个哨兵服务器运行所需要的配置文件。</p><p><code>touch /usr/local/cluster-redis/sentinel.conf</code></p><p>编辑sentinel.conf文件:</p><table><thead><tr><th>格式</th><th>例子</th></tr></thead><tbody><tr><td>sentinel monitor 为主机命名 主机IP 主机端口号 将主机判定为下线时需要Sentinel同意的数量</td><td>sentinel monitor mymaster 127.0.0.1 6000 1</td></tr></tbody></table><h4 id="4-启动哨兵"><a href="#4-启动哨兵" class="headerlink" title="4. 启动哨兵"></a>4. 启动哨兵</h4><p>进入<code>/usr/local/redis/bin</code>目录中:</p><p>然后执行<code>./redis-server /usr/local/cluster-redis/sentinel.conf --sentinel  </code></p><p>假设两个 slave 服务器参与选举：</p><ul><li>情况1：<ul><li>slave A：投票给 slave B</li><li>slave B：投票给 slave A</li><li>两个服务器各得一票，平手，不能确定，需要继续投票</li></ul></li><li>情况2：<ul><li>slave A：投票给自己</li><li>slave B：投票给自己</li><li>两个服务器各得一票，平手，不能确定，需要继续投票</li></ul></li><li>情况3：<ul><li>slave A：投票给自己</li><li>slave B：投票给 slave A</li><li>slave A 得 2 票，slave B 没有得票，所以 slave A 当选</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-入门</title>
      <link href="/2021/12/19/redis-01/"/>
      <url>/2021/12/19/redis-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-day01"><a href="#Redis-day01" class="headerlink" title="Redis-day01"></a>Redis-day01</h1><h2 id="第一章-非关系型数据库的简介"><a href="#第一章-非关系型数据库的简介" class="headerlink" title="第一章 非关系型数据库的简介"></a>第一章 非关系型数据库的简介</h2><h3 id="第一节-技术发展线路"><a href="#第一节-技术发展线路" class="headerlink" title="第一节 技术发展线路"></a>第一节 技术发展线路</h3><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_001.png"></p><h3 id="第二节-互联网发展所面临的问题"><a href="#第二节-互联网发展所面临的问题" class="headerlink" title="第二节 互联网发展所面临的问题"></a>第二节 互联网发展所面临的问题</h3><h4 id="1-Web1-0-时代"><a href="#1-Web1-0-时代" class="headerlink" title="1. Web1.0 时代"></a>1. Web1.0 时代</h4><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_002.png"></p><h4 id="2-Web2-0时代"><a href="#2-Web2-0时代" class="headerlink" title="2. Web2.0时代"></a>2. Web2.0时代</h4><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_003.png"></p><h4 id="3-互联网三高问题"><a href="#3-互联网三高问题" class="headerlink" title="3. 互联网三高问题"></a>3. 互联网三高问题</h4><h5 id="3-1-高并发、大流量"><a href="#3-1-高并发、大流量" class="headerlink" title="3.1 高并发、大流量"></a>3.1 高并发、大流量</h5><p>大型网站系统需要面对高并发(QPS)用户，大流量访问。Google日均PV数35亿，日均IP访问数3亿；腾讯QQ的最大在线用户数1.4亿（2011年数据）；微信用户量已超11亿；2019年天猫双十一交易额突破2500亿。 </p><h5 id="3-2-高可用"><a href="#3-2-高可用" class="headerlink" title="3.2 高可用"></a>3.2 高可用</h5><p>系统7×24小时不间断服务。大型互联网站的宕机事件通常会成为新闻焦点，微博宕机、B站挂了、腾讯视频挂了，成为重大新闻热点。 </p><h5 id="3-3-海量数据"><a href="#3-3-海量数据" class="headerlink" title="3.3 海量数据"></a>3.3 海量数据</h5><p>需要存储、管理海量数据，需要使用大量服务器。Facebook每周上传的照片数目接近10亿，百度收录的网页数目有数百亿，Google有近百万台服务器为全球用户提供服务。 </p><h3 id="第三节-解决上述问题的思路"><a href="#第三节-解决上述问题的思路" class="headerlink" title="第三节 解决上述问题的思路"></a>第三节 解决上述问题的思路</h3><h4 id="1-解决CPU和内存压力问题"><a href="#1-解决CPU和内存压力问题" class="headerlink" title="1. 解决CPU和内存压力问题"></a>1. 解决CPU和内存压力问题</h4><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_004.png"></p><h4 id="2-解决IO压力问题"><a href="#2-解决IO压力问题" class="headerlink" title="2. 解决IO压力问题"></a>2. 解决IO压力问题</h4><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_005.png"></p><h3 id="第四节-非关系型数据库的概念"><a href="#第四节-非关系型数据库的概念" class="headerlink" title="第四节 非关系型数据库的概念"></a>第四节 非关系型数据库的概念</h3><p>NoSQL是Not only SQL的缩写，大意为“不只是SQL”，说明这项技术是<strong>传统关系型数据库的补充</strong>而非替代。在整个NoSQL技术栈中<strong>MemCache</strong>、<strong>Redis</strong>、<strong>MongoDB</strong>被称为NoSQL三剑客。那么时代为什么需要NoSQL数据库呢？</p><p>我们来做个对比：</p><h4 id="1-关系型数据库和非关系型数据库的对比"><a href="#1-关系型数据库和非关系型数据库的对比" class="headerlink" title="1. 关系型数据库和非关系型数据库的对比"></a>1. 关系型数据库和非关系型数据库的对比</h4><table><thead><tr><th>对比项</th><th>关系型数据库</th><th>非关系型数据库</th></tr></thead><tbody><tr><td>数据存储位置</td><td>硬盘</td><td>内存</td></tr><tr><td>数据结构</td><td>高度组织化结构化数据</td><td>没有预定义的模式</td></tr><tr><td>数据操作方式</td><td>SQL</td><td>所有数据都是键值对，没有声明性查询语言</td></tr><tr><td>事务控制</td><td>严格的基于事务ACID原则</td><td>基于乐观锁的松散事务控制</td></tr><tr><td>访问控制</td><td>细粒度的用户访问权限控制</td><td>简单的基于IP绑定或密码的访问控制</td></tr><tr><td>外键</td><td>支持</td><td>不支持</td></tr><tr><td>索引</td><td>支持</td><td>不支持</td></tr></tbody></table><p>所以NoSQL数据库的最大优势体现为：高性能、高可用性和可伸缩性。</p><h4 id="2-非关系型数据库的适用场景"><a href="#2-非关系型数据库的适用场景" class="headerlink" title="2. 非关系型数据库的适用场景"></a>2. 非关系型数据库的适用场景</h4><ul><li><p>对数据高并发的读写</p></li><li><p>海量数据的读写</p></li><li><p>对数据高可扩展性的</p></li></ul><h4 id="3-非关系型数据库不适用的常见"><a href="#3-非关系型数据库不适用的常见" class="headerlink" title="3. 非关系型数据库不适用的常见"></a>3. 非关系型数据库不适用的常见</h4><ul><li><p>需要事务支持</p></li><li><p>基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p></li></ul><h2 id="第二章-Redis的简介"><a href="#第二章-Redis的简介" class="headerlink" title="第二章 Redis的简介"></a>第二章 Redis的简介</h2><h3 id="第一节-Redis的官方介绍"><a href="#第一节-Redis的官方介绍" class="headerlink" title="第一节 Redis的官方介绍"></a>第一节 Redis的官方介绍</h3><p>中文官网介绍: Redis是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如字符串（strings），散列（hashes），列表（lists），集合（sets），有序集合（sorted sets） 与范围查询，bitmaps，hyperloglogs和地理空间（geospatial） 索引半径查询。 Redis 内置了复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions）和不同级别的磁盘持久化（persistence）， 并通过Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。</p><p>下面是几点补充：</p><ul><li>Redis的名字是Remote Dictionary Server的缩写。</li><li>开发语言是ANSI C。</li><li>支持多种不同语言的客户端。</li><li>官方给出的性能参考（在并发量50的情况下）：<ul><li>GET: 110000/s:读的速度每秒11万次</li><li>SET: 81000/s: 写的速度每秒8万次</li></ul></li></ul><p>中文官网<a href="http://www.redis.cn/">http://www.redis.cn</a><br>英文官网<a href="http://redis.io/">http://redis.io</a></p><p>Redis命令参考文档网址：<a href="http://redisdoc.com/">http://redisdoc.com</a></p><h3 id="第二节-Redis的应用场景"><a href="#第二节-Redis的应用场景" class="headerlink" title="第二节 Redis的应用场景"></a>第二节 Redis的应用场景</h3><h4 id="1-配合关系型数据库做高速缓存"><a href="#1-配合关系型数据库做高速缓存" class="headerlink" title="1. 配合关系型数据库做高速缓存"></a>1. 配合关系型数据库做高速缓存</h4><p>使用Redis可以建立性能非常出色的缓存服务器，查询请求先在Redis中查找所需要的数据，如果能够查询到（命中）则直接返回，大大减轻关系型数据库的压力。 例如: 高频次，热门访问，并且不会经常变化的数据，降低数据库IO</p><h4 id="2-数据临时存储位置"><a href="#2-数据临时存储位置" class="headerlink" title="2. 数据临时存储位置"></a>2. 数据临时存储位置</h4><p>使用token（令牌）作为用户登录系统时的身份标识，这个token就可以在Redis中临时存储。</p><h4 id="3-作为分布式环境下解决Session不一致问题时的Session库"><a href="#3-作为分布式环境下解决Session不一致问题时的Session库" class="headerlink" title="3. 作为分布式环境下解决Session不一致问题时的Session库"></a>3. 作为分布式环境下解决Session不一致问题时的Session库</h4><p>Spring提供了一种技术解决分布式环境下Session不一致问题，叫SpringSession。而Redis就可以为SpringSession提供一个数据存储空间。 </p><h4 id="4-多样的数据结构存储持久化数据"><a href="#4-多样的数据结构存储持久化数据" class="headerlink" title="4. 多样的数据结构存储持久化数据"></a>4. 多样的数据结构存储持久化数据</h4><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_006.png"></p><h2 id="第三章-安装Redis"><a href="#第三章-安装Redis" class="headerlink" title="第三章 安装Redis"></a>第三章 安装Redis</h2><h3 id="第一节-安装Linux版本的Redis"><a href="#第一节-安装Linux版本的Redis" class="headerlink" title="第一节 安装Linux版本的Redis"></a>第一节 安装Linux版本的Redis</h3><h4 id="1-具体安装步骤"><a href="#1-具体安装步骤" class="headerlink" title="1. 具体安装步骤"></a>1. 具体安装步骤</h4><h5 id="1-1-上传redis压缩包"><a href="#1-1-上传redis压缩包" class="headerlink" title="1.1 上传redis压缩包"></a>1.1 上传redis压缩包</h5><p>使用xftp将redis压缩包上传到虚拟机的<code>/usr/local</code>目录中</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_007.png"></p><p>上传完之后建议拍个快照，以防安装出错</p><h5 id="1-2-安装c语言编译环境"><a href="#1-2-安装c语言编译环境" class="headerlink" title="1.2 安装c语言编译环境"></a>1.2 安装c语言编译环境</h5><p>因为是Redis是c语言开发的，所以要运行redis必须有c语言编译环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc-c++ -y<br><span class="hljs-meta">#</span><span class="bash"> 安装GCC环境，中间有确认的话，一律选y (yes)</span><br><span class="hljs-meta">#</span><span class="bash"> 注意：使用yum命令安装软件，需要联网</span><br></code></pre></td></tr></table></figure><h5 id="1-3-解压redis"><a href="#1-3-解压redis" class="headerlink" title="1.3 解压redis"></a>1.3 解压redis</h5><ol><li>进入<code>/usr/local</code>目录: <code>cd /usr/local</code></li><li>解压: <code>tar -xvf redis-5.0.13.tar.gz</code></li></ol><h5 id="1-4-重命名文件夹"><a href="#1-4-重命名文件夹" class="headerlink" title="1.4 重命名文件夹"></a>1.4 重命名文件夹</h5><p>将 <code>redis-5.0.13</code>重命名成<code>redis</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv redis-5.0.13 redis<br></code></pre></td></tr></table></figure><h5 id="1-5-编译安装"><a href="#1-5-编译安装" class="headerlink" title="1.5 编译安装"></a>1.5 编译安装</h5><ol><li>进入redis目录:<code>cd redis/</code></li><li>编译redis:<code>make</code></li><li>指定安装路径并且安装: <code>make PREFIX=/usr/local/redis install</code>，安装好之后<code>/usr/local/redis</code>目录中会多出来一个<code>bin</code>目录</li></ol><h4 id="2-redis的配置和启动"><a href="#2-redis的配置和启动" class="headerlink" title="2. redis的配置和启动"></a>2. redis的配置和启动</h4><h5 id="2-1-修改配置文件"><a href="#2-1-修改配置文件" class="headerlink" title="2.1 修改配置文件"></a>2.1 修改配置文件</h5><ol><li><p>将<code>/usr/local/redis/redis.conf</code>配置文件拷贝到<code>/usr/local/redis/bin</code>目录中</p></li><li><p>使用<code>vim</code>编辑器修改<code>bin</code>目录中的<code>redis.conf</code>文件,修改如下三项</p><p><strong>注意：/var/logs目录需要我们提前创建好</strong></p><table><thead><tr><th>配置项名称</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>daemonize</td><td>控制是否以守护进程形式运行Redis服务器</td><td>yes</td></tr><tr><td>logfile</td><td>指定日志文件位置</td><td>“/var/logs/redis.log”</td></tr><tr><td>dir</td><td>Redis工作目录</td><td>/usr/local/redis</td></tr></tbody></table></li></ol><h5 id="2-2-后台启动redis服务器"><a href="#2-2-后台启动redis服务器" class="headerlink" title="2.2 后台启动redis服务器"></a>2.2 后台启动redis服务器</h5><ol><li>进入redis的bin目录: <code>cd /usr/local/redis/bin</code></li><li>让redis根据配置文件启动: <code>./redis-server ./redis.conf</code></li></ol><h5 id="2-3-启动redis客户端连接服务器"><a href="#2-3-启动redis客户端连接服务器" class="headerlink" title="2.3 启动redis客户端连接服务器"></a>2.3 启动redis客户端连接服务器</h5><p><code>./redis-cli</code>,然后执行<code>ping</code>命令，如果能连接上，代表redis安装成功，并且redis服务器启动成功</p><h3 id="第二节-Windows版本Redis的安装-不建议使用"><a href="#第二节-Windows版本Redis的安装-不建议使用" class="headerlink" title="第二节 Windows版本Redis的安装(不建议使用)"></a>第二节 Windows版本Redis的安装(不建议使用)</h3><p>Redis官方没有开发支持Windows的版本， 但是，Microsoft开发技术小组开发和维护了Redis的Windows版本(只能使用在64位的电脑上)</p><h4 id="1-具体安装步骤-1"><a href="#1-具体安装步骤-1" class="headerlink" title="1. 具体安装步骤"></a>1. 具体安装步骤</h4><h5 id="1-1-软件所在位置"><a href="#1-1-软件所在位置" class="headerlink" title="1.1 软件所在位置"></a>1.1 软件所在位置</h5><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_008.png"></p><p>任选一个版本均可，建议选最高的</p><h5 id="1-2-开始安装"><a href="#1-2-开始安装" class="headerlink" title="1.2 开始安装"></a>1.2 开始安装</h5><ol><li><p>双击msi文件</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_009.png"></p></li><li><p>直接点击下一步</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_009.png"></p></li><li><p>同意协议</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_010.png"></p></li><li><p>设置安装路径</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_011.png"></p></li><li><p>端口号为<code>6379</code>不变</p></li></ol><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_012.png"></p><ol start="6"><li>设置最大内存空间限制</li></ol><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_013.png"></p><ol start="7"><li>开始安装</li></ol><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_014.png"></p><ol start="8"><li><p>安装之后的目录结构</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_015.png"></p></li></ol><h4 id="2-启动Redis服务"><a href="#2-启动Redis服务" class="headerlink" title="2. 启动Redis服务"></a>2. 启动Redis服务</h4><p>redis安装之后是Windows中的服务,采用启动和关闭服务的方式对其进行启动和关闭即可</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_016.png"></p><h4 id="3-客户端连接Redis"><a href="#3-客户端连接Redis" class="headerlink" title="3. 客户端连接Redis"></a>3. 客户端连接Redis</h4><p>双击redis安装路径中的<code>redis-cli.exe</code>即可打开redis的客户端，然后连接到redis服务</p><h4 id="4-安装Redis可视化客户端"><a href="#4-安装Redis可视化客户端" class="headerlink" title="4. 安装Redis可视化客户端"></a>4. 安装Redis可视化客户端</h4><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_021.png"></p><p>但是Windows中的Redis可视化客户端默认无法与Linux中的Redis服务器连接，需要修改Linux中的Redis服务器的配置: 在redis.conf配置文件中在bind的值的后面加上虚拟机的IP地址(在后面将Jedis的时候会讲到)，并且要确保Linux的防火墙放行了”6379”端口，或者防火墙关闭了</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">例如:原本的是<br>bind <span class="hljs-number">127.0.0.1</span><br>现在改成<br>bind <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">192.168.141.135</span><br></code></pre></td></tr></table></figure><p>改完之后要重启redis:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">先找到redis服务的进程<span class="hljs-built_in">id</span><br>ps -ef | grep redis<br>然后根据进程<span class="hljs-built_in">id</span>杀死进程<br>kill <span class="hljs-number">-9</span> 进程<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h2 id="第三章-Redis常用数据结构"><a href="#第三章-Redis常用数据结构" class="headerlink" title="第三章 Redis常用数据结构"></a>第三章 Redis常用数据结构</h2><h3 id="第一节-Redis总体结构"><a href="#第一节-Redis总体结构" class="headerlink" title="第一节 Redis总体结构"></a>第一节 Redis总体结构</h3><p>Redis中的数据，总体上是键值对，不同数据类型指的是键值对中值的类型。其中value支持8种数据类型</p><table><thead><tr><th>数据类型</th><th>应用场景</th></tr></thead><tbody><tr><td>string</td><td>分布式Session存储 分布式数据库ID 计数器：统计网站访问量</td></tr><tr><td>hash</td><td>存储对象信息（购物车中的商品信息） 存储表的信息</td></tr><tr><td>list</td><td>实现队列、栈操作 汇总日志 粉丝列表 关注的人列表</td></tr><tr><td>set</td><td>签到 打卡 点赞</td></tr><tr><td>zset</td><td>排行榜 百度热点搜索</td></tr><tr><td>geospatial</td><td>获取地理位置信息 两地之间的距离</td></tr><tr><td>hyperloglogs</td><td>基数统计</td></tr><tr><td>bitmaps</td><td>统计用户访问次数</td></tr></tbody></table><h3 id="第二节-八种数据类型的简介"><a href="#第二节-八种数据类型的简介" class="headerlink" title="第二节 八种数据类型的简介"></a>第二节 八种数据类型的简介</h3><h4 id="1-string-类型"><a href="#1-string-类型" class="headerlink" title="1. string 类型"></a>1. string 类型</h4><p>Redis中最基本的类型，它是key对应的一个单一值。二进制安全，不必担心由于编码等问题导致二进制数据变化。所以redis的string可以包含任何数据，比如jpg图片或者序列化的对象。Redis中一个字符串值的最大容量是512M。</p><h4 id="2-list类型"><a href="#2-list类型" class="headerlink" title="2. list类型"></a>2. list类型</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。它的底层是双向链表，所以它操作时头尾效率高，中间效率低（额外花费查找插入位置的时间）。</p><p>在Redis中list类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表一样，我们可以在其头部(left)和尾部(right)添加新的元素。在插入时，如果该键并不存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除，那么该键也将会被从数据库中删除。List中可以包含的最大元素数量是2^32-1个。</p><p>list是一个有序可以重复的数据类型。</p><h4 id="3-set类型"><a href="#3-set类型" class="headerlink" title="3. set类型"></a>3. set类型</h4><p>Redis的set是string类型的无序集合。它是基于哈希表实现的。set类型插入数据时会自动去重。最大可以包含2^32-1个元素。</p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_017.png"></p><h4 id="4-hash类型"><a href="#4-hash类型" class="headerlink" title="4. hash类型"></a>4. hash类型</h4><p>本身就是一个键值对集合。可以当做Java中的Map&lt;String,String&gt;对待。每一个hash可以存储2^32-1个键值对。 </p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_018.png"></p><h4 id="5-zset类型"><a href="#5-zset类型" class="headerlink" title="5. zset类型"></a>5. zset类型</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。 </p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_019.png"></p><h4 id="6-Geospatial"><a href="#6-Geospatial" class="headerlink" title="6. Geospatial"></a>6. Geospatial</h4><p>Redis 在 3.2 推出 Geo 类型，该功能可以推算出地理位置信息，两地之间的距离。 </p><p><img src="http://www.slx.blue/2021/12/19/redis-01/tu_020.png"></p><h4 id="7-HyperLogLogs"><a href="#7-HyperLogLogs" class="headerlink" title="7. HyperLogLogs"></a>7. HyperLogLogs</h4><p>用于大数据量基数统计，速度非常快，占用内存非常小。每个HyperLogLog键只需要花费12KB内存，就可以计算接近 2^64个不同元素的基数。比如计算网站UV（User view，用户访问数量，一个用户一天访问同一个URL地址多次合并为一次）。 </p><h4 id="8-bitmap"><a href="#8-bitmap" class="headerlink" title="8. bitmap"></a>8. bitmap</h4><p>直接对string的二进制位进行操作的一组命令 </p><h2 id="第三章-Redis命令行操作"><a href="#第三章-Redis命令行操作" class="headerlink" title="第三章 Redis命令行操作"></a>第三章 Redis命令行操作</h2><h3 id="第一节-基本操作命令"><a href="#第一节-基本操作命令" class="headerlink" title="第一节 基本操作命令"></a>第一节 基本操作命令</h3><h4 id="1-切换数据库"><a href="#1-切换数据库" class="headerlink" title="1. 切换数据库"></a>1. 切换数据库</h4><p>Redis默认有16个数据库,默认情况下使用的是第一个数据库，我们使用select进行切换，数据库索引从0开始</p><h4 id="2-查看数据库长度"><a href="#2-查看数据库长度" class="headerlink" title="2. 查看数据库长度"></a>2. 查看数据库长度</h4><p>数据库长度就是这个数据库中存储了多少条数据，使用<code>dbsize</code>可以查看数据库长度</p><h4 id="3-清空数据库"><a href="#3-清空数据库" class="headerlink" title="3. 清空数据库"></a>3. 清空数据库</h4><h5 id="3-1-清空当前数据库"><a href="#3-1-清空当前数据库" class="headerlink" title="3.1 清空当前数据库"></a>3.1 清空当前数据库</h5><p><code>flushdb</code></p><h5 id="3-2-清空所有数据库"><a href="#3-2-清空所有数据库" class="headerlink" title="3.2 清空所有数据库"></a>3.2 清空所有数据库</h5><p><code>flushall</code></p><h3 id="第二节-KEY操作"><a href="#第二节-KEY操作" class="headerlink" title="第二节 KEY操作"></a>第二节 KEY操作</h3><h4 id="1-KEY的命名规范"><a href="#1-KEY的命名规范" class="headerlink" title="1. KEY的命名规范"></a>1. KEY的命名规范</h4><p>在实际操作中对于Key的定义大家注意下面几点：</p><ul><li>Key不要太长，超过1024字节将消耗过多内存，降低查询效率。尽管Redis支持的Key最大长度为512MB。</li><li>Key仍然要做到见名知意。</li><li>在同一个项目中遵循同一个命名规范，习惯上多个单词用“:”分开。例如：“user:token:session:id”</li><li>Redis命令不区分大小写，Key区分大小写</li></ul><h4 id="2-KEY操作相关命令-等后续再来演示"><a href="#2-KEY操作相关命令-等后续再来演示" class="headerlink" title="2. KEY操作相关命令(等后续再来演示)"></a>2. KEY操作相关命令(等后续再来演示)</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>KEYS PATTERN</td><td>把匹配PATTERN的key返回。PATTERN中可以使用“*”匹配多个字符，使用“?”匹配单个字符</td></tr><tr><td>TYPE KEY</td><td>返回KEY对应的值的类型</td></tr><tr><td>MOVE KEY DB</td><td>把一组键值对数据移动到另一个数据库中</td></tr><tr><td>DEL KEY [KEY …] 重点</td><td>根据KEY进行删除，至少要指定一个KEY</td></tr><tr><td>EXISTS KEY [KEY …]</td><td>检查指定的KEY是否存在。指定一个KEY时，存在返回1，不存在返回0。可以指定多个，返回存在的KEY的数量。</td></tr><tr><td>RENAME KEY NEWKEY</td><td>重命名一个KEY，NEWKEY不管是否是已经存在的都会执行，如果NEWKEY已经存在则会被覆盖。</td></tr><tr><td>RENAMENX KEY NEWKEY</td><td>只有在NEWKEY不存在时能够执行成功，否则失败</td></tr><tr><td>TTL KEY</td><td>以秒为单位查看KEY还能存在多长时间<br>    正数：剩余的存活时间（单位：秒）<br>    -1：永不过期<br>    -2：不存在的Key</td></tr><tr><td>EXPIRE KEY SECONDS 重点</td><td>给一个KEY设置在SECONDS秒后过期，过期会被Redis移除。</td></tr><tr><td>PERSIST KEY</td><td>移除过期时间，变成永久key</td></tr></tbody></table><h3 id="第三节-string操作"><a href="#第三节-string操作" class="headerlink" title="第三节 string操作"></a>第三节 string操作</h3><table><thead><tr><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>SET key value(重点)</td><td align="left">设置指定 key 的值</td></tr><tr><td>GET key(重点)</td><td align="left">获取指定 key 的值</td></tr><tr><td>APPEND KEY VALUE</td><td align="left">把指定的value追加到KEY对应的原来的值后面，返回值是追加后字符串长度</td></tr><tr><td>GETSET key value</td><td align="left">将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td>GETRANGE KEY START END</td><td align="left">从字符串中取指定的一段，索引从0开始     START是开始取值的索引     END是结束取值的索引</td></tr><tr><td>SETRANGE KEY OFFSET VALUE</td><td align="left">跳过offset个字符，然后使用Value替换等长度的内容</td></tr><tr><td>STRLEN KEY</td><td align="left">直接返回字符串长度</td></tr><tr><td>SETEX key seconds value(重点)</td><td align="left">将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td>SETNX key value</td><td align="left">只有在 key 不存在时设置 key 的值。</td></tr><tr><td>INCR key(重点)</td><td align="left">将 key 中储存的数字值增一。</td></tr><tr><td>INCRBY key increment</td><td align="left">将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td>DECR key</td><td align="left">将 key 中储存的数字值减一。</td></tr><tr><td>DECRBY key decrement</td><td align="left">key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td>MSET KEY VALUE [KEY VALUE …]</td><td align="left">一次性设置一组多个键值对</td></tr><tr><td>MGET KEY [KEY …]</td><td align="left">一次性指定多个KEY，返回它们对应的值，没有值的KEY返回值是(nil</td></tr><tr><td>MSETNX KEY VALUE [KEY VALUE …</td><td align="left">一次性新建多个值</td></tr></tbody></table><h3 id="第四节-list操作"><a href="#第四节-list操作" class="headerlink" title="第四节 list操作"></a>第四节 list操作</h3><table><thead><tr><th>命令</th><th>命令描述</th></tr></thead><tbody><tr><td>LPUSH key value [value …] 重点</td><td>将一个或多个值插入到列表头部(左边)</td></tr><tr><td>LPUSHX key value</td><td>只能针对存在的list执行LPUSH</td></tr><tr><td>RPUSH key value [value …] 重点</td><td>在列表中添加一个或多个值(右边)</td></tr><tr><td>LRANGE key start stop</td><td>根据list集合的索引打印元素数据     正着数：0,1,2,3,…     倒着数：-1,-2,-3,…</td></tr><tr><td>LPOP key 重点</td><td>左边弹出一个 相当于移除第一个</td></tr><tr><td>RPOP key 重点</td><td>右边弹出一个  相当于移除最后一个</td></tr><tr><td>LLEN key</td><td>返回指定key所对应的list中元素个数</td></tr><tr><td>LINDEX key index</td><td>通过索引获取列表中的元素</td></tr><tr><td>LINSERT key BEFORE| AFTER pivot value</td><td>在pivot指定的值前面或后面插入value     如果pivot值有重复的，那么就从左往右数，以第一个遇到的pivot为基准     BEFORE表示放在pivot前面     AFTER表示放在pivot后面</td></tr><tr><td>RPOPLPUSH source destination</td><td>从source中RPOP一个元素，LPUSH到destination中</td></tr><tr><td>LREM key count value</td><td>根据count指定的数量从key对应的list中删除value     具体执行时从左往右删除，遇到一个删一个，删完为止</td></tr><tr><td>LSET key index value</td><td>把指定索引位置的元素替换为另一个值</td></tr><tr><td>LTRIM key start stop</td><td>仅保留指定区间的数据，两边的数据被删除</td></tr></tbody></table><h3 id="第五节-Set操作"><a href="#第五节-Set操作" class="headerlink" title="第五节 Set操作"></a>第五节 Set操作</h3><table><thead><tr><th>命令</th><th>命令描述</th></tr></thead><tbody><tr><td>SADD key member [member …]</td><td>给key指定的set集合中存入数据，set会自动去重</td></tr><tr><td>SREM key member [member …]</td><td>从集合中删除元素</td></tr><tr><td>SMEMBERS key</td><td>返回可以指定的set集合中所有的元素</td></tr><tr><td>SCARD key</td><td>返回集合中元素的数量</td></tr><tr><td>SISMEMBER key member</td><td>检查当前指定member是否是集合中的元素     返回1：表示是集合中的元素     返回0：表示不是集合中的元素</td></tr><tr><td>SPOP key</td><td>移除并返回集合中的一个随机元素</td></tr><tr><td>SDIFF key [key …]</td><td>将指定的集合执行“差集”操作     集合A：a,b,c     集合B：b,c,d     A对B执行diff：a     相当于：A-交集部分</td></tr><tr><td>SDIFFSTORE destination key [key …]</td><td>取差集后存入destination这个集合</td></tr><tr><td>SUNION key [key …]</td><td>将指定的集合执行“并集”操作     集合A：a,b,c     集合B：b,c,d     并集：a,b,c,d</td></tr><tr><td>SUNIONSTORE destination key [key …]</td><td>取并集后存入destination这个集合</td></tr><tr><td>SINTER key [key …]</td><td>将指定的集合进行“交集”操作     集合A：a,b,c     集合B：b,c,d     交集：b,c</td></tr><tr><td>SINTERSTORE destination key [key …]</td><td>取交集后存入destination这个集合</td></tr><tr><td>SMOVE source destination member</td><td>把member从source移动到destination</td></tr></tbody></table><h3 id="第六节-Hash操作"><a href="#第六节-Hash操作" class="headerlink" title="第六节 Hash操作"></a>第六节 Hash操作</h3><table><thead><tr><th align="left">命令</th><th>命令描述</th></tr></thead><tbody><tr><td align="left">HSET key field value</td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td align="left">HMSET key field value [field value …]</td><td>同时将多个 field-value (字段-值)对设置到哈希表 key 中</td></tr><tr><td align="left">HGET key field</td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td align="left">HMGET key field [field …]</td><td>获取多个给定字段的值</td></tr><tr><td align="left">HDEL key field [field …]</td><td>删除一个或多个哈希表字段</td></tr><tr><td align="left">HLEN key</td><td>获取哈希表中字段的数量</td></tr><tr><td align="left">HGETALL key</td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td align="left">HKEYS key</td><td>获取所有哈希表中的字段</td></tr><tr><td align="left">HVALS key</td><td>获取哈希表中所有值</td></tr><tr><td align="left">HEXISTS key field</td><td>判断是否存在某个字段</td></tr></tbody></table><h3 id="第七节-zset操作"><a href="#第七节-zset操作" class="headerlink" title="第七节 zset操作"></a>第七节 zset操作</h3><table><thead><tr><th>命令</th><th>命令描述</th></tr></thead><tbody><tr><td>ZADD key score member [score member …]</td><td>增加元素</td></tr><tr><td>ZSCORE key member</td><td>获取元素的分数</td></tr><tr><td>ZREM key member [member …]</td><td>删除元素</td></tr><tr><td>ZCARD key</td><td>获得集合中元素的数量</td></tr><tr><td>ZRANGE key start stop[WITHSCORES]</td><td>获得排名在某个范围的元素列表</td></tr><tr><td>ZREVRANGE key start stop</td><td>按照分数从高到低排序</td></tr><tr><td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td><td>在分数的指定区间内返回数据     min参数可以通过 -inf 表示负无穷     max参数可以通过 +inf 表示正无穷</td></tr><tr><td>ZRANK key member</td><td>先对分数进行升序排序，返回member的排名。排名从0开始</td></tr></tbody></table><h3 id="第八节-Geospatial-了解"><a href="#第八节-Geospatial-了解" class="headerlink" title="第八节 Geospatial(了解)"></a>第八节 Geospatial(了解)</h3><p>查询经纬度数据的网址：<a href="http://www.jsons.cn/lngcode">http://www.jsons.cn/lngcode</a> </p><h4 id="1-添加地理位置"><a href="#1-添加地理位置" class="headerlink" title="1. 添加地理位置"></a>1. 添加地理位置</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">GEOADD <span class="hljs-built_in">key</span> longitude latitude <span class="hljs-built_in">member</span> [longitude latitude <span class="hljs-built_in">member</span> ...]<br></code></pre></td></tr></table></figure><p>规则：</p><p>1.取值范围</p><p> 有效的经度从 -180 度到 180 度。</p><p> 有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p> 当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>2.已经添加的数据，是无法再次往里面添加的。</p><p>例子:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GEOADD</span> china:city <span class="hljs-number">114</span>.<span class="hljs-number">085947</span> <span class="hljs-number">22</span>.<span class="hljs-number">547</span> shenzhen <br><span class="hljs-attribute">GEOADD</span> china:city <span class="hljs-number">113</span>.<span class="hljs-number">280637</span> <span class="hljs-number">23</span>.<span class="hljs-number">125178</span> guangzhou<br></code></pre></td></tr></table></figure><h4 id="2-查询已添加的地理位置"><a href="#2-查询已添加的地理位置" class="headerlink" title="2. 查询已添加的地理位置"></a>2. 查询已添加的地理位置</h4><p>Geo类型在Redis内部其实是使用zset类型存储的，所以可以使用zset的命令进行常规操作 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ZRANGE</span> china:city <span class="hljs-number">0</span> -<span class="hljs-number">1</span> <br><span class="hljs-attribute">ZRANGE</span> china:city <span class="hljs-number">0</span> -<span class="hljs-number">1</span> WITHSCORES<br></code></pre></td></tr></table></figure><h4 id="3-删除已添加的地理位置"><a href="#3-删除已添加的地理位置" class="headerlink" title="3. 删除已添加的地理位置"></a>3. 删除已添加的地理位置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ZREM</span> china:city guangzhou<br></code></pre></td></tr></table></figure><h4 id="4-获取指定地区的坐标值"><a href="#4-获取指定地区的坐标值" class="headerlink" title="4. 获取指定地区的坐标值"></a>4. 获取指定地区的坐标值</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">GEOPOS</span> china:city shenzhen<br></code></pre></td></tr></table></figure><h5 id="5-计算两地之间的直线距离"><a href="#5-计算两地之间的直线距离" class="headerlink" title="5. 计算两地之间的直线距离"></a>5. 计算两地之间的直线距离</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">GEODIST china:city guangzhou <span class="hljs-keyword">shenzhen </span>km<br></code></pre></td></tr></table></figure><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位。</p><h4 id="6-以给定坐标为中心，在指定半径内查找元素"><a href="#6-以给定坐标为中心，在指定半径内查找元素" class="headerlink" title="6. 以给定坐标为中心，在指定半径内查找元素"></a>6. 以给定坐标为中心，在指定半径内查找元素</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GEORADIUS</span> china:city <span class="hljs-number">110</span> <span class="hljs-number">20</span> <span class="hljs-number">1000</span> km WITHCOORD WITHDIST<br></code></pre></td></tr></table></figure><p>WITHCOORD表示显示经纬度</p><p>WITHDIST表示显示到中心的距离</p><h4 id="7-在指定元素周围查找其他元素"><a href="#7-在指定元素周围查找其他元素" class="headerlink" title="7. 在指定元素周围查找其他元素"></a>7. 在指定元素周围查找其他元素</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GEORADIUSBYMEMBER</span> china:city shenzhen <span class="hljs-number">300</span> km WITHCOORD WITHDIST<br></code></pre></td></tr></table></figure><h3 id="第九节-HyperLogLogs-了解"><a href="#第九节-HyperLogLogs-了解" class="headerlink" title="第九节 HyperLogLogs(了解)"></a>第九节 HyperLogLogs(了解)</h3><h4 id="1-基数概念"><a href="#1-基数概念" class="headerlink" title="1. 基数概念"></a>1. 基数概念</h4><p>一个集合中不重复元素的个数。例如：集合{1,2,5,1,7,2,5}中元素个数是7，但是基数是4。而hyperloglogs的主要功能就是进行基数统计。 </p><h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><h5 id="2-1-添加"><a href="#2-1-添加" class="headerlink" title="2.1 添加"></a>2.1 添加</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">PFADD user:access:<span class="hljs-number">1</span> tom <span class="hljs-keyword">jerry </span><span class="hljs-keyword">andy </span><span class="hljs-keyword">jim </span><span class="hljs-keyword">andy </span><span class="hljs-keyword">jerry </span>tom<br>PFADD user:access:<span class="hljs-number">2</span> <span class="hljs-keyword">andy </span><span class="hljs-keyword">jerry </span>tom <span class="hljs-keyword">bob </span>kate<br>PFADD user:access:<span class="hljs-number">3</span> mary harry tom <span class="hljs-keyword">jerry</span><br></code></pre></td></tr></table></figure><h5 id="2-2-统计"><a href="#2-2-统计" class="headerlink" title="2.2 统计"></a>2.2 统计</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PFCOUNT <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:<span class="hljs-number">1</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:<span class="hljs-number">2</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="2-3-合并"><a href="#2-3-合并" class="headerlink" title="2.3 合并"></a>2.3 合并</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PFMERGE <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:merge <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:<span class="hljs-number">1</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:<span class="hljs-number">2</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">access</span>:<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="第十节-bitmap位图-了解"><a href="#第十节-bitmap位图-了解" class="headerlink" title="第十节 bitmap位图(了解)"></a>第十节 bitmap位图(了解)</h3><p>直接对数据的二进制位进行操作 ：</p><p>setbit设置指定比特位<br>getbit获取指定比特位<br>bitcount统计所有比特位中1的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">set a hello<br>GETBIT a 0<br>GETBIT a 1<br>GETBIT a 2<br>GETBIT a 3<br>GETBIT a 4<br>GETBIT a 5<br>SETBIT a 5 1<br>get a<br>BITCOUNT a<br></code></pre></td></tr></table></figure><h2 id="第四章-总结"><a href="#第四章-总结" class="headerlink" title="第四章 总结"></a>第四章 总结</h2><ol><li>为什么需要NoSQL<ol><li>主要目的：解决互联网项目的性能问题</li><li>具体解决哪些性能问题: 高并发、海量数据、高可用</li></ol></li><li>Redis有几种数据类型<ol><li>string</li><li>list</li><li>set</li><li>hash</li><li>zset</li><li>地理位置</li><li>基数</li><li>bitmap</li></ol></li><li>redis存储数据的整体结构: 键值对</li><li>安装redis:<ol><li>安装完之后:修改配置文件</li><li>远程访问: 修改配置文件的bind</li><li>启动redis的时候: 一定要附加配置文件参数   <code>./redis-server 配置文件路径</code></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-进阶</title>
      <link href="/2021/12/16/Linux-02/"/>
      <url>/2021/12/16/Linux-02/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-day02"><a href="#Linux-day02" class="headerlink" title="Linux-day02"></a>Linux-day02</h1><h2 id="第一章-Linux常用命令"><a href="#第一章-Linux常用命令" class="headerlink" title="第一章 Linux常用命令"></a>第一章 Linux常用命令</h2><h3 id="第一节-进程相关命令"><a href="#第一节-进程相关命令" class="headerlink" title="第一节 进程相关命令"></a>第一节 进程相关命令</h3><h4 id="1-查看进程状态"><a href="#1-查看进程状态" class="headerlink" title="1. 查看进程状态"></a>1. 查看进程状态</h4><h5 id="1-1-命令的使用"><a href="#1-1-命令的使用" class="headerlink" title="1.1 命令的使用"></a>1.1 命令的使用</h5><p><code>ps</code>命令是用于查看进程状态的命令，它常和<code>e</code>参数(对应单词entire，表示全部。具体指显示系统中全部的进程信息。)，以及<code>f</code>参数(对应单词full-formate，表示完整格式。) 一起使用</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_001.png"></p><p>进程信息中各列数据的说明:</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>UID</td><td>进程的用户信息</td></tr><tr><td><strong>PID</strong></td><td>进程id。由系统分配，不会重复。</td></tr><tr><td><strong>PPID</strong></td><td>父进程的id。父进程和子进程的关系是：父进程启动了子进程。</td></tr><tr><td><strong>CMD</strong></td><td>当前进程所对应的程序。</td></tr><tr><td>C</td><td>用整数表示的CPU使用率</td></tr><tr><td>STIME</td><td>进程启动时间</td></tr><tr><td>TTY</td><td>进程所在终端。所谓终端就是用户输入命令的操作界面。</td></tr><tr><td>TIME</td><td>进程所占用的CPU时间</td></tr></tbody></table><h5 id="1-2-父进程和子进程之间的关系"><a href="#1-2-父进程和子进程之间的关系" class="headerlink" title="1.2 父进程和子进程之间的关系"></a>1.2 父进程和子进程之间的关系</h5><p>简单来说，父进程和子进程的关系是：父进程启动了子进程。我们可以使用pstree命令查看整个进程树。 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_002.png"></p><h5 id="1-3-和其它命令配合一起查看进程"><a href="#1-3-和其它命令配合一起查看进程" class="headerlink" title="1.3 和其它命令配合一起查看进程"></a>1.3 和其它命令配合一起查看进程</h5><h6 id="1-3-1-分屏查看进程信息"><a href="#1-3-1-分屏查看进程信息" class="headerlink" title="1.3.1 分屏查看进程信息"></a>1.3.1 分屏查看进程信息</h6><p>全部进程的信息太多了，一屏无法全部显示，所以我们希望可以分屏显示并由我们来控制翻页。为了达到这个目标，我们可以使用管道符号将ps -ef命令的输出数据传送给less命令。 <code>ps -ef | less</code></p><h6 id="1-3-2-精确查询一个具体进程信息"><a href="#1-3-2-精确查询一个具体进程信息" class="headerlink" title="1.3.2 精确查询一个具体进程信息"></a>1.3.2 精确查询一个具体进程信息</h6><p>我们通过Xshell远程连接Linux系统，靠的是sshd这个服务。这个服务如果正在运行中，那么一定会有这个服务对应的进程。所以下面我们来查询一下sshd这个命令的进程。 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_003.png"></p><p>我们看到这里返回了3条结果，其中前两天都是和sshd服务相关的结果，但是最后一条不是。</p><blockquote><p>root 72826 3456 0 20:06 pts/0 00:00:00 grep –color=auto sshd</p></blockquote><p>仔细观察一下就能发现，这其实是grep命令本身。因为grep命令运行过程中本身也是一个进程，“grep sshd”正好也匹配sshd，所以就被选中了。但是这是一个干扰项，并不是我们真正要查询的内容，所以需要把它从查询结果中排除。</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_004.png"></p><p>再用一层管道，使用grep命令的-v参数把匹配grep的行排除，返回不匹配的结果，这就是我们最终想要的。 </p><h4 id="2-杀死进程"><a href="#2-杀死进程" class="headerlink" title="2. 杀死进程"></a>2. 杀死进程</h4><h5 id="2-1-命令的使用"><a href="#2-1-命令的使用" class="headerlink" title="2.1 命令的使用"></a>2.1 命令的使用</h5><p><code>kill -9 进程id</code>表示杀死指定id的进程</p><h5 id="2-2-举例"><a href="#2-2-举例" class="headerlink" title="2.2 举例"></a>2.2 举例</h5><ol><li><p>打开Linux内置的火狐浏览器</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_005.png"></p></li><li><p>查看火狐浏览器的进程id</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_006.png"></p><p> 另外一个是浏览器插件，不用管。 </p></li><li><p>使用kill命令结束火狐浏览器进程: <code>kill -9 3325</code></p></li></ol><h4 id="3-实时查看系统运行情况和健康状态-了解"><a href="#3-实时查看系统运行情况和健康状态-了解" class="headerlink" title="3.  实时查看系统运行情况和健康状态(了解)"></a>3.  实时查看系统运行情况和健康状态(了解)</h4><h5 id="3-1-命令和参数"><a href="#3-1-命令和参数" class="headerlink" title="3.1 命令和参数"></a>3.1 命令和参数</h5><table><thead><tr><th>命令名</th><th>更新时间间隔（秒）</th><th>不显示任何闲置或者僵死进程</th><th>通过进程id监控单一进程</th></tr></thead><tbody><tr><td>top</td><td>-d 间隔秒数</td><td>-i</td><td>-p 进程id</td></tr></tbody></table><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_007.png"></p><h5 id="3-2-按键操作"><a href="#3-2-按键操作" class="headerlink" title="3.2 按键操作"></a>3.2 按键操作</h5><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>默认值，根据CPU使用率排序</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>d</td><td>设置数据刷新的时间间隔，单位是秒</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h5 id="3-3-查询结果的字段解释"><a href="#3-3-查询结果的字段解释" class="headerlink" title="3.3 查询结果的字段解释"></a>3.3 查询结果的字段解释</h5><h6 id="3-3-1-第一行信息为任务队列信息"><a href="#3-3-1-第一行信息为任务队列信息" class="headerlink" title="3.3.1 第一行信息为任务队列信息"></a>3.3.1 第一行信息为任务队列信息</h6><table><thead><tr><th>内容举例</th><th>说明</th></tr></thead><tbody><tr><td>12:26:49</td><td>系统当前时间</td></tr><tr><td>up 1 day, 13:32</td><td>系统的运行时间，前面例子表示本机已经运行1天13小时32分钟</td></tr><tr><td>2 users</td><td>当前登录了2个用户</td></tr><tr><td>load average:0.00, 0.00, 0.00</td><td>系统在之前1分钟，5分钟，15分钟的平均负载。 一般认为小于1时，负载较小。如果大于1，系统已经超出负荷。</td></tr></tbody></table><h6 id="3-3-2-第二行为进程信息"><a href="#3-3-2-第二行为进程信息" class="headerlink" title="3.3.2 第二行为进程信息"></a>3.3.2 第二行为进程信息</h6><table><thead><tr><th>内容举例</th><th>说明</th></tr></thead><tbody><tr><td>Tasks: 95 total</td><td>系统中的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>94 sleeping</td><td>睡眠的进程</td></tr><tr><td>0 stopped</td><td>正在停止的进程</td></tr><tr><td>0 zombie</td><td>僵尸进程。如果不是0，需要手工检查僵尸进程</td></tr></tbody></table><h6 id="3-3-3-第三行为CPU信息"><a href="#3-3-3-第三行为CPU信息" class="headerlink" title="3.3.3 第三行为CPU信息"></a>3.3.3 第三行为CPU信息</h6><table><thead><tr><th>内容举例</th><th>说明</th></tr></thead><tbody><tr><td>Cpu(s):0.1%us</td><td>用户空间占用的CPU百分比，us对应user</td></tr><tr><td>0.1%sy</td><td>内核空间占用的CPU百分比，sy对应system</td></tr><tr><td>0.0%ni</td><td>改变过优先级的进程占用的CPU百分比，ni对应niced</td></tr><tr><td>99.7%id</td><td>空闲CPU的CPU百分比</td></tr><tr><td>0.1%wa</td><td>等待输入/输出的进程的占用CPU百分比，wa对应IO wait</td></tr><tr><td>0.0%hi</td><td>硬中断请求服务占用的CPU百分比，hi对应hardware IRQ</td></tr><tr><td>0.1%si</td><td>软中断请求服务占用的CPU百分比，si对应software IRQ</td></tr><tr><td>0.0%st</td><td>st（Steal time）虚拟时间百分比，也叫被hypervisor偷走的时间。 就是当有虚拟机时，虚拟CPU等待实际CPU的时间百分比。</td></tr></tbody></table><h6 id="3-3-4-第四行为物理内存信息"><a href="#3-3-4-第四行为物理内存信息" class="headerlink" title="3.3.4 第四行为物理内存信息"></a>3.3.4 第四行为物理内存信息</h6><table><thead><tr><th>内容举例</th><th>说明</th></tr></thead><tbody><tr><td>2031912 total</td><td>物理内存的总量，单位KB</td></tr><tr><td>70496 free</td><td>空闲的物理内存数量</td></tr><tr><td>1780676 used</td><td>已经使用的物理内存数量</td></tr><tr><td>174864 buff/cache</td><td>作为缓冲的内存数量</td></tr></tbody></table><p>使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是还未纳入内核管控范围的数量。</p><p>纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存还给free，因此Linux系统运行过程中free内存会越来越少，但不影响系统运行。因为这表示更多的空闲内存被内核管理了。</p><h6 id="3-3-5-第五行为交换分区（swap）信息"><a href="#3-3-5-第五行为交换分区（swap）信息" class="headerlink" title="3.3.5 第五行为交换分区（swap）信息"></a>3.3.5 第五行为交换分区（swap）信息</h6><table><thead><tr><th>内容举例</th><th>说明</th></tr></thead><tbody><tr><td>2097148 total</td><td>交换分区（虚拟内存）的总大小</td></tr><tr><td>1137824 free</td><td>空闲交换分区的大小</td></tr><tr><td>959324 used</td><td>已经使用的交互分区的大小</td></tr><tr><td>58640 avail Mem</td><td>在不交换的情况下，对启动新应用程序可用内存的估计</td></tr></tbody></table><p>交换分区是一个非常值得关注的地方，如果swap区的used数值持续发生变化那么说明在内核和交换分区之间正在持续发生数据交换，这表示内存不够用了——必须不断把内存中的数据保存到硬盘上。</p><h4 id="4-查看网络状态命令-了解"><a href="#4-查看网络状态命令-了解" class="headerlink" title="4. 查看网络状态命令(了解)"></a>4. 查看网络状态命令(了解)</h4><h5 id="4-1-命令和参数"><a href="#4-1-命令和参数" class="headerlink" title="4.1 命令和参数"></a>4.1 命令和参数</h5><p><code>netstat</code>命令是查看网络状态,常用参数列表如下:</p><table><thead><tr><th>参数名</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有正在或不在侦听的套接字。</td></tr><tr><td>-n</td><td>显示数字形式地址而不是去解析主机、端口或用户名。</td></tr><tr><td>-p</td><td>显示套接字所属进程的PID和名称。</td></tr></tbody></table><p>常用: <code>netstat -anp</code></p><h5 id="4-2-查询结果的解释"><a href="#4-2-查询结果的解释" class="headerlink" title="4.2 查询结果的解释"></a>4.2 查询结果的解释</h5><p>netstat命令显示的网络状态信息包含两部分内容：</p><ul><li><p>本机和外部的连接状态信息(重点)</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_009.png"></p></li></ul><ul><li><p>本机系统内部进程间通信信息(了解)</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_010.png"></p></li></ul><h5 id="4-3-使用技巧"><a href="#4-3-使用技巧" class="headerlink" title="4.3 使用技巧"></a>4.3 使用技巧</h5><h5 id="4-3-1-分屏查看网络状态"><a href="#4-3-1-分屏查看网络状态" class="headerlink" title="4.3.1 分屏查看网络状态"></a>4.3.1 分屏查看网络状态</h5><p><code>netstat -anp | less</code></p><h5 id="4-3-2-根据进程名称查看网络状态"><a href="#4-3-2-根据进程名称查看网络状态" class="headerlink" title="4.3.2 根据进程名称查看网络状态"></a>4.3.2 根据进程名称查看网络状态</h5><p><code>netstat -anp | grep sshd</code></p><h5 id="4-3-3-根据端口号查看网络状态"><a href="#4-3-3-根据端口号查看网络状态" class="headerlink" title="4.3.3 根据端口号查看网络状态"></a>4.3.3 根据端口号查看网络状态</h5><p><code>netstat -anp | grep :22</code></p><p>这里需要注意一下，端口号本身就是一串数字，进程id也是一串数字。那么根据端口号匹配时，很多无关的进程id也会被匹配到，造成大量不必要的干扰。此时给端口号数字前加上冒号就好多了。 </p><h3 id="第二节-字符串处理的命令-了解"><a href="#第二节-字符串处理的命令-了解" class="headerlink" title="第二节 字符串处理的命令(了解)"></a>第二节 字符串处理的命令(了解)</h3><h4 id="1-basename"><a href="#1-basename" class="headerlink" title="1. basename"></a>1. basename</h4><p>返回路径字符串中的资源（文件或目录本身）部分 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_011.png"></p><p>如果指定了后缀，basename会帮我们把后缀部分也去掉 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_012.png"></p><h4 id="2-dirname"><a href="#2-dirname" class="headerlink" title="2. dirname"></a>2. dirname</h4><p>返回路径字符串中的目录部分 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_013.png"></p><p>注意: 这里dd是文件</p><h4 id="3-cut"><a href="#3-cut" class="headerlink" title="3. cut"></a>3. cut</h4><p>根据指定符号拆分字符串并提取。默认根据 \t 拆分。</p><ul><li>-f 参数：指定要提取的列</li><li>-d 参数：指定拆分依据的字符</li></ul><p>准备测试数据： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_014.png"></p><p>切割提取第一列： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_015.png"></p><p>切割提取第二、第三列： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_016.png"></p><p>选取系统 PATH 变量值，第2个 “:” 开始后的所有路径： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_017.png"></p><p>切割ifconfig 后打印的IP地址： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_018.png"></p><p>另一种做法： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_019.png"></p><h4 id="4-sort"><a href="#4-sort" class="headerlink" title="4. sort"></a>4. sort</h4><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p><table><thead><tr><th>参数名</th><th>作用</th></tr></thead><tbody><tr><td>-n</td><td>依照数值大小排序</td></tr><tr><td>-r</td><td>相反顺序排序</td></tr><tr><td>-t</td><td>设置排序时使用的分隔字符</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr></tbody></table><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_020.png"></p><h2 id="第二章-Linux权限管理"><a href="#第二章-Linux权限管理" class="headerlink" title="第二章 Linux权限管理"></a>第二章 Linux权限管理</h2><h3 id="第一节-权限管理中的专业术语"><a href="#第一节-权限管理中的专业术语" class="headerlink" title="第一节 权限管理中的专业术语"></a>第一节 权限管理中的专业术语</h3><h4 id="1-用户"><a href="#1-用户" class="headerlink" title="1. 用户"></a>1. 用户</h4><p>系统使用者登录系统时使用的账号、密码。系统通过“用户”来识别使用者的身份。使用者以“用户”的名义操作系统资源。 </p><h4 id="2-登录"><a href="#2-登录" class="headerlink" title="2. 登录"></a>2. 登录</h4><p>使用者想要让系统认可自己的身份就必须提供账号、密码等信息。更专业的说法是：“认证（authentication）”。 </p><h4 id="3-资源"><a href="#3-资源" class="headerlink" title="3. 资源"></a>3. 资源</h4><p>权限控制系统要保护的对象。权限控制系统中必须要保存每一个资源所要求的访问权限。哪怕是“不需要任何权限，任何人都可以使用”也是权限信息的一种描述——没有要求也是一种要求。 </p><h4 id="4-授权"><a href="#4-授权" class="headerlink" title="4. 授权"></a>4. 授权</h4><p>authorization，系统给用户分配权限。这些权限代表了用户可以做什么。 </p><h4 id="5-校验"><a href="#5-校验" class="headerlink" title="5. 校验"></a>5. 校验</h4><p>一个用户访问一个资源的时候，权限控制系统必须要检查这个用户持有的权限是否满足目标资源所要求的权限。 </p><h4 id="6-用户组"><a href="#6-用户组" class="headerlink" title="6. 用户组"></a>6. 用户组</h4><p>同一类的用户归到同一个组，也可以叫做角色。 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_021.png"></p><h3 id="第二节-创建用户和用户组的基本命令"><a href="#第二节-创建用户和用户组的基本命令" class="headerlink" title="第二节 创建用户和用户组的基本命令"></a>第二节 创建用户和用户组的基本命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>groupadd 组名</td><td>创建用户组</td></tr><tr><td>id 用户名</td><td>返回用户信息，检查用户是否存在</td></tr><tr><td>useradd -g 组名 用户名</td><td>创建用户，同时指定所属用户组</td></tr><tr><td>passwd 用户名</td><td>给用户账号设置密码</td></tr></tbody></table><h3 id="第三节-文件权限"><a href="#第三节-文件权限" class="headerlink" title="第三节 文件权限"></a>第三节 文件权限</h3><h4 id="1-文件权限信息说明"><a href="#1-文件权限信息说明" class="headerlink" title="1. 文件权限信息说明"></a>1. 文件权限信息说明</h4><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_022.png"></p><p>权限信息共分三组，每组三位： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_023.png"></p><p>下面介绍rwx-分别是什么意思：</p><ul><li><p>r：读（read）</p><ul><li><p>读文件：查看文件内容</p><p>例如：cat、less、tail等命令</p></li><li><p>读目录：查看目录内容</p><p>例如：使用ll命令查看目录内容</p></li></ul></li><li><p>w：写（write）</p><ul><li><p>写文件：向文件中写入新内容</p></li><li><p>写目录：在目录里面增删内容</p><p>例如：在目录内新建文件、删除文件、新建目录、删除目录给目录重命名</p></li></ul></li><li><p>x：执行（execute）</p><ul><li>执行文件：把文件当作可执行文件来运行</li><li>执行目录：使用cd命令进入目录</li></ul></li><li><p>-：无权限</p></li></ul><p>由于每一位要么有权限要么没有权限，所以天然可以使用二进制来表示权限信息：</p><ul><li>1：有</li><li>0：无</li></ul><table><thead><tr><th>权限的符号表示</th><th>权限的二进制表示</th><th>权限的十进制表示</th></tr></thead><tbody><tr><td>rwx r-x r-x</td><td>111 101 101</td><td>7 5 5</td></tr><tr><td>rw- r– r–</td><td>110 100 100</td><td>6 4 4</td></tr></tbody></table><h4 id="2-修改文件权限"><a href="#2-修改文件权限" class="headerlink" title="2. 修改文件权限"></a>2. 修改文件权限</h4><h5 id="2-1-命令介绍"><a href="#2-1-命令介绍" class="headerlink" title="2.1 命令介绍"></a>2.1 命令介绍</h5><table><thead><tr><th>命令名</th><th>作用</th></tr></thead><tbody><tr><td>chmod</td><td>修改权限信息</td></tr><tr><td>chown</td><td>修改文件或目录的所属用户</td></tr><tr><td>chgrp</td><td>修改文件或目录的所属用户组</td></tr></tbody></table><h5 id="2-2-演示chmod命令"><a href="#2-2-演示chmod命令" class="headerlink" title="2.2 演示chmod命令"></a>2.2 演示chmod命令</h5><h6 id="2-2-1-修改权限信息前"><a href="#2-2-1-修改权限信息前" class="headerlink" title="2.2.1 修改权限信息前"></a>2.2.1 修改权限信息前</h6><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_024.png"></p><h6 id="2-2-2-添加权限"><a href="#2-2-2-添加权限" class="headerlink" title="2.2.2 添加权限"></a>2.2.2 添加权限</h6><p>增加执行权限 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">chmod +x fruit/<span class="hljs-attribute">content</span><br></code></pre></td></tr></table></figure><p>添加权限信息后</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_025.png"></p><h6 id="2-2-3-删除权限"><a href="#2-2-3-删除权限" class="headerlink" title="2.2.3 删除权限"></a>2.2.3 删除权限</h6><p>删除执行权限 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">chmod -x fruit/<span class="hljs-attribute">content</span><br></code></pre></td></tr></table></figure><p>删除权限信息后</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_026.png"></p><h6 id="2-2-4-修改权限"><a href="#2-2-4-修改权限" class="headerlink" title="2.2.4 修改权限"></a>2.2.4 修改权限</h6><p>方法1: <code>chmod 三位数字</code></p><p>这三位数字分别表示: 拥有者的权限、同组用户的权限、其它用户的权限</p><p><code>r</code>：是4； <code>w</code>：是2；<code>x</code>：是1</p><p>例如<code>chmod 755 fruit/content </code>表示将权限设置为:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_027.png"></p><p>方法2: <code>chmod u=rwx,g=rx,o=rx</code>，其中u表示拥有者，g表示同组用户，o表示其它用户</p><h3 id="第四节-提升普通用户的权限"><a href="#第四节-提升普通用户的权限" class="headerlink" title="第四节 提升普通用户的权限"></a>第四节 提升普通用户的权限</h3><p>在公司参与开发的过程中，通常我们不会拿到服务器系统的 root 权限，而是普通用户权限。但是普通用户很多操作无法执行。比如在 /opt 目录下新建目录: </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_028.png"></p><p>提升普通用户的权限其实就是赋予普通用户那些超级管理员才有的权限，我们需要在 /etc/sudoers文件中 进行配置,但是注意sudoers文件默认是只读的，我们要修改它的权限，修改成root可以编辑<code>chmod 644 /etc/sudoers</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">## Allow root <span class="hljs-keyword">to</span> run <span class="hljs-keyword">any</span> commands anywhere <br>root    <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span><br>luozhixiang <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   <span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><p>不需要重启系统，我们再次测试:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_029.png"></p><p>但此时我们发现，每次使用<code>sudo</code>都需要输入密码，很麻烦，所以我们可以在<code>/etc/sudoers</code>中进行配置</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">luozhixiang <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   NOPASSWD:<span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><p>这样再使用sudo命令就不需要输入密码了 </p><p>这里有两点需要注意：</p><ul><li>在同一次登录中，即使不加NOPASSWD也只需要输入一次密码，所以NOPASSWD是否生效需要退出登录后再重新登录来测试。</li><li>使用sudo提权后创建的目录仍然是root root权限，如果有需要那就还要使用chown或chgrp来修改。</li></ul><h2 id="第三章-Linux系统的服务管理"><a href="#第三章-Linux系统的服务管理" class="headerlink" title="第三章 Linux系统的服务管理"></a>第三章 Linux系统的服务管理</h2><h3 id="第一节-服务的概念"><a href="#第一节-服务的概念" class="headerlink" title="第一节 服务的概念"></a>第一节 服务的概念</h3><p>操作系统中在后台持续运行的程序，本身并没有操作界面，需要通过端口号访问和操作。CentOS 6和CentOS 7的服务管理有很大区别，我们分别来看。</p><h3 id="第二节-CentOS6的服务-了解"><a href="#第二节-CentOS6的服务-了解" class="headerlink" title="第二节 CentOS6的服务(了解)"></a>第二节 CentOS6的服务(了解)</h3><h4 id="1-service命令"><a href="#1-service命令" class="headerlink" title="1. service命令"></a>1. service命令</h4><p>启动服务：service 服务名 start</p><p>停止服务：service 服务名 stop</p><p>重启服务：service 服务名 restart</p><p>重新加载服务：service 服务名 reload</p><p>查看服务状态：service 服务名 status</p><h4 id="2-chkconfig命令"><a href="#2-chkconfig命令" class="headerlink" title="2. chkconfig命令"></a>2. chkconfig命令</h4><p>查看服务列表：chkconfig [–list]</p><p>设置具体服务开机自动启动状态：chkconfig 服务名 on/off</p><h4 id="3-防火墙"><a href="#3-防火墙" class="headerlink" title="3. 防火墙"></a>3. 防火墙</h4><p>防火墙默认会阻止绝大部分端口号的访问，在实际生产环境下，运维工程师需要为服务器设置详细的访问规则。在练习过程中，我们为了方便建议把防火墙直接关闭。由于防火墙服务默认开机自动启动，所以除了<strong>停止服务</strong>，还要设置为<strong>开机不自动启动</strong>。</p><p>服务名：iptables</p><p>停止防火墙：service iptables stop</p><p>设置开机不自动启动：chkconfig iptables off</p><h3 id="第三节-CentOS7的服务"><a href="#第三节-CentOS7的服务" class="headerlink" title="第三节 CentOS7的服务"></a>第三节 CentOS7的服务</h3><h4 id="1-systemctl命令"><a href="#1-systemctl命令" class="headerlink" title="1. systemctl命令"></a>1. systemctl命令</h4><p>启动服务：systemctl start 服务名(xxxx.service)</p><p>重启服务：systemctl restart 服务名(xxxx.service)</p><p>停止服务：systemctl stop 服务名(xxxx.service)</p><p>重新加载服务：systemctl reload 服务名(xxxx.service)</p><p>查看服务状态：systemctl status 服务名(xxxx.service)</p><h3 id="2-systemctl命令代替chkconfig命令"><a href="#2-systemctl命令代替chkconfig命令" class="headerlink" title="2. systemctl命令代替chkconfig命令"></a>2. systemctl命令代替chkconfig命令</h3><p>查看服务状态：systemctl list-unit-files</p><p>设置或取消服务开机自动启动：</p><ul><li><p>设置开机自动启动：systemctl enable 服务名</p></li><li><p>取消开机自动启动：systemctl disable 服务名</p></li></ul><h4 id="3-防火墙的操作"><a href="#3-防火墙的操作" class="headerlink" title="3. 防火墙的操作"></a>3. 防火墙的操作</h4><ul><li>开启防火墙 <code>systemctl start firewalld</code></li><li>重启防火墙 <code>systemctl restart firewalld</code></li><li>关闭防火墙<code>systemctl stop firewalld</code></li><li>设置开机启动<code>systemctl enable firewalld</code></li><li>停止并关闭开机启动<code>systemctl disable firewalld</code></li><li>查看防火墙状态<code>systemctl status firewalld</code> 或者 <code>firewall-cmd --state</code></li><li>查看防火墙开机时是否启动<code>systemctl list-unit-files | grep firewalld</code></li></ul><h4 id="4-防火墙端口设置"><a href="#4-防火墙端口设置" class="headerlink" title="4. 防火墙端口设置"></a>4. 防火墙端口设置</h4><ul><li><p>开放端口   <code>firewall-cmd --add-port=端口号/tcp --permanent</code></p></li><li><p>更新防火墙规则<code>firewall-cmd --reload</code></p></li><li><p>查看</p><p><code>firewall-cmd --zone=public --query-port=端口号/tcp</code><br><code>firewall-cmd --zone=public --list-ports</code></p></li><li><p>取消端口开放  <code>firewall-cmd --remove-port=端口/tcp --permanent</code></p></li><li><p>常用端口</p><ul><li>8080 tomcat</li><li>80 http协议</li><li>443 https协议</li><li>22 ssh远程连接</li><li>3306 mysql</li><li>6379 redis</li></ul></li></ul><h2 id="第四章-Linux下的Shell脚本开发"><a href="#第四章-Linux下的Shell脚本开发" class="headerlink" title="第四章 Linux下的Shell脚本开发"></a>第四章 Linux下的Shell脚本开发</h2><h3 id="第一节-Shell编程概述"><a href="#第一节-Shell编程概述" class="headerlink" title="第一节 Shell编程概述"></a>第一节 Shell编程概述</h3><p>Shell是一个命令行解释器，它接收应用程序或用户的命令，然后调用操作系统内核。 它是一个功能强大的编程语言，易编写、易调试、灵活性强 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_030.png"></p><h3 id="第二节-Linux系统提供的Shell解析器"><a href="#第二节-Linux系统提供的Shell解析器" class="headerlink" title="第二节 Linux系统提供的Shell解析器"></a>第二节 Linux系统提供的Shell解析器</h3><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_031.png"></p><p>其中最常用的是 /bin/sh 和 /bin/bash</p><h4 id="1-bash-和-sh-的关系"><a href="#1-bash-和-sh-的关系" class="headerlink" title="1. bash 和 sh 的关系"></a>1. bash 和 sh 的关系</h4><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_032.png"></p><p>sh是bash的软链接 ,Linux默认使用的是bash</p><h3 id="第三节-Shell编程入门"><a href="#第三节-Shell编程入门" class="headerlink" title="第三节 Shell编程入门"></a>第三节 Shell编程入门</h3><h4 id="1-创建脚本文件"><a href="#1-创建脚本文件" class="headerlink" title="1. 创建脚本文件"></a>1. 创建脚本文件</h4><p>使用<code>touch</code>命令创建脚本文件, 通常以.sh作为扩展名 </p><h4 id="2-编写脚本内容"><a href="#2-编写脚本内容" class="headerlink" title="2. 编写脚本内容"></a>2. 编写脚本内容</h4><p>第一行通常指定脚本解析器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;hello world&quot;<br></code></pre></td></tr></table></figure><h4 id="3-脚本文件的运行方式"><a href="#3-脚本文件的运行方式" class="headerlink" title="3. 脚本文件的运行方式"></a>3. 脚本文件的运行方式</h4><table><thead><tr><th>命令名</th><th>在当前进程运行</th><th>新建子进程运行</th></tr></thead><tbody><tr><td>source</td><td>√</td><td></td></tr><tr><td>.</td><td>√</td><td></td></tr><tr><td>sh</td><td></td><td>√</td></tr><tr><td>bash</td><td></td><td>√</td></tr><tr><td>chmod +x后直接运行</td><td></td><td>√</td></tr></tbody></table><p>其中“.”是source的另一种写法。在当前进程中发布的全局变量可以在当前进程的其他脚本中继续沿用，也可以在子进程中使用；但是子进程export发布的变量仅限于子进程内部使用。</p><h3 id="第四节-Shell的语法"><a href="#第四节-Shell的语法" class="headerlink" title="第四节 Shell的语法"></a>第四节 Shell的语法</h3><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h4><h5 id="1-1-系统预定义变量"><a href="#1-1-系统预定义变量" class="headerlink" title="1.1 系统预定义变量"></a>1.1 系统预定义变量</h5><p>常用系统变量包括：<code>$USER</code>、<code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>等，可以使用echo命令输出它们的值。使用<code>set</code>命令可以查看所有系统预定义变量</p><h5 id="1-2-自定义变量"><a href="#1-2-自定义变量" class="headerlink" title="1.2 自定义变量"></a>1.2 自定义变量</h5><h6 id="1-2-1-定义变量"><a href="#1-2-1-定义变量" class="headerlink" title="1.2.1 定义变量"></a>1.2.1 定义变量</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">USER_NAME=tom<br></code></pre></td></tr></table></figure><h6 id="1-2-2-输出变量"><a href="#1-2-2-输出变量" class="headerlink" title="1.2.2 输出变量"></a>1.2.2 输出变量</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $USER_NAME<br></code></pre></td></tr></table></figure><h6 id="1-2-3-撤销变量"><a href="#1-2-3-撤销变量" class="headerlink" title="1.2.3 撤销变量"></a>1.2.3 撤销变量</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset USER_NAME<br></code></pre></td></tr></table></figure><h6 id="1-2-4-定义静态变量"><a href="#1-2-4-定义静态变量" class="headerlink" title="1.2.4 定义静态变量"></a>1.2.4 定义静态变量</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">readonly COMPANY_NAME=atguigu<br></code></pre></td></tr></table></figure><p>静态变量不能撤销，也不能修改</p><h6 id="1-2-5-语法规则"><a href="#1-2-5-语法规则" class="headerlink" title="1.2.5 语法规则"></a>1.2.5 语法规则</h6><ul><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</li><li>等号两侧不能有空格，衍生规则就是变量声明时必须初始化</li><li>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。</li><li>变量的值如果有空格，需要使用双引号或单引号括起来。</li><li>变量名区分大小写。</li></ul><h5 id="1-3-特殊变量"><a href="#1-3-特殊变量" class="headerlink" title="1.3 特殊变量"></a>1.3 特殊变量</h5><h6 id="1-3-1-n"><a href="#1-3-1-n" class="headerlink" title="1.3.1 $n"></a>1.3.1 $n</h6><p>n是数字，$0代表当前脚本名称。从$1开始代表对应的脚本参数。从${10}开始数字需要使用{}括起来。 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_034.png"></p><h6 id="1-3-2"><a href="#1-3-2" class="headerlink" title="1.3.2 $#"></a>1.3.2 $#</h6><p>返回输入参数的个数 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_035.png"></p><h6 id="1-3-3-和"><a href="#1-3-3-和" class="headerlink" title="1.3.3 $*和$@"></a>1.3.3 $*和$@</h6><p>都能够返回全部参数，但是只有在循环中且放在引号中能够体现出它们的区别。 </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_036.png"></p><h6 id="1-3-4"><a href="#1-3-4" class="headerlink" title="1.3.4 $?"></a>1.3.4 $?</h6><p>返回上一条命令的执行结果。</p><ul><li>条件判断语句<ul><li>返回 0 表示 true</li><li>返回 1 表示 false</li></ul></li><li>普通语句<ul><li>返回 0 表示成功</li><li>返回非 0 数表示失败</li></ul></li></ul><h4 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h4><p>Shell的运算表达式的语法如下:  <code>$((表达式))</code>或<code>$[表达式] </code></p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_037.png"></p><h4 id="3-条件判断"><a href="#3-条件判断" class="headerlink" title="3. 条件判断"></a>3. 条件判断</h4><h5 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h5><ul><li>写法1：test condition</li><li>写法2：[ condition ]<ul><li>注意 condition 前后有空格</li><li>空字符串视为 false，非空字符串视为 true</li></ul></li></ul><h5 id="3-2-常用判断条件"><a href="#3-2-常用判断条件" class="headerlink" title="3.2 常用判断条件"></a>3.2 常用判断条件</h5><table><thead><tr><th>数据类型</th><th>写法</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td>数值</td><td>-lt</td><td>less than</td><td>小于</td></tr><tr><td>数值</td><td>-le</td><td>less equal</td><td>小于等于</td></tr><tr><td>数值</td><td>-eq</td><td>equal</td><td>等于</td></tr><tr><td>数值</td><td>-gt</td><td>greater than</td><td>大于</td></tr><tr><td>数值</td><td>-ge</td><td>greater equal</td><td>大于等于</td></tr><tr><td>数值</td><td>-ne</td><td>not equal</td><td>不等于</td></tr><tr><td>文件</td><td>-r</td><td>read</td><td>判断当前用户是否可以读取该文件</td></tr><tr><td>文件</td><td>-w</td><td>write</td><td>判断当前用户是否可以修改该文件</td></tr><tr><td>文件</td><td>-x</td><td>execute</td><td>判断当前用户对该文件是否有执行权限</td></tr><tr><td>文件</td><td>-f</td><td>file</td><td>判断当前文件是否存在并且是一个常规的文件</td></tr><tr><td>文件</td><td>-e</td><td>existence</td><td>判断文件是否存在</td></tr><tr><td>文件</td><td>-d</td><td>directory</td><td>判断是否存在并且是一个目录</td></tr></tbody></table><p>可以参考下面例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 条件判断表达式写法一：<span class="hljs-built_in">test</span></span><br>test 10 -gt 7<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用$?获取上一条语句的执行结果</span><br>echo $?<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用$?获取上一条语句的执行结果</span><br>test 10 -lt 7<br>echo $?<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 条件判断表达式写法二：[ condition ]</span><br><span class="hljs-meta">#</span><span class="bash"> 注意：condition两边要有空格</span><br>[ 10 -gt 7 ]<br>echo $?<br><br>[ 10 -lt 7 ]<br>echo $?<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 专门针对文件进行操作的运算符</span><br>[ -e aaa.txt ]<br>echo $?<br><br>[ -r aaa.txt ]<br>echo $?<br><br>[ -w aaa.txt ]<br>echo $?<br></code></pre></td></tr></table></figure><h4 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h4><h5 id="4-1-三元运算"><a href="#4-1-三元运算" class="headerlink" title="4.1 三元运算"></a>4.1 三元运算</h5><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_038.png"></p><h5 id="4-2-if判断"><a href="#4-2-if判断" class="headerlink" title="4.2 if判断"></a>4.2 if判断</h5><h6 id="4-2-1-单if"><a href="#4-2-1-单if" class="headerlink" title="4.2.1 单if"></a>4.2.1 单if</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 10 -gt 5 ]<br>then<br>echo &quot;10大于5&quot;<br>fi<br></code></pre></td></tr></table></figure><h6 id="4-2-2-if…else…"><a href="#4-2-2-if…else…" class="headerlink" title="4.2.2 if…else…"></a>4.2.2 if…else…</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 10 -gt 5 ]<br>then<br>echo &quot;10大于5&quot;<br>else<br>echo &quot;10小于5&quot;<br>fi<br></code></pre></td></tr></table></figure><h6 id="4-2-3-if…elif…"><a href="#4-2-3-if…elif…" class="headerlink" title="4.2.3 if…elif…"></a>4.2.3 if…elif…</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 10 -gt 5 ]<br>then<br>echo &quot;10大于5&quot;<br>elif [ 10 -lt 5 ]<br>then<br>echo &quot;10小于5&quot;<br>else<br>echo &quot;10等于5&quot;<br>fi<br></code></pre></td></tr></table></figure><h5 id="4-3-case判断"><a href="#4-3-case判断" class="headerlink" title="4.3 case判断"></a>4.3 case判断</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">AGE=10<br>case $AGE in<br>&quot;10&quot;)<br>echo 10<br>;;<br>&quot;20&quot;)<br>echo 20<br>;;<br>*)<br>echo other<br>;;<br>esac<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_039.png"></p><h5 id="4-4-for循环"><a href="#4-4-for循环" class="headerlink" title="4.4 for循环"></a>4.4 for循环</h5><p>简单for循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for (( i=1;i&lt;=10;i++ ))<br>do<br>echo $i<br>done<br></code></pre></td></tr></table></figure><p>从外部传入循环长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> 如果需要使用外部数据，则需要把外部数据赋值给一个变量，不能在<span class="hljs-keyword">for</span>语句中直接使用</span><br>len=$1<br><br>for (( i=1;i&lt;=len;i++ ))<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 从<span class="hljs-keyword">do</span>关键字开始是循环体开始</span><br>do<br><br>echo $i;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 到<span class="hljs-keyword">done</span>关键字为止是循环体结束</span><br>done<br></code></pre></td></tr></table></figure><h5 id="4-5-for-in循环"><a href="#4-5-for-in循环" class="headerlink" title="4.5 for in循环"></a>4.5 for in循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in $*<br>do<br>echo $i<br>done<br></code></pre></td></tr></table></figure><p>没有引号的时候$*和$@一样，加了引号就有区别 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &quot;$*&quot;<br>do<br>echo $i<br>done<br></code></pre></td></tr></table></figure><p>上面代码输出的结果是： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_040.png"></p><p>“$*”不换行，”$@”有换行。</p><h5 id="4-6-while循环"><a href="#4-6-while循环" class="headerlink" title="4.6 while循环"></a>4.6 while循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">sum=0<br>start=1<br>while [ $start -le 100 ]<br>do<br><span class="hljs-meta">#</span><span class="bash"> 累加</span><br>sum=$[$sum+$start]<br><span class="hljs-meta">#</span><span class="bash"> start的值自增1</span><br>start=$[$start+1]<br>done<br>echo $sum<br></code></pre></td></tr></table></figure><h4 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h4><p>Shell 编程中的函数和我们以前熟悉的函数最大的区别是：Shell 编程中要求函数的返回值只能是整数。并且只能通过 $? 方式获得。可以显示加：return 返回，如果不加，将以最后一条命令运行结果(这个运算结果可以表示true或者false，以及执行成功或者执行失败)，作为返回值。return 后跟数值 n(0-255)。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> 声明函数</span><br>function sum()&#123;<br><span class="hljs-meta">#</span><span class="bash"> 使用<span class="hljs-variable">$1</span>、<span class="hljs-variable">$2</span>引用函数传入的参数</span><br>return $[$1+$2]<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 调用函数，传入参数</span><br>sum 10 20<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用$?获取函数执行结果</span><br>echo &quot;sum 10 20执行的结果是$?&quot;<br></code></pre></td></tr></table></figure><h4 id="6-获取脚本外部数据"><a href="#6-获取脚本外部数据" class="headerlink" title="6. 获取脚本外部数据"></a>6. 获取脚本外部数据</h4><h5 id="6-1-获取参数"><a href="#6-1-获取参数" class="headerlink" title="6.1 获取参数"></a>6.1 获取参数</h5><p>这个前面说过了，通过$1、$2、……方式获取，从${10}开始需要使用大括号。 </p><h5 id="6-2-使用read读取用户输入"><a href="#6-2-使用read读取用户输入" class="headerlink" title="6.2 使用read读取用户输入"></a>6.2 使用read读取用户输入</h5><p>read命令有两个常用参数</p><ul><li>-t用于指定输入等待时间，单位是秒</li><li>-p用于指定提示文字</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">read -t 10 -p &quot;please enter:&quot; NAME<br>echo $NAME<br></code></pre></td></tr></table></figure><h2 id="第五章-服务器端应用程序的安装"><a href="#第五章-服务器端应用程序的安装" class="headerlink" title="第五章 服务器端应用程序的安装"></a>第五章 服务器端应用程序的安装</h2><h3 id="第一节-备份配置文件"><a href="#第一节-备份配置文件" class="headerlink" title="第一节 备份配置文件"></a>第一节 备份配置文件</h3><p>Linux 系统环境下配置文件通常内容很多。如果不小心修改了不该修改的地方，自己有不记得做了修改，那么将来报错很难找到错误位置。</p><p>为了避免这样的问题，我们可以在修改任何配置文件之前都多复制一份：把原始、纯净、正确的配置文件执行了备份。将来万一发生问题，拿原始配置文件覆盖错误配置文件，瞬间恢复到正确状态可以重新开始。</p><h3 id="第二节-快照备份虚拟机"><a href="#第二节-快照备份虚拟机" class="headerlink" title="第二节 快照备份虚拟机"></a>第二节 快照备份虚拟机</h3><h4 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h4><h5 id="1-1-场景一"><a href="#1-1-场景一" class="headerlink" title="1.1 场景一"></a>1.1 场景一</h5><p>针对需要通过安装过程来安装的程序，如果安装失败需要卸载后重新安装，那最好是卸载干净再重新执行安装。Linux 环境下不方便执行『清理残留』。</p><p>所以为了避免安装失败以后没有退路可以重新开始，建议在执行相关安装之前拍摄快照。一旦发生问题，可以恢复快照重新开始。</p><h5 id="1-2-场景二"><a href="#1-2-场景二" class="headerlink" title="1.2 场景二"></a>1.2 场景二</h5><p>对于已经安装好的程序（特别是系统当中安装了很多程序都已成功），强烈建议通过拍摄快照的方式保留这个正确的状态。 </p><h4 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h4><h5 id="2-1-保存快照"><a href="#2-1-保存快照" class="headerlink" title="2.1 保存快照"></a>2.1 保存快照</h5><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_041.png"></p><p>给快照文件命名:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_042.png"></p><h5 id="2-2-恢复快照"><a href="#2-2-恢复快照" class="headerlink" title="2.2 恢复快照"></a>2.2 恢复快照</h5><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_043.png"></p><h5 id="2-3-删除快照"><a href="#2-3-删除快照" class="headerlink" title="2.3 删除快照"></a>2.3 删除快照</h5><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_044.png"></p><h3 id="第三节-安装JDK"><a href="#第三节-安装JDK" class="headerlink" title="第三节 安装JDK"></a>第三节 安装JDK</h3><h4 id="1-rpm命令"><a href="#1-rpm命令" class="headerlink" title="1. rpm命令"></a>1. rpm命令</h4><p>rpm 是 Redhat package management 的缩写，实质上来说，通过 rpm 可以管理 Linux 环境下的安装包。 </p><table><thead><tr><th>参数名</th><th>作用</th></tr></thead><tbody><tr><td>-qa</td><td>查询系统中已经安装的程序，通常配合管道，使用 grep 精确匹配想要查询的包</td></tr><tr><td>-ivh</td><td>执行 rpm 包安装操作</td></tr><tr><td>-e</td><td>卸载 rpm 包</td></tr><tr><td>–nodeps</td><td>在卸载过程中忽略依赖关系</td></tr></tbody></table><p>注：Linux 系统中命令的参数往往有这样的特点：</p><ul><li>参数如果是一个或多个完整的单词那么前面是两个“-”</li><li>参数如果是单词的缩写，是一个字母，那么前面是一个“-”</li></ul><h4 id="2-具体安装步骤"><a href="#2-具体安装步骤" class="headerlink" title="2. 具体安装步骤"></a>2. 具体安装步骤</h4><h5 id="2-1-卸载系统预装的JDK"><a href="#2-1-卸载系统预装的JDK" class="headerlink" title="2.1 卸载系统预装的JDK"></a>2.1 卸载系统预装的JDK</h5><ol><li> 查询系统中已经安装的 JDK </li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">rpm -qa | grep openjdk<br></code></pre></td></tr></table></figure><ol start="2"><li> 执行卸载，卸载过程中使用 –nodeps 忽略依赖关系 </li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -e --nodeps 第一步查询出来的数据，如果是多个则用空格分隔<br></code></pre></td></tr></table></figure><ol start="3"><li> 重启系统生效(一般不需要)</li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><h5 id="2-2-安装JDK"><a href="#2-2-安装JDK" class="headerlink" title="2.2 安装JDK"></a>2.2 安装JDK</h5><ol><li><p>使用xftp将资料中的jdk的压缩包传输到虚拟机的<code>/opt</code>目录中</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_045.png"></p></li><li><p>解压jdk压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt<br>tar -zxvf jdk-8u152-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>配置JDK的环境变量</p><p>为了避免配置错误导致运行失败，提前复制一份/etc/profile </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /etc/profile /etc/profile.bak<br></code></pre></td></tr></table></figure><p>编辑 /etc/profile 文件（下面内容添加到文件末尾）： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 声明 JAVA_HOME 环境变量，等号两边不能有空格</span><br>JAVA_HOME=/opt/jdk1.8.0_152<br>   <br><span class="hljs-meta">#</span><span class="bash"> 给 PATH 环境变量附加 <span class="hljs-variable">$JAVA_HOME</span>/bin 部分</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-variable">$PATH</span> 表示引用 PATH 环境变量以前的旧值</span><br><span class="hljs-meta">#</span><span class="bash"> 使用英文冒号连接</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-variable">$JAVA_HOME</span> 表示对 JAVA_HOME 变量的引用</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-variable">$JAVA_HOME</span>/bin 表示指向可执行文件</span><br>PATH=$JAVA_HOME/bin:$PATH<br>   <br><span class="hljs-meta">#</span><span class="bash"> 发布</span><br><span class="hljs-meta">#</span><span class="bash"> 发布是发布变量名，不是引用变量的值，所以前面不写 $ 符号</span><br>export JAVA_HOME PATH<br></code></pre></td></tr></table></figure><p>保存退出vim后，使用source命令执行/etc/profile脚本，让脚本中发布的环境变量生效。但是仅限于当前进程，如果想让新环境变量全局生效，可以reboot。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>验证一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $JAVA_HOME<br>echo $PATH<br>java -version<br></code></pre></td></tr></table></figure></li></ol><h3 id="第四节-安装Tomcat"><a href="#第四节-安装Tomcat" class="headerlink" title="第四节 安装Tomcat"></a>第四节 安装Tomcat</h3><h4 id="1-具体安装步骤"><a href="#1-具体安装步骤" class="headerlink" title="1. 具体安装步骤"></a>1. 具体安装步骤</h4><ol><li><p>使用xftp将资料中的Tomcat的压缩包传输到虚拟机的<code>/opt</code>目录中</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_046.png"></p></li><li><p>解压Tomcat的压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt<br>tar -zxvf /opt/apache-tomcat-8.5.32.tar.gz<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-操作Tomcat"><a href="#2-操作Tomcat" class="headerlink" title="2. 操作Tomcat"></a>2. 操作Tomcat</h4><ol><li><p>启动 Tomcat </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/apache-tomcat-8.5.32/bin/startup.sh<br></code></pre></td></tr></table></figure></li><li><p>停止 Tomcat </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/apache-tomcat-8.5.32/bin/shutdown.sh<br></code></pre></td></tr></table></figure></li><li><p>查看日志 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -F /opt/apache-tomcat-8.5.32/logs/catalina.out<br></code></pre></td></tr></table></figure></li><li><p>部署 war 包放在 webapps 目录下 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/apache-tomcat-8.5.32/webapps<br></code></pre></td></tr></table></figure></li></ol><p>注意: </p><ul><li>在 Linux 系统本地使用火狐浏览器访问可以使用 localhost</li><li>在 Windows 系统访问 Linux 服务器端的 Tomcat 需要使用 LInux 的 IP 地址,并且要保证防火墙关闭，或者放行了8080端口</li></ul><p>开发阶段可以关闭防火墙，关闭防火墙的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><p>在开发阶段可以禁止防火墙开机自启动:<code>systemctl disable firewalld.service</code></p><p>让防火墙放行8080端口的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --add-port=8080/tcp --permanent<br><span class="hljs-meta">#</span><span class="bash"> 放行端口后一定要重新加载防火墙配置</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="第三节-安装MySQL-安装之前一定要快照"><a href="#第三节-安装MySQL-安装之前一定要快照" class="headerlink" title="第三节 安装MySQL(安装之前一定要快照)"></a>第三节 安装MySQL(安装之前一定要快照)</h3><h4 id="1-卸载系统预装-mariadb"><a href="#1-卸载系统预装-mariadb" class="headerlink" title="1. 卸载系统预装 mariadb"></a>1. 卸载系统预装 mariadb</h4><ol><li><p>查询系统中预装的mariadb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa | grep mariadb --color<br></code></pre></td></tr></table></figure></li><li><p>删除系统中预装的mariadb(如果第一步没查到就不删)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -e --nodeps 第一步查询到的结果<br></code></pre></td></tr></table></figure></li></ol><p>注：MySQL 被 Oracle 收购，社区担心将来 MySQL 被 Oracle 关闭开源模式，和 Oracle 数据库一样变成商业化运作。所以社区开发了一个 MySQL 的社区版，内部和 MySQL 一样，只是名字不同，这就是 mariadb。但是我们当前在 Linux 系统中已经预装的 mariadb 只是一个残片，不能直接使用。所以还是要先卸载。 </p><h4 id="2-具体安装步骤-1"><a href="#2-具体安装步骤-1" class="headerlink" title="2. 具体安装步骤"></a>2. 具体安装步骤</h4><h5 id="2-1-将mysql的压缩包拷贝到虚拟机中"><a href="#2-1-将mysql的压缩包拷贝到虚拟机中" class="headerlink" title="2.1 将mysql的压缩包拷贝到虚拟机中"></a>2.1 将mysql的压缩包拷贝到虚拟机中</h5><ol><li><p>在虚拟机中的<code>/usr/local</code>中创建一个<code>mysql</code>目录</p></li><li><p>使用xftp将mysql压缩包拷贝到<code>/usr/local/mysql</code>目录中</p><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_047.png"></p></li></ol><h5 id="2-2-解压MySQL的tar包"><a href="#2-2-解压MySQL的tar包" class="headerlink" title="2.2 解压MySQL的tar包"></a>2.2 解压MySQL的tar包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/mysql<br>tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2-3-安装MySQL-下述步骤依次执行"><a href="#2-3-安装MySQL-下述步骤依次执行" class="headerlink" title="2.3 安装MySQL,下述步骤依次执行"></a>2.3 安装MySQL,下述步骤依次执行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h5 id="2-4-修改MySQL的字符集配置"><a href="#2-4-修改MySQL的字符集配置" class="headerlink" title="2.4 修改MySQL的字符集配置"></a>2.4 修改MySQL的字符集配置</h5><p>MySql默认使用的字符集是latin1，即：iso-8859-1，是不支持中文的。</p><p>要想让MySql支持中文，需要通过配置文件设置指定MySql使用utf-8字符集才可以。</p><p>修改MySql的字符集：</p><p>使用vim打开mysql的配置文件：  vim /etc/my.cnf</p><p>进入编辑模式,在[mysqld]后边添加内容：<code>character-set-server=utf8</code></p><p>注意：别在 vim 的一般模式下直接粘贴！<strong>一定要进入编辑模式</strong>！ </p><h5 id="2-5-启动MySQL服务"><a href="#2-5-启动MySQL服务" class="headerlink" title="2.5 启动MySQL服务"></a>2.5 启动MySQL服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start mysqld<br></code></pre></td></tr></table></figure><h5 id="2-6-设置MySQL服务开机自启动"><a href="#2-6-设置MySQL服务开机自启动" class="headerlink" title="2.6 设置MySQL服务开机自启动"></a>2.6 设置MySQL服务开机自启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable mysqld<br></code></pre></td></tr></table></figure><h5 id="2-7-查看MySQL初始密码"><a href="#2-7-查看MySQL初始密码" class="headerlink" title="2.7 查看MySQL初始密码"></a>2.7 查看MySQL初始密码</h5><p>安装MySQL的过程中会自动生成初始密码，我们可以在<code>/var/log/mysqld.log</code>文件中进行查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /var/log/mysqld.log | grep &quot;temporary password&quot; --color<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_048.png"></p><h5 id="2-8-使用初始密码登录MySQL"><a href="#2-8-使用初始密码登录MySQL" class="headerlink" title="2.8 使用初始密码登录MySQL"></a>2.8 使用初始密码登录MySQL</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -uroot -p&quot;初始密码&quot;<br></code></pre></td></tr></table></figure><p>注意: p和初始密码之间千万不能空格</p><h5 id="2-9-修改root的密码"><a href="#2-9-修改root的密码" class="headerlink" title="2.9 修改root的密码"></a>2.9 修改root的密码</h5><p>在使用初始密码登录mysql之后，依次执行下面三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global validate_password_length=4;<br>set global validate_password_policy=LOW;<br>set password = password(&#x27;root&#x27;);<br></code></pre></td></tr></table></figure><p>第一次修改密码一定要按照上述三步来做，修改完之后你如果想将密码改成其它的密码，你可以在退出mysql之后执行（需要在未登录mysql的情况下执行）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysqladmin -uroot -p <span class="hljs-keyword">password</span> 新密码  <span class="hljs-comment">-- 新密码不需要加上引号</span><br></code></pre></td></tr></table></figure><h4 id="3-在宿主机上用SqlYog远程连接虚拟机上的MySQL"><a href="#3-在宿主机上用SqlYog远程连接虚拟机上的MySQL" class="headerlink" title="3. 在宿主机上用SqlYog远程连接虚拟机上的MySQL"></a>3. 在宿主机上用SqlYog远程连接虚拟机上的MySQL</h4><h5 id="3-1-会遇到的问题"><a href="#3-1-会遇到的问题" class="headerlink" title="3.1 会遇到的问题"></a>3.1 会遇到的问题</h5><h6 id="3-1-1-被防火墙拦截"><a href="#3-1-1-被防火墙拦截" class="headerlink" title="3.1.1 被防火墙拦截"></a>3.1.1 被防火墙拦截</h6><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_049.png"></p><p>解决方案是关闭防火墙或者是让防火墙放行<code>3306</code>端口</p><p>关闭防火墙命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><p>放行3306端口的操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --add-port=3306/tcp --permanent<br><span class="hljs-meta">#</span><span class="bash"> 放行端口后一定要重新加载防火墙配置</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h6 id="3-1-2-MySQL服务器不允许远程访问"><a href="#3-1-2-MySQL服务器不允许远程访问" class="headerlink" title="3.1.2 MySQL服务器不允许远程访问"></a>3.1.2 MySQL服务器不允许远程访问</h6><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_050.png"></p><p>解决方案是让<code>root</code>用户能够远程访问MySQL服务器:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 允许远程访问:创建一个新的root对象，并且指定这个root对象对所有数据库里面的所有表都有所有权限，并且指定这个root用户的密码是123456<br>grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br># 刷新设置<br>flush privileges;<br></code></pre></td></tr></table></figure><p>解决上述俩问题之后，就可以使用宿主机中的SQLYog远程连接访问虚拟机中的MySQL了</p><h2 id="第六章-VMWare软件联网原理说明与故障解决"><a href="#第六章-VMWare软件联网原理说明与故障解决" class="headerlink" title="第六章 VMWare软件联网原理说明与故障解决"></a>第六章 VMWare软件联网原理说明与故障解决</h2><h3 id="第一节-NAT的原理"><a href="#第一节-NAT的原理" class="headerlink" title="第一节 NAT的原理"></a>第一节 NAT的原理</h3><p><img src="http://www.slx.blue/2021/12/16/Linux-02/tu_051.png"></p><p>NAT模式，利用虚拟的NAT设备以及虚拟DHCP服务器来使虚拟机连接外网，而VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。 </p><h3 id="第二节-常见的问题"><a href="#第二节-常见的问题" class="headerlink" title="第二节 常见的问题"></a>第二节 常见的问题</h3><h4 id="1-Windows端虚拟网卡虚拟网络连接丢失"><a href="#1-Windows端虚拟网卡虚拟网络连接丢失" class="headerlink" title="1. Windows端虚拟网卡虚拟网络连接丢失"></a>1. Windows端虚拟网卡虚拟网络连接丢失</h4><p>也就是在你的网络连接中丢失了<code>VMware Network Adapter VMnet8</code>虚拟网卡</p><p>修复办法：</p><ul><li>首先将Linux系统关机。</li><li>打开“虚拟网络编辑器”</li><li>点击“还原默认设置”（不保证和之前是同一个网段，所以大概率IP地址网段会变）</li><li>如果修复了虚拟网卡和虚拟网络连接<ul><li>进入Linux系统修改IP地址，还是要求和虚拟网络编辑器中限定的网段一致</li></ul></li><li>如果没有修复成功尝试下面操作<ul><li>安装CCleaner软件</li><li>清理注册表</li></ul></li><li>重新进入“虚拟网络编辑器”执行“还原默认设置”</li><li>如果还没有解决，可以尝试卸载VMWare并清理残留重新安装VMWare</li><li>如果还不行，重装Windows系统</li></ul><h4 id="2-虚拟网络连接IP地址乱了"><a href="#2-虚拟网络连接IP地址乱了" class="headerlink" title="2. 虚拟网络连接IP地址乱了"></a>2. 虚拟网络连接IP地址乱了</h4><p>虚拟网卡还在，虚拟网络连接也在，但是和 NAT 方式对应的虚拟网络连接的 IP 不是 192.168.xxx.xxx 了，而是169.254.xxx.xxx。此时已经没法和 Linux 的 IP 保持同一个网段了。</p><p>此时唯一的办法：在虚拟网络编辑器中“还原默认设置”。让 VMWare 的虚拟网络编辑器重置网络连接。</p><h4 id="3-各方面正常就是连不上"><a href="#3-各方面正常就是连不上" class="headerlink" title="3. 各方面正常就是连不上"></a>3. 各方面正常就是连不上</h4><p>检查一下是不是 Windows 系统中 VMware 的服务没有启动，如果是就把服务启动起来。或虚拟机网卡使用的是仅主机模式，而 Linux 中 IP 地址使用的是 NAT 模式的网段。 </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-入门</title>
      <link href="/2021/12/16/Linux-01/"/>
      <url>/2021/12/16/Linux-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-day01"><a href="#Linux-day01" class="headerlink" title="Linux-day01"></a>Linux-day01</h1><h2 id="第一章-Linux的概述"><a href="#第一章-Linux的概述" class="headerlink" title="第一章 Linux的概述"></a>第一章 Linux的概述</h2><h3 id="第一节-Linux是什么"><a href="#第一节-Linux是什么" class="headerlink" title="第一节 Linux是什么"></a>第一节 Linux是什么</h3><p>Linux 英文解释为 Linux is not Unix</p><p>Linux是Linus Torvolds于1991年开发的一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。</p><p>(注：POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提供的接口标准)</p><p>Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。</p><p>Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>目前市面上较知名的发行版有：****Ubuntu*<em><strong>、RedHat、</strong></em>*CentOS****、Debain、Fedora、SuSE、OpenSUSE</p><h3 id="第二节-Linux的使用场景"><a href="#第二节-Linux的使用场景" class="headerlink" title="第二节 Linux的使用场景"></a>第二节 Linux的使用场景</h3><ol><li>作为服务器操作系统是目前Linux应用最广泛的领域</li><li>类似Windows作为桌面应用系统，新版本的Linux系统特别在桌面应用方面进行了改进，达到相当的水平，完全可以作为一种集办公应用、 多媒体应用、网络应用等多方面功能于一体的图形界面操作系统。 </li><li>作为各种嵌入式设备的操作系统，例如机顶盒、移动电话、智能家居设备等等，在移动电话领域的第一大操作系统的Android就是基于Linux内核的</li><li>应用在超级计算机中作为操作系统， 在TOP500超级电脑列表采用Linux为操作系统的，占了371组（即74.2%），其中的前十位者，有7组是使用Linux的。 </li></ol><h3 id="第三节-怎么下载Linux系统镜像"><a href="#第三节-怎么下载Linux系统镜像" class="headerlink" title="第三节 怎么下载Linux系统镜像"></a>第三节 怎么下载Linux系统镜像</h3><p>centos下载地址：</p><p>网易镜像：</p><p><a href="http://mirrors.163.com/centos/6/isos/">http://mirrors.163.com/centos/6/isos/</a></p><p><a href="http://mirrors.163.com/centos/7/isos/x86_64/">http://mirrors.163.com/centos/7/isos/x86_64/</a></p><p>搜狐镜像：</p><p><a href="http://mirrors.sohu.com/centos/6/isos/">http://mirrors.sohu.com/centos/6/isos/</a> </p><p><a href="http://mirrors.sohu.com/centos/7/isos/x86_64/">http://mirrors.sohu.com/centos/7/isos/x86_64/</a></p><p>当然，在我们发的资料中已经有老师给你们下载好的现成的Linux系统的镜像</p><h3 id="第四节-Linux系统的分类"><a href="#第四节-Linux系统的分类" class="headerlink" title="第四节 Linux系统的分类"></a>第四节 Linux系统的分类</h3><h4 id="1-按照市场需求分"><a href="#1-按照市场需求分" class="headerlink" title="1.  按照市场需求分"></a>1.  按照市场需求分</h4><ul><li>桌面版：类似于Windows的，有图形化界面的操作系统。不成熟</li><li>服务器版：没有图形化界面，使用命令行(CLI, Command Line Interface)进行操作的。企业里通常会使用服务器版的</li></ul><h4 id="2-按照原生程度分"><a href="#2-按照原生程度分" class="headerlink" title="2. 按照原生程度分"></a>2. 按照原生程度分</h4><ul><li>内核版：Linus领导的开发小组，维护的内核版本。</li><li>发行版：一些企业、社区在内核的基础上，增加一些功能、软件，然后重新发行的版本</li></ul><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_001.png"></p><h2 id="第二章-安装虚拟机和CentOS系统"><a href="#第二章-安装虚拟机和CentOS系统" class="headerlink" title="第二章 安装虚拟机和CentOS系统"></a>第二章 安装虚拟机和CentOS系统</h2><h3 id="第一节-安装虚拟机"><a href="#第一节-安装虚拟机" class="headerlink" title="第一节 安装虚拟机"></a>第一节 安装虚拟机</h3><h4 id="1-什么是虚拟机"><a href="#1-什么是虚拟机" class="headerlink" title="1. 什么是虚拟机"></a>1. 什么是虚拟机</h4><p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。在实体计算机中能够完成的工作在虚拟机中都能够实现。在计算机中创建虚拟机时，需要将实体机的部分硬盘和内存容量作为虚拟机的硬盘和内存容量。每个虚拟机都有独立的CMOS、硬盘和操作系统，可以像使用实体机一样对虚拟机进行操作。 </p><h4 id="2-常见的虚拟机软件"><a href="#2-常见的虚拟机软件" class="headerlink" title="2. 常见的虚拟机软件"></a>2. 常见的虚拟机软件</h4><h5 id="2-1-VirtualBox"><a href="#2-1-VirtualBox" class="headerlink" title="2.1 VirtualBox"></a>2.1 VirtualBox</h5><p>VirtualBox 是一款开源虚拟机软件。VirtualBox 是由德国 Innotek公司开发，由Sun Microsystems公司出品的软件，使用Qt编写，在 Sun 被 Oracle收购后正式更名成 Oracle VM VirtualBox。使用者可以在VirtualBox上安装并且执行Solaris、Windows、DOS、Linux、OS/2Warp、BSD等系统作为客户端操作系统。已由甲骨文公司进行开发，是甲骨文公司xVM虚拟化平台技术的一部分。 </p><h5 id="2-2-VMWare-Workstation"><a href="#2-2-VMWare-Workstation" class="headerlink" title="2.2 VMWare Workstation"></a>2.2 VMWare Workstation</h5><p><strong>VMware</strong>是全球台式电脑及资料中心虚拟化解决方案的领导厂商。VMWare Workstation是该公司出品的“虚拟 机”软件，通过它可在一台电脑上同时运行更多的Microsoft Windows、Linux、Mac OS X、DOS系统。 </p><h4 id="3-安装VMWare软件"><a href="#3-安装VMWare软件" class="headerlink" title="3. 安装VMWare软件"></a>3. 安装VMWare软件</h4><h5 id="3-1-软件所在位置"><a href="#3-1-软件所在位置" class="headerlink" title="3.1 软件所在位置"></a>3.1 软件所在位置</h5><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_002.png"></p><h5 id="3-2-安装步骤"><a href="#3-2-安装步骤" class="headerlink" title="3.2 安装步骤"></a>3.2 安装步骤</h5><p>开始安装:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_003.png"></p><p>欢迎界面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_004.png"></p><p>许可协议:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_005.png"></p><p>安装位置：</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_006.png"></p><p>是否检查产品更新，不勾选，不帮助其完善，只管用：</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_007.png"></p><p>是否创建桌面快捷方式和开始菜单启动方式，建议都选上:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_008.png"></p><p>开始安装: </p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_009.png"></p><p>安装完成界面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_010.png"></p><h5 id="3-3-破解VMWare"><a href="#3-3-破解VMWare" class="headerlink" title="3.3 破解VMWare"></a>3.3 破解VMWare</h5><p>破解文件所在位置,打开文件查看破解的注册码:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_011.png"></p><p>在VMWare中输入注册码:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_012.png"></p><p>破解成功页面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_013.png"></p><h4 id="4-使用VMWare创建虚拟机"><a href="#4-使用VMWare创建虚拟机" class="headerlink" title="4. 使用VMWare创建虚拟机"></a>4. 使用VMWare创建虚拟机</h4><h5 id="4-1-检查电脑是否已经开启虚拟化支持"><a href="#4-1-检查电脑是否已经开启虚拟化支持" class="headerlink" title="4.1 检查电脑是否已经开启虚拟化支持"></a>4.1 检查电脑是否已经开启虚拟化支持</h5><p>不一定非得检查电脑是否已经开启虚拟化支持，一般的电脑都是默认开启的，如果你在创建虚拟机的时候报了类似以下的错误，则需要去检查是否开启了虚拟化支持</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_014.png"></p><p>如果电脑未开启虚拟化支持则需要开启虚拟化支持</p><p>各种型号的电脑进入BIOS界面检查是否开启虚拟化支持，以及设置启动虚拟化支持的步骤都不太一样，所以需要自行百度查找方法</p><h5 id="4-2-创建虚拟机的步骤"><a href="#4-2-创建虚拟机的步骤" class="headerlink" title="4.2 创建虚拟机的步骤"></a>4.2 创建虚拟机的步骤</h5><p>新建虚拟机选择自定义:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_016.png"></p><p>选择硬件兼容性:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_017.png"></p><p>创建虚拟空白硬盘:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_018.png"></p><p>选择操作系统版本:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_019.png"></p><p>指定虚拟机的名字以及安装位置：</p><p>名字可以随便命，安装位置不能有中文和空格</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_020.png"></p><p>配置处理器:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_021.png"></p><p>配置内存大小:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_022.png"></p><p>配置网络类型为NAT:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_023.png"></p><p>配置IO控制器类型:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_024.png"></p><p>选择磁盘类型:</p><p>IDE :并口硬盘，最大80G，传输慢</p><p>SATA:串口硬盘，机械硬盘</p><p>SCSI：串口硬盘，做过优化，传输速度更快</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_025.png"></p><p>新建虚拟磁盘</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_026.png"></p><p>配置磁盘空间:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_027.png"></p><p>选择磁盘文件存储位置:<br>建议和虚拟机存储目录保持一致</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_028.png"></p><p>新建虚拟机完成页面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_029.png"></p><p>虚拟机设置: 指定操作系统镜像文件路径</p><p>点击设置:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_030.png"></p><p>指定操作系统镜像文件路径:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_031.png"></p><h4 id="5-开启虚拟机安装CentOS操作系统"><a href="#5-开启虚拟机安装CentOS操作系统" class="headerlink" title="5. 开启虚拟机安装CentOS操作系统"></a>5. 开启虚拟机安装CentOS操作系统</h4><h5 id="5-1-开启虚拟机"><a href="#5-1-开启虚拟机" class="headerlink" title="5.1 开启虚拟机"></a>5.1 开启虚拟机</h5><p>点击开启虚拟机:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_032.png"></p><p>开启虚拟机之后的欢迎页面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_033.png"></p><p>回车选择第一个开始安装配置，此外，在Ctrl+Alt可以实现Windows主机和VM之间窗口的切换</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_333.png"></p><h5 id="5-2-开始安装CentOS操作系统"><a href="#5-2-开始安装CentOS操作系统" class="headerlink" title="5.2 开始安装CentOS操作系统"></a>5.2 开始安装CentOS操作系统</h5><p>选择安装过程中使用的语言:</p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_034.png" style="zoom:75%;"><p>配置时间日期:</p><p>点击“日期和时间”调整后点完成</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_035.png"></p><p>配置时区:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_036.png"></p><p>设置键盘类型:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_037.png"></p><p>增加个英语（美国）:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_037_01.png"></p><p>选择语言:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_038.png"></p><p>选择安装源:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_039_01.png"></p><p>设置安装源为: 自动检测</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_039.png"></p><p>进行软件选择:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_040_01.png"></p><p>选择为GNOME桌面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_040.png"></p><p>安装目标位置:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_041_01.png"></p><p>选择我要配置分区:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_041.png"></p><p>点击完成。</p><p>添加标准分区:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_042.png"></p><p>Boot引导区要大于200Mb:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_043.png"></p><p>设置Boot分区文件系统: ext4</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_044.png"></p><p>再次点击加号，添加Swap分区</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_045_01.png"></p><p>Swap分区设置: 文件系统为swap</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_045.png"></p><p>继续点击加号添加”/“分区，剩余空间都给它:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_046_01.png"></p><p>设置”/“分区:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_046.png"></p><p>接收更改，格式化:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_047.png"></p><p>进入Kdump设置:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_048_01.png"></p><p>取消勾选，不启用Kdump:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_048.png"></p><p>设置网络和主机名: 修改主机名</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_049.png"></p><p>点击“开始安装”，进入安装页面:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_050_01.png"></p><p>设置“ROOT密码”，不用创建新用户</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_050.png"></p><p>确认密码:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_051.png"></p><p>等待，安装完成之后重启:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_052.png"></p><p>重启后进入欢迎页:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_053.png"></p><p>许可证页面，同意许可:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_054.png"></p><p>点击完成配置</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_055.png"></p><p>输入选择“汉语（pinyin）”：然后选择前进</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_056.png"></p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_056_01.png"></p><p>隐私，默认，点击前进</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_057.png"></p><p>时区，上海，点击前进</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_058.png"></p><p>在线账号，跳过</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_059.png"></p><p>关于您，设置自己账号</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_060.png"></p><p>设置自己账号的密码</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_061.png"></p><p>开始使用CentOS系统:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_062.png"></p><p>系统主界面:注销自己的账户</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_063.png"></p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_064.png"></p><p>用Root账户登录:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_065_01.png"></p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_065.png"></p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_066.png"></p><p>网络连接:设置有线连接为自动连接</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_067_01.png"></p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_067_02.png"></p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_067.png"></p><p>设置命令行窗口:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_068.png"></p><p>​    选择”文件”—-&gt;”新建配置文件”</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_069.png"></p><h2 id="第三章-安装和使用远程访问工具"><a href="#第三章-安装和使用远程访问工具" class="headerlink" title="第三章 安装和使用远程访问工具"></a>第三章 安装和使用远程访问工具</h2><h3 id="第一节-远程访问工具的概述"><a href="#第一节-远程访问工具的概述" class="headerlink" title="第一节 远程访问工具的概述"></a>第一节 远程访问工具的概述</h3><h4 id="1-为什么要使用远程访问工具"><a href="#1-为什么要使用远程访问工具" class="headerlink" title="1. 为什么要使用远程访问工具"></a>1. 为什么要使用远程访问工具</h4><ul><li>通过远程访问工具可以直接从宿主机访问虚拟机，以及在宿主机中向虚拟机传输文件</li><li>实际应用中服务器一般放在远端（机房）或者云服务上，测试人员不可能直接到现场操作Linux服务器,所以需要远程访问工具远程操作服务器</li></ul><h4 id="2-常见的远程访问工具"><a href="#2-常见的远程访问工具" class="headerlink" title="2. 常见的远程访问工具"></a>2. 常见的远程访问工具</h4><h5 id="2-1-远程文件传输工具"><a href="#2-1-远程文件传输工具" class="headerlink" title="2.1 远程文件传输工具"></a>2.1 远程文件传输工具</h5><p>远程文件传输工具是用于不同的计算机之间进行文件传输的工具，我们目前可以使用它从宿主机传输文件给虚拟机</p><ul><li>FileZilla</li><li>FlashFXP</li><li>Xftp</li></ul><h5 id="2-2-远程命令行操作工具"><a href="#2-2-远程命令行操作工具" class="headerlink" title="2.2 远程命令行操作工具"></a>2.2 远程命令行操作工具</h5><p>远程命令行操作工具是用于在客户机上使用Linux命令远程操作服务机，我们目前可以使用它在宿主机上通过Linux命令行操作虚拟机</p><ul><li>XShell</li><li>FinalShell</li><li>SecureCRT</li></ul><h4 id="3-安装使用远程文件传输工具"><a href="#3-安装使用远程文件传输工具" class="headerlink" title="3. 安装使用远程文件传输工具"></a>3. 安装使用远程文件传输工具</h4><h5 id="3-1-安装Xftp"><a href="#3-1-安装Xftp" class="headerlink" title="3.1 安装Xftp"></a>3.1 安装Xftp</h5><p>软件位置:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_070.png"></p><p>双击安装:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_071.png"></p><p>选择免费版:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_072.png"></p><p>选择接受协议:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_073.png"></p><p>修改安装路径:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_074.png"></p><p>选择程序文件夹: 直接点下一步</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_076.png"></p><p>选择语言: </p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_077.png"></p><p>安装完成:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_078.png"></p><h5 id="3-2-使用Xftp远程连接虚拟机"><a href="#3-2-使用Xftp远程连接虚拟机" class="headerlink" title="3.2 使用Xftp远程连接虚拟机"></a>3.2 使用Xftp远程连接虚拟机</h5><p>新建会话:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_079.png"></p><p>设置会话属性:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_080.png"></p><p>解决乱码:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_081.png"></p><h4 id="4-安装使用远程命令行操作工具"><a href="#4-安装使用远程命令行操作工具" class="headerlink" title="4. 安装使用远程命令行操作工具"></a>4. 安装使用远程命令行操作工具</h4><h5 id="4-1-安装Xshell"><a href="#4-1-安装Xshell" class="headerlink" title="4.1 安装Xshell"></a>4.1 安装Xshell</h5><p>软件所在位置:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_082.png"></p><p>开始安装:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_083.png"></p><p>选择免费版:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_084.png"></p><p>同意许可证协议:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_085.png"></p><p>选择安装路径:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_086.png"></p><p>选择文件夹:直接点下一步</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_087.png"></p><p>选择语言: 简体中文</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_088.png"></p><p>安装完成:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_089.png"></p><h5 id="4-2-使用XShell远程连接操作虚拟机"><a href="#4-2-使用XShell远程连接操作虚拟机" class="headerlink" title="4.2 使用XShell远程连接操作虚拟机"></a>4.2 使用XShell远程连接操作虚拟机</h5><p>新建会话:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_095.png"></p><p>设置会话属性:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_090.png"></p><p>连接会话:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_091.png"></p><p>接受并保存:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_092.png"></p><p>输入、记住用户名:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_093.png"></p><p>输入、记住密码:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_094.png"></p><h2 id="第四章-Linux的文件和目录结构"><a href="#第四章-Linux的文件和目录结构" class="headerlink" title="第四章 Linux的文件和目录结构"></a>第四章 Linux的文件和目录结构</h2><h3 id="第一节-目录结构预览"><a href="#第一节-目录结构预览" class="headerlink" title="第一节 目录结构预览"></a>第一节 目录结构预览</h3><h4 id="1-查看目录结构"><a href="#1-查看目录结构" class="headerlink" title="1. 查看目录结构"></a>1. 查看目录结构</h4><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_096.png"></p><h4 id="2-目录结构列表"><a href="#2-目录结构列表" class="headerlink" title="2. 目录结构列表"></a>2. 目录结构列表</h4><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_097.png"></p><h3 id="第二节-目录结构中各个目录的介绍"><a href="#第二节-目录结构中各个目录的介绍" class="headerlink" title="第二节 目录结构中各个目录的介绍"></a>第二节 目录结构中各个目录的介绍</h3><ol><li>“/bin”: bin是Binary的缩写，这个目录存放着最经常使用的命令</li><li>“/sbin”: s表示Super User，这里存放的是系统管理员使用的系统管理程序</li><li>“/home”: 存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>“/root”: 该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>“/lib”: 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li><li>“/lost+found”: 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>“/etc”: 所有的系统管理所需要的配置文件和子目录。</li><li><strong>“/usr”</strong>: 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</li><li>“/proc”: 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li>“/srv”: service缩写，该目录存放一些服务启动之后需要提取的数据。</li><li>“/sys”: 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。（内核）</li><li>“/tmp”: 这个目录是用来存放一些临时文件的。</li><li>“/dev”: Device(设备)的缩写,类似windows的设备管理器，把所有的硬件用文件的形式存储。</li><li>“/media”: linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。CentOS6 就在/media下,CentOS7换目录了/run/media/root/media</li><li>“/mnt”: 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li><li><strong>“/opt”</strong>: 这是给主机额外安装软件所摆放的目录。比如你安装JDK、Tomcat则就可以放到这个目录下。默认是空的。</li><li><strong>“/usr/local”</strong>: 这是另一个给主机额外安装软件所摆放的目录.一般是通过编译源码方式安装的程序。</li><li>“/var”: 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>“/boot”: 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，自己的安装别放这里</li></ol><h2 id="第五章-Linux常用命令"><a href="#第五章-Linux常用命令" class="headerlink" title="第五章 Linux常用命令"></a>第五章 Linux常用命令</h2><h3 id="第一节-一些常用基本命令"><a href="#第一节-一些常用基本命令" class="headerlink" title="第一节 一些常用基本命令"></a>第一节 一些常用基本命令</h3><h4 id="1-帮助文档"><a href="#1-帮助文档" class="headerlink" title="1. 帮助文档"></a>1. 帮助文档</h4><h5 id="1-1-man-manual-查看帮助手册"><a href="#1-1-man-manual-查看帮助手册" class="headerlink" title="1.1 man (manual 查看帮助手册)"></a>1.1 man (manual 查看帮助手册)</h5><p>例如<code>man ls</code>是查看ls相关的文档手册</p><h5 id="1-2-–help-提示使用方法"><a href="#1-2-–help-提示使用方法" class="headerlink" title="1.2 –help (提示使用方法)"></a>1.2 –help (提示使用方法)</h5><p>例如<code>ls --help</code>可以提示ls命令的相关使用方法</p><h4 id="2-日期时间类"><a href="#2-日期时间类" class="headerlink" title="2. 日期时间类"></a>2. 日期时间类</h4><h5 id="2-1-date-以不同的格式获取日期时间"><a href="#2-1-date-以不同的格式获取日期时间" class="headerlink" title="2.1 date: 以不同的格式获取日期时间"></a>2.1 date: 以不同的格式获取日期时间</h5><ol><li><p><code>date +%Y-%m-%d</code></p></li><li><p><code>date +%Y-%m-%d&#39;  &#39;%H:%M:%S</code></p></li><li><p><code>date +%F&#39; &#39;%T</code></p></li></ol><h5 id="2-2-cal-查看日历"><a href="#2-2-cal-查看日历" class="headerlink" title="2.2 cal:查看日历"></a>2.2 cal:查看日历</h5><p><code>cal -y</code></p><h4 id="3-清除屏幕"><a href="#3-清除屏幕" class="headerlink" title="3. 清除屏幕"></a>3. 清除屏幕</h4><h5 id="3-1-命令-clear"><a href="#3-1-命令-clear" class="headerlink" title="3.1 命令: clear"></a>3.1 命令: clear</h5><h5 id="3-2-快捷键-ctrl-L"><a href="#3-2-快捷键-ctrl-L" class="headerlink" title="3.2 快捷键: ctrl + L"></a>3.2 快捷键: ctrl + L</h5><h4 id="4-查看ip配置"><a href="#4-查看ip配置" class="headerlink" title="4. 查看ip配置"></a>4. 查看ip配置</h4><p><code>ifconfig</code></p><h4 id="5-查看命令历史"><a href="#5-查看命令历史" class="headerlink" title="5. 查看命令历史"></a>5. 查看命令历史</h4><p><code>history</code>命令可以查看所写过的命令历史</p><h4 id="6-关机重启"><a href="#6-关机重启" class="headerlink" title="6. 关机重启"></a>6. 关机重启</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>sync</td><td>将内存数据保存到硬盘上</td></tr><tr><td>poweroff</td><td>关机</td></tr><tr><td>reboot</td><td>重启</td></tr></tbody></table><h4 id="7-下载文件"><a href="#7-下载文件" class="headerlink" title="7. 下载文件"></a>7. 下载文件</h4><p><code>wget</code>: </p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_114.png"></p><p>使用 -P 参数可以指定目标目录，例如：(不需要去演示) </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> -P /root https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-<span class="hljs-number">10</span>/v<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span>/bin/apache-tomcat-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span>.tar.gz<br></code></pre></td></tr></table></figure><h4 id="8-常用快捷键"><a href="#8-常用快捷键" class="headerlink" title="8. 常用快捷键"></a>8. 常用快捷键</h4><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+l</td><td>清屏</td></tr><tr><td>Ctrl+c</td><td>强制终止程序</td></tr><tr><td>Ctrl+Insert</td><td>复制</td></tr><tr><td>Shift+Insert</td><td>粘贴</td></tr><tr><td>Ctrl+s</td><td>锁屏</td></tr><tr><td>Ctrl+q</td><td>解除锁屏</td></tr><tr><td>tab</td><td>自动补全</td></tr></tbody></table><h3 id="第二节-文件目录命令"><a href="#第二节-文件目录命令" class="headerlink" title="第二节 文件目录命令"></a>第二节 文件目录命令</h3><h4 id="1-切换目录命令"><a href="#1-切换目录命令" class="headerlink" title="1 切换目录命令"></a>1 切换目录命令</h4><ol><li><code>cd ..</code>: 返回上级目录</li><li><code>cd /</code>: 返回到 / 目录</li><li><code>cd ~</code>：返回家目录，如果是root用户则返回<code>/root</code>，如果是普通用户则返回<code>/home/普通用户目录</code></li><li><code>cd 目录绝对路径</code>: 通过绝对路径切换到指定目录，可以借助tab键提示目录名</li><li><code>cd 目录相对路径</code>: 通过相对路径切换到指定目录</li><li><code>cd -</code>：切换到上一次操作所在的目录</li></ol><h4 id="2-打印当前目录的绝对路径"><a href="#2-打印当前目录的绝对路径" class="headerlink" title="2 打印当前目录的绝对路径"></a>2 打印当前目录的绝对路径</h4><p><code>pwd</code>命令: 此命令打印当前目录的绝对路径，pwd的全称是:<code>print wroking directory</code>打印工作目录，工作目录就是用户当前所在的目录</p><h4 id="3-列出目录中的文件"><a href="#3-列出目录中的文件" class="headerlink" title="3 列出目录中的文件"></a>3 列出目录中的文件</h4><ol><li><p><code>ls</code>: 列出当前目录中的文件名列表</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_098.png"></p></li><li><p><code>ls -l</code>可以简写成<code>ll</code>: 列出当前目录中的文件列表，包含文件的详细信息(其中文件大写用字节表示)</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_099.png"></p></li><li><p>h参数：<code>ll -h</code> 将文件大小使用kb显示</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_100.png"></p></li><li><p>a参数: <code>ll -ah</code>显示目录中的所有文件,包含隐藏文件。注意: a和h都是参数，他俩的顺序可以换</p></li><li><p><code>ll 某个目录的绝对路径或者某个目录的相对路径</code>: 列出指定目录下的文件详情列表</p></li><li><p>R参数: <code>ll -R</code>递归查看某个目录以及其子孙后代目录中的所有文件</p></li><li><p><code>ll -ltr</code>: 逆序列出最近修改过的文件</p></li></ol><h4 id="4-创建和删除目录"><a href="#4-创建和删除目录" class="headerlink" title="4 创建和删除目录"></a>4 创建和删除目录</h4><ol><li><code>mkdir 目录路径</code>：创建新目录，例如<code>mkdir /usr/local/tomcat</code>，表示在<code>/usr/local</code>中创建tomcat目录，但是前提是<code>/root/usr/local</code>目录已存在</li><li><code>mkdir -p 目录路径</code>: 创建新目录，可以创建多级目录，例如<code>mkdir -p /root/aa/bb/cc</code>,表示在<code>/root</code>目录中先创建<code>aa</code>目录，然后在<code>aa</code>目录中创建<code>bb</code>目录，在<code>bb</code>目录中创建<code>cc</code>目录</li><li><code>rmdir 目录路径</code>: 删除一个目录，当然:该命令只能删除一个空目录</li></ol><h4 id="5-创建和删除文件"><a href="#5-创建和删除文件" class="headerlink" title="5 创建和删除文件"></a>5 创建和删除文件</h4><ol><li><code>touch 文件路径</code>: 新创建一个文件</li><li><code>rm 文件路径</code>: 删除指定文件，会询问<code>是否删除</code></li><li>f参数: <code>rm -f 文件路径</code>: 删除文件，不会询问<code>是否删除</code></li><li>r参数:递归删除，<code>rm -rf 非空目录路径</code>:递归删除非空目录</li></ol><h4 id="6-移动文件或目录"><a href="#6-移动文件或目录" class="headerlink" title="6 移动文件或目录"></a>6 移动文件或目录</h4><ol><li><code>mv 要移动的文件或目录路径 目标路径</code>: 将要移动的文件移动到目标路径</li><li><code>mv 旧文件或目录名 新文件或目录名</code>: 对文件进行重命名</li></ol><h4 id="7-复制文件或目录"><a href="#7-复制文件或目录" class="headerlink" title="7 复制文件或目录"></a>7 复制文件或目录</h4><ol><li><code>cp 要复制的文件 目标路径</code>: 将要复制的文件复制到目标路径</li><li>r参数: <code>cp -r 要复制的目录 目标路径</code>: 将目录以及目录中的所有内容都复制到目标路径</li><li>强制覆盖的复制: 如果目标目录中已经有了该文件，那么就采用强制覆盖的复制，例如<code>\cp -rf a /test</code>表示将a复制到/test目录中，并且进行覆盖</li></ol><h4 id="8-查看文件"><a href="#8-查看文件" class="headerlink" title="8 查看文件"></a>8 查看文件</h4><h5 id="8-1-cat命令"><a href="#8-1-cat命令" class="headerlink" title="8.1 cat命令"></a>8.1 cat命令</h5><ol><li><code>cat 文件路径</code>:查看轻量级的文本文件</li><li><code>cat 文件1路径 文件2路径</code>: 连接查看多个文件</li><li><code>cat 文件1 &gt; 文件2</code>:将文件1的内容覆盖文件2的内容</li><li><code>cat 文件1 &gt;&gt; 文件2</code>:将在文件2的内容后面追加文件1的内容</li></ol><h5 id="8-2-more命令"><a href="#8-2-more命令" class="headerlink" title="8.2 more命令"></a>8.2 more命令</h5><p><code>more 文件路径</code>:查看较长的文件，可以使用空格键向下翻页，使用回车键向下翻行，使用q退出查看，使用<code>Ctrl + F</code>向下滚动一屏，使用<code>Ctrl + B</code>返回上一屏</p><h5 id="8-3-less命令"><a href="#8-3-less命令" class="headerlink" title="8.3 less命令"></a>8.3 less命令</h5><p><code>less 文件路径</code>：查看较长的文件，功能比<code>more</code>强大，可以使用<code>PgUp</code>和<code>PgDn</code>向上和向下翻页，可以使用<code>/字符串</code>向下搜索<code>字符串</code>，使用<code>?字符串</code>向上搜索字符串，使用<code>n</code>正向重复前一个搜索(与/和?搜索有关)，使用<code>N</code>反向重复前一个搜索</p><h5 id="8-4-tail命令"><a href="#8-4-tail命令" class="headerlink" title="8.4 tail命令"></a>8.4 tail命令</h5><ol><li><code>tail -数字 文件路径</code>: 查看指定文件的末尾多少行</li><li><code>tail -数字f 文件路径</code>: 查看文件末尾多少行，可进行堵塞，文件有新内容增加到文件中，立刻可以显示，适合查看Tomcat的运行日志</li></ol><h4 id="9-打印信息"><a href="#9-打印信息" class="headerlink" title="9 打印信息"></a>9 打印信息</h4><p>相当于Java中的日志打印，例如<code>echo $path</code>打印<code>path</code>环境变量信息</p><h4 id="10-查找文件或目录"><a href="#10-查找文件或目录" class="headerlink" title="10 查找文件或目录"></a>10 查找文件或目录</h4><p><code>find</code>命令是用于在某个范围内查找文件或者目录，它的用法是<code>find 查找范围 参数 表达式</code>，例如:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_101.png"></p><p>这次查询表示的意思是:</p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_102.png" style="zoom:80%;"><h4 id="11-基于索引查找文件或者目录"><a href="#11-基于索引查找文件或者目录" class="headerlink" title="11 基于索引查找文件或者目录"></a>11 基于索引查找文件或者目录</h4><h5 id="11-1-什么是索引"><a href="#11-1-什么是索引" class="headerlink" title="11.1 什么是索引"></a>11.1 什么是索引</h5><p>建立索引可以极大提升查询的速度。为什么会有这么显著的效果呢？我们拿查字典来举个例子。</p><ul><li>没有索引：从正文第一页开始翻，在每一页中检查有没有自己要找的字。在最差的情况下需要逐页翻到字典的最后一页，这样做速度非常慢。</li><li>基于索引：字典正文前的检字表就是正文内容的索引。先从检字表里快速找到那个字，这里没有这个字的详细信息，只有这个字所在的页码。我们根据这个页码就可以直接到正文中直接翻到那一页，这样速度就非常快了。</li></ul><h5 id="11-2-locate命令的原理"><a href="#11-2-locate命令的原理" class="headerlink" title="11.2 locate命令的原理"></a>11.2 locate命令的原理</h5><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_103.png"></p><p>系统启动时把每一个目录、每一个文件的完整路径保存到索引库中。使用locate命令搜索关键词时，就使用关键词查询索引库，把匹配的路径字符串返回。</p><p>而新建的文件或目录不会被系统把路径存入索引库，那么使用locate命令就搜索不到。此时使用updatedb命令更新一下索引库就行了。</p><h5 id="11-3-locate命令的使用"><a href="#11-3-locate命令的使用" class="headerlink" title="11.3 locate命令的使用"></a>11.3 locate命令的使用</h5><ol><li><code>locate 关键字</code>:全文搜索与关键字相关的文件或者目录</li><li>新建文件之后使用<code>updatedb</code>更新索引库，然后再搜索</li></ol><h4 id="12-grep"><a href="#12-grep" class="headerlink" title="12 grep"></a>12 grep</h4><h5 id="12-1-管道筛选"><a href="#12-1-管道筛选" class="headerlink" title="12.1 管道筛选"></a>12.1 管道筛选</h5><p><code>grep</code>配合进行管道筛选，例如<code>ll /etc | grep .cfg</code>表示筛选<code>/etc</code>目录中包含<code>.cfg</code>的文件，对于管道筛选而言<code>|</code>前面的表示数据源(需要从数据源中筛选)，<code>| grep</code>后面表示筛选条件</p><h5 id="12-2-在文本文件中根据关键字匹配行"><a href="#12-2-在文本文件中根据关键字匹配行" class="headerlink" title="12.2 在文本文件中根据关键字匹配行"></a>12.2 在文本文件中根据关键字匹配行</h5><h6 id="12-2-1-基本用法"><a href="#12-2-1-基本用法" class="headerlink" title="12.2.1 基本用法"></a>12.2.1 基本用法</h6><p><code>grep 参数 关键字 被搜索的文件</code>:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_104.png"></p><p>上述语句表示在当前目录的content.txt文件中搜索包含<strong>Spring</strong>的所有行</p><h6 id="12-2-2-参数"><a href="#12-2-2-参数" class="headerlink" title="12.2.2 参数"></a>12.2.2 参数</h6><ol><li><p><code>n</code>表示在搜索结果中显示行号:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_105.png"></p></li><li><p><code>v</code>表示返回不匹配关键字的那些行</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_106.png"></p></li></ol><h4 id="13-压缩和解压"><a href="#13-压缩和解压" class="headerlink" title="13 压缩和解压"></a>13 压缩和解压</h4><h5 id="13-1-gz格式的压缩文件"><a href="#13-1-gz格式的压缩文件" class="headerlink" title="13.1 gz格式的压缩文件"></a>13.1 gz格式的压缩文件</h5><p>在Linux系统环境中，很多程序安装包都是以tar包的形式提供下载的： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_107.png"></p><h6 id="13-1-1-压缩"><a href="#13-1-1-压缩" class="headerlink" title="13.1.1 压缩"></a>13.1.1 压缩</h6><ul><li><p>语法：<code>tar -zcvf 压缩包 文件1 文件2 ...</code></p></li><li><p>参数：</p><ul><li><code>z</code>：指定压缩算法为gzip</li><li><code>c</code>：压缩后要创建压缩文件</li><li><code>v</code>：在压缩过程中列出文件列表(可以不写)</li><li><code>f</code>：指定压缩包文件名称。后边跟参数值：压缩包名称</li></ul></li></ul><p>例如<code>tar  -zcvf  demo.tar.gz  *.txt</code>表示将当前目录中的所有<code>txt</code>文件压缩成<code>demo.tar.gz</code></p><h6 id="13-1-2-解压"><a href="#13-1-2-解压" class="headerlink" title="13.1.2 解压"></a>13.1.2 解压</h6><ul><li>语法：<code>tar -zxvf 压缩包 -C 解压位置</code></li><li>参数：<ul><li><code>z</code>: 表示使用<code>gzip</code>算法解压</li><li><code>x</code>：extract, 调用解压命令，执行解压操作</li><li><code>v</code>：在解压缩过程中列出文件列表(可以不写)</li><li><code>f</code>：指定要解压的文件名称。后边跟参数值：压缩包名称</li><li><code>C</code>：指定解压的位置（可以不写）<ul><li>如果写参数<code>C</code>：就需要指定解压的位置，必须是已经存在的文件夹</li><li>如果不写参数<code>C</code>：要解压到当前文件夹里</li></ul></li></ul></li></ul><p>例如<code>tar -xvf demo.tar.gz</code>表示将<code>demo.tar.gz</code>文件解压到当前目录；<code>tar -xvf demo.tar.gz -C /root/app</code>表示将<code>demo.tar.gz</code>解压到<code>/root/app</code>目录中</p><h5 id="13-2-zip格式的压缩文件-了解"><a href="#13-2-zip格式的压缩文件-了解" class="headerlink" title="13.2 zip格式的压缩文件(了解)"></a>13.2 zip格式的压缩文件(了解)</h5><p>Linux中一般不会使用zip格式的压缩文件，但是如果需要，我们也有命令对zip格式的压缩文件进行解压、以及将文件压缩成zip格式</p><h6 id="13-2-1-压缩"><a href="#13-2-1-压缩" class="headerlink" title="13.2.1 压缩"></a>13.2.1 压缩</h6><p><code>zip demo.zip *.txt</code>表示将当前目录中的所有<code>txt</code>文件压缩到<code>demo.zip</code>中</p><h6 id="13-2-2-解压"><a href="#13-2-2-解压" class="headerlink" title="13.2.2 解压"></a>13.2.2 解压</h6><p><code>unzip demo.zip</code>表示将<code>demo.zip</code>解压到当前目录</p><h3 id="第三节-文件编辑"><a href="#第三节-文件编辑" class="headerlink" title="第三节 文件编辑"></a>第三节 文件编辑</h3><h4 id="1-Linux的文件编辑器"><a href="#1-Linux的文件编辑器" class="headerlink" title="1. Linux的文件编辑器"></a>1. Linux的文件编辑器</h4><p><code>vim</code>是Linux中重要的文本编辑器，我们使用<code>vim</code>可以在Linux中编辑文件，<code>vim</code>可以看做是之前<code>vi</code>编辑器的升级版本</p><h4 id="2-文件编辑过程中的三种模式"><a href="#2-文件编辑过程中的三种模式" class="headerlink" title="2. 文件编辑过程中的三种模式"></a>2. 文件编辑过程中的三种模式</h4><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_108.png"></p><p>一般模式(无法编辑)：通过按键控制VIM工作</p><p>编辑模式(可以编辑无法保存)：可以自由输入</p><p>指令模式(可以执行保存、查找等操作)：通过执行指令完成一些特殊操作</p><h4 id="3-一般模式下的按键操作"><a href="#3-一般模式下的按键操作" class="headerlink" title="3. 一般模式下的按键操作"></a>3. 一般模式下的按键操作</h4><p><code>vim 要编辑的文件路径</code>可以进入到<strong>一般模式</strong>,此时我们无法自由编辑文件，但是可以进行整行的复制、粘贴、删除</p><ul><li><code>yy</code>复制光标所在行</li><li><code>p</code>在下方粘贴一行</li><li><code>dd</code>删除光标所在行</li><li><code>u</code>撤销前一步操作</li><li><code>Ctrl + r</code>重做刚刚撤销的操作</li><li><code>r</code> 替换光标所在位置的一个字符，第一步：按一下r键，第二步：输入新的字符 </li><li><code>gg</code>将光标移动到第一行的开头</li><li><code>G</code>将光标移动到最后一行的开头</li><li><code>行数G</code>将光标移动到指定行的开头</li></ul><h4 id="4-进入编辑模式"><a href="#4-进入编辑模式" class="headerlink" title="4. 进入编辑模式"></a>4. 进入编辑模式</h4><p>因为一般模式下我们无法自由编辑内容，所以需要进入编辑模式来进行文件的编辑，进入编辑模式的方式有如下一些:</p><table><thead><tr><th>按键</th><th>大小写 说明</th><th>光标动作</th></tr></thead><tbody><tr><td>i</td><td>小写</td><td>不动，就在<strong>当前位置</strong>，开始输入</td></tr><tr><td>I</td><td>大写</td><td>移动到<strong>行的开头</strong>，开始输入</td></tr><tr><td>a</td><td>小写</td><td>光标<strong>向后移动一格</strong>，然后开始输入</td></tr><tr><td>A</td><td>大写</td><td>光标移动到<strong>行的末尾</strong>，然后开始输入</td></tr><tr><td>o</td><td>小写</td><td>先在光标所在行的<strong>下面插入空行</strong> 然后把光标移动到空行的开头，再开始输入</td></tr></tbody></table><p>在编辑模式下我们可以进行自由编辑，如果想回退到普通模式进行操作，则需要按<code>Esc</code>按键，编辑模式下我们无法进行查找、保存等等操作，需要进入指令模式才能完成。而进入指令模式需要从一般模式进入，所以需要先<code>Esc</code>退回一般模式</p><h4 id="5-指令模式下的操作"><a href="#5-指令模式下的操作" class="headerlink" title="5. 指令模式下的操作"></a>5. 指令模式下的操作</h4><h5 id="5-1-进入指令模式"><a href="#5-1-进入指令模式" class="headerlink" title="5.1 进入指令模式"></a>5.1 进入指令模式</h5><h6 id="5-1-1-进入特殊指令操作的指令模式"><a href="#5-1-1-进入特殊指令操作的指令模式" class="headerlink" title="5.1.1 进入特殊指令操作的指令模式"></a>5.1.1 进入特殊指令操作的指令模式</h6><p>在一般模式下输入英文的<code>:</code>，其实就是同时按<code>Shift</code>和<code>:</code>就可以看到文档最下方出现了一个<code>:</code>，并且光标也出现在了<code>:</code>后面，就表示进入了指令模式，此时我们就可以输入指令进行一些操作</p><h6 id="5-1-2-进入用于全文搜索的指令模式"><a href="#5-1-2-进入用于全文搜索的指令模式" class="headerlink" title="5.1.2 进入用于全文搜索的指令模式"></a>5.1.2 进入用于全文搜索的指令模式</h6><p>在一般模式下输入<code>/</code>，可以进入用于全文搜索的指令模式</p><h5 id="5-2-在全文搜索的指令模式下进行搜索"><a href="#5-2-在全文搜索的指令模式下进行搜索" class="headerlink" title="5.2 在全文搜索的指令模式下进行搜索"></a>5.2 在全文搜索的指令模式下进行搜索</h5><h6 id="5-2-1-搜索的具体步骤"><a href="#5-2-1-搜索的具体步骤" class="headerlink" title="5.2.1 搜索的具体步骤"></a>5.2.1 搜索的具体步骤</h6><ol><li>在<code>/</code>的光标处输入搜索关键字，然后按回车按钮进行搜索，搜索出来匹配关键字部分的内容，会高亮显示</li><li>遍历匹配内容: 输入<code>n</code>向下遍历查找，输入<code>N</code>向上遍历查找</li><li>取消高亮显示: <code>:noh</code></li></ol><h5 id="5-3-指令模式下常用的指令操作"><a href="#5-3-指令模式下常用的指令操作" class="headerlink" title="5.3 指令模式下常用的指令操作"></a>5.3 指令模式下常用的指令操作</h5><h6 id="5-3-1-显示行号"><a href="#5-3-1-显示行号" class="headerlink" title="5.3.1 显示行号"></a>5.3.1 显示行号</h6><p><code>set nu</code>指令可以显示文本的行号</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_109.png"></p><h6 id="5-3-2-保存已编辑的内容"><a href="#5-3-2-保存已编辑的内容" class="headerlink" title="5.3.2 保存已编辑的内容"></a>5.3.2 保存已编辑的内容</h6><p><code>w</code>指令可以保存已编辑的内容</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_110.png"></p><h6 id="5-3-3-退出vim编辑器"><a href="#5-3-3-退出vim编辑器" class="headerlink" title="5.3.3 退出vim编辑器"></a>5.3.3 退出vim编辑器</h6><p><code>q</code>指令可以退出vim编辑，但是当部分修改还没有保存，那么会看到下面的提示： </p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_111.png"></p><p>当我们想要放弃对文件的修改，不保存直接退出就使用:<code>q! </code>来代替<code>q</code>进行退出</p><h6 id="5-3-4-保存当前编辑并退出"><a href="#5-3-4-保存当前编辑并退出" class="headerlink" title="5.3.4 保存当前编辑并退出"></a>5.3.4 保存当前编辑并退出</h6><p><code>wq</code>指令可以先保存当前编辑的内容，然后再退出vim编辑器</p><h6 id="5-3-5-全文替换"><a href="#5-3-5-全文替换" class="headerlink" title="5.3.5 全文替换"></a>5.3.5 全文替换</h6><ol><li>准备文本内容</li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tex">TIP<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br><br>Oh,hello tom!Do you think this is a good time for me to say hello to Lily?<br></code></pre></td></tr></table></figure><p>执行替换:将<code>hello</code>替换成<code>hi</code>:</p><p><code>%s/hello/hi</code>,替换后的效果是:</p><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_112.png"></p><p>这时我们看到每一行只有第一个匹配的内容被替换了，后面的没有被替换。这是因为对正则表达式来说，它是以行为单位查找匹配的内容。每一行只要找到第一个匹配那么就可以判断这一行就是匹配的，没有必要继续向后查找了。如果我们需要将一行中的每一个匹配都替换，可以在指令后加/g </p><h4 id="6-常见的问题"><a href="#6-常见的问题" class="headerlink" title="6. 常见的问题"></a>6. 常见的问题</h4><h5 id="6-1-提示存在交换文件"><a href="#6-1-提示存在交换文件" class="headerlink" title="6.1 提示存在交换文件"></a>6.1 提示存在交换文件</h5><h6 id="6-1-1-错误示例"><a href="#6-1-1-错误示例" class="headerlink" title="6.1.1 错误示例"></a>6.1.1 错误示例</h6><p><img src="http://www.slx.blue/2021/12/16/Linux-01/tu_113.png"></p><h6 id="6-1-2-错误原因"><a href="#6-1-2-错误原因" class="headerlink" title="6.1.2 错误原因"></a>6.1.2 错误原因</h6><p>vim在打开一个文件的时候会同时创建一个临时文件，命名方式是“.原文件名.swp”，这就是所谓的<strong>交换文件</strong>。而当vim正常退出时，这个交换文件会被删除。所以如果正常操作我们是看不到这个提示界面的。</p><p>而之所以会出现上面的提示，是因为当前的vim命令在创建新的交换文件之前就已经检测到了<strong>已存在的交换文件</strong>。</p><p>再往前推理一步，为什么会有交换文件残留？</p><ul><li>可能原因1：其他窗口正在使用vim打开同一个文件</li><li>可能原因2：非正常关机等原因导致vim没有正常退出</li></ul><h6 id="6-1-3-解决方法"><a href="#6-1-3-解决方法" class="headerlink" title="6.1.3 解决方法"></a>6.1.3 解决方法</h6><p>先根据最下面的提示输入Q退出，然后检查是否在其他窗口已经用vim打开了这个文件：</p><ul><li>是：继续在这个vim中编辑文件。</li><li>否：删除交换文件，重新编辑。</li></ul><h5 id="6-2-屏幕被锁"><a href="#6-2-屏幕被锁" class="headerlink" title="6.2 屏幕被锁"></a>6.2 屏幕被锁</h5><p>在Windows环境下大家已经习惯了使用Ctrl+s保存文档，但是在Linux环境下Ctrl+s是锁屏。如果是因为Ctrl+s锁屏那么可以使用Ctrl+q解锁，然后继续操作。 </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC-03</title>
      <link href="/2021/12/13/springMVC-03/"/>
      <url>/2021/12/13/springMVC-03/</url>
      
        <content type="html"><![CDATA[<h1 id="springmvc-day03"><a href="#springmvc-day03" class="headerlink" title="springmvc-day03"></a>springmvc-day03</h1><h2 id="第一章-拦截器-重点"><a href="#第一章-拦截器-重点" class="headerlink" title="第一章 拦截器(重点)"></a>第一章 拦截器(重点)</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><h4 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h4><h5 id="1-1-1-生活中坐地铁的场景"><a href="#1-1-1-生活中坐地铁的场景" class="headerlink" title="1.1.1 生活中坐地铁的场景"></a>1.1.1 生活中坐地铁的场景</h5><p>为了提高乘车效率，在乘客进入站台前统一检票： </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_001.png"></p><h5 id="1-1-2-程序中的校验登录场景"><a href="#1-1-2-程序中的校验登录场景" class="headerlink" title="1.1.2 程序中的校验登录场景"></a>1.1.2 程序中的校验登录场景</h5><p>在程序中，使用拦截器在请求到达具体 handler 方法前，统一执行检测。 </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_002.png"></p><h4 id="1-2-拦截器与过滤器的对比"><a href="#1-2-拦截器与过滤器的对比" class="headerlink" title="1.2 拦截器与过滤器的对比"></a>1.2 拦截器与过滤器的对比</h4><h5 id="1-2-1-相同点"><a href="#1-2-1-相同点" class="headerlink" title="1.2.1 相同点"></a>1.2.1 相同点</h5><p>三要素相同</p><ul><li>拦截(配置拦截路径)：必须先把请求拦住，才能执行后续操作</li><li>过滤(根据某种规则/业务逻辑进行筛选)：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行(满足规则/筛选条件，就让你访问你想访问的资源)：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul><h5 id="1-2-2-不同点"><a href="#1-2-2-不同点" class="headerlink" title="1.2.2 不同点"></a>1.2.2 不同点</h5><ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求(handler方法、view-controller跳转页面)</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul><h3 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2. 具体使用"></a>2. 具体使用</h3><h4 id="2-1-创建拦截器类"><a href="#2-1-创建拦截器类" class="headerlink" title="2.1 创建拦截器类"></a>2.1 创建拦截器类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Process01Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br> <br>    Logger logger = LoggerFactory.getLogger(<span class="hljs-keyword">this</span>.getClass());<br> <br>    <span class="hljs-comment">// 在处理请求的目标 handler 方法前执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <br>        logger.debug(<span class="hljs-string">&quot;Process01Interceptor preHandle方法&quot;</span>);<br>         <br>        <span class="hljs-comment">// 返回true：放行</span><br>        <span class="hljs-comment">// 返回false：不放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 在目标 handler 方法之后，渲染视图之前</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>        logger.debug(<span class="hljs-string">&quot;Process01Interceptor postHandle方法&quot;</span>);<br>        <br>    &#125;<br> <br>    <span class="hljs-comment">// 渲染视图之后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <br>        logger.debug(<span class="hljs-string">&quot;Process01Interceptor afterCompletion方法&quot;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>单个拦截器执行顺序</strong>：</p><ul><li>preHandle() 方法</li><li>目标 handler 方法</li><li>postHandle() 方法</li><li>渲染视图</li><li>afterCompletion() 方法</li></ul><h4 id="2-2-注册拦截器"><a href="#2-2-注册拦截器" class="headerlink" title="2.2 注册拦截器"></a>2.2 注册拦截器</h4><h5 id="2-2-1-默认拦截全部请求"><a href="#2-2-1-默认拦截全部请求" class="headerlink" title="2.2.1 默认拦截全部请求"></a>2.2.1 默认拦截全部请求</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 直接通过内部 bean 配置的拦截器默认拦截全部请求（SpringMVC 范围内） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.Demo01Interceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-2-配置拦截路径"><a href="#2-2-2-配置拦截路径" class="headerlink" title="2.2.2 配置拦截路径"></a>2.2.2 配置拦截路径</h5><h6 id="2-2-2-1-精确匹配"><a href="#2-2-2-1-精确匹配" class="headerlink" title="2.2.2.1 精确匹配"></a>2.2.2.1 精确匹配</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 具体配置拦截器可以指定拦截的请求地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 精确匹配 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/hello/sayHello&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.Demo01Interceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-2-2-2-模糊匹配：匹配单层路径"><a href="#2-2-2-2-模糊匹配：匹配单层路径" class="headerlink" title="2.2.2.2 模糊匹配：匹配单层路径"></a>2.2.2.2 模糊匹配：匹配单层路径</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- /*匹配路径中的一层 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/hello/*&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.Demo01Interceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-2-2-3-模糊匹配：匹配多层路径"><a href="#2-2-2-3-模糊匹配：匹配多层路径" class="headerlink" title="2.2.2.3 模糊匹配：匹配多层路径"></a>2.2.2.3 模糊匹配：匹配多层路径</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--模糊匹配多级目录--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/hello/**&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--排除--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/hello/sayHello&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.Demo01Interceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-多个拦截器执行顺序"><a href="#2-3-多个拦截器执行顺序" class="headerlink" title="2.3 多个拦截器执行顺序"></a>2.3 多个拦截器执行顺序</h4><ul><li>preHandle()方法：和配置的顺序一样</li><li>目标handler方法</li><li>postHandle()方法：和配置的顺序相反</li><li>渲染视图</li><li>afterCompletion()方法：和配置的顺序相反</li></ul><h2 id="第二章-类型转换"><a href="#第二章-类型转换" class="headerlink" title="第二章 类型转换"></a>第二章 类型转换</h2><p>SpringMVC 将『把请求参数注入到 POJO 对象』这个操作称为<strong>『数据绑定』</strong>，英文单词是 binding。数据类型的转换和格式化就发生在数据绑定的过程中。 类型转换和格式化是密不可分的两个过程，很多带格式的数据必须明确指定格式之后才可以进行类型转换。最典型的就是日期类型。 </p><h3 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1. 自动类型转换"></a>1. 自动类型转换</h3><p>HTTP 协议是一个无类型的协议，我们在服务器端接收到请求参数等形式的数据时，本质上都是字符串类型。请看 javax.servlet.ServletRequest 接口中获取全部请求参数的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, String[]&gt; getParameterMap();<br></code></pre></td></tr></table></figure><p>而我们在实体类当中需要的类型是非常丰富的。对此，SpringMVC 对基本数据类型提供了自动的类型转换。例如：请求参数传入“100”字符串，我们实体类中需要的是 Integer 类型，那么 SpringMVC 会自动将字符串转换为 Integer 类型注入实体类。</p><h3 id="2-日期和数值类型转换"><a href="#2-日期和数值类型转换" class="headerlink" title="2. 日期和数值类型转换"></a>2. 日期和数值类型转换</h3><h4 id="2-1-通过注解设定数据格式"><a href="#2-1-通过注解设定数据格式" class="headerlink" title="2.1 通过注解设定数据格式"></a>2.1 通过注解设定数据格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.format.annotation.DateTimeFormat;<br><span class="hljs-keyword">import</span> org.springframework.format.annotation.NumberFormat;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.pojo</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-07  11:26</span><br><span class="hljs-comment"> * SpringMVC提供了一些注解，可以让我们进行一些手动类型转换</span><br><span class="hljs-comment"> * 1. DateTimeFormat注解:可以对日期时间类型进行转换</span><br><span class="hljs-comment"> * 2. NumberFormat注解:可以对数值类型进行转换</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> Date productDate;<br><br>    <span class="hljs-meta">@NumberFormat(pattern = &quot;###,###,###.###&quot;)</span><br>    <span class="hljs-keyword">private</span> Double productPrice;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-前端表单"><a href="#2-2-前端表单" class="headerlink" title="2.2 前端表单"></a>2.2 前端表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/springmvcday0303/hello/saveProduct&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            生产日期：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1992-10-15 17:15:06&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>            产品价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productPrice&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111,222,333.444&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-handler-方法"><a href="#2-3-handler-方法" class="headerlink" title="2.3 handler 方法"></a>2.3 handler 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/saveProduct&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveProduct</span><span class="hljs-params">(Product product)</span></span>&#123;<br>    logger.debug(product.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-转换失败后处理方式"><a href="#2-4-转换失败后处理方式" class="headerlink" title="2.4 转换失败后处理方式"></a>2.4 转换失败后处理方式</h4><h5 id="2-4-1-默认结果"><a href="#2-4-1-默认结果" class="headerlink" title="2.4.1 默认结果"></a>2.4.1 默认结果</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_003.png"></p><h5 id="2-4-2-BindingResult-接口"><a href="#2-4-2-BindingResult-接口" class="headerlink" title="2.4.2 BindingResult 接口"></a>2.4.2 BindingResult 接口</h5><p>BindingResult 接口和它的父接口 Errors 中定义了很多和数据绑定相关的方法，如果在数据绑定过程中发生了错误，那么通过这个接口类型的对象就可以获取到相关错误信息。 </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_004.png"></p><h5 id="2-4-3-重构-handler-方法"><a href="#2-4-3-重构-handler-方法" class="headerlink" title="2.4.3 重构 handler 方法"></a>2.4.3 重构 handler 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/saveProduct&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveProduct</span><span class="hljs-params">(Product product, BindingResult bindingResult)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>        <span class="hljs-comment">//跳转到错误页面:显示错误数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>    logger.debug(product.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-4-在页面上显示错误消息"><a href="#2-4-4-在页面上显示错误消息" class="headerlink" title="2.4.4 在页面上显示错误消息"></a>2.4.4 在页面上显示错误消息</h5><p>页面是error.html，放在Thymeleaf前后缀控制范围之内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 从请求域获取实体类信息时，属性名是按照类名首字母小写的规则 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- $&#123;注入请求参数的实体类.出问题的字段&#125; --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:errors</span>=<span class="hljs-string">&quot;$&#123;product.productDate&#125;&quot;</span>&gt;</span>这里显示具体错误信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:errors</span>=<span class="hljs-string">&quot;$&#123;product.productPrice&#125;&quot;</span>&gt;</span>这里显示具体错误信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-自定义类型转换器"><a href="#3-自定义类型转换器" class="headerlink" title="3. 自定义类型转换器"></a>3. 自定义类型转换器</h3><h4 id="3-1-创建实体类"><a href="#3-1-创建实体类" class="headerlink" title="3.1 创建实体类"></a>3.1 创建实体类</h4><h5 id="3-1-1-Address"><a href="#3-1-1-Address" class="headerlink" title="3.1.1 Address"></a>3.1.1 Address</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String street;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-2-Student"><a href="#3-1-2-Student" class="headerlink" title="3.1.2 Student"></a>3.1.2 Student</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> Date productDate;<br><br>    <span class="hljs-meta">@NumberFormat(pattern = &quot;###,###,###.###&quot;)</span><br>    <span class="hljs-keyword">private</span> Double productPrice;<br><br>    <span class="hljs-keyword">private</span> Address productAddress;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-表单"><a href="#3-2-表单" class="headerlink" title="3.2 表单"></a>3.2 表单</h4><p>现在我们希望通过一个文本框输入约定格式的字符串，然后转换为我们需要的类型，所以必须通过自定义类型转换器来实现，否则 SpringMVC 无法识别。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/springmvcday0303/hello/saveProduct&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    生产日期：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1992-10-15 17:15:06&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    产品价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productPrice&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111,222,333.444&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    生产地: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;productAddress&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广东省,深圳市,宝安区航城街道&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-handler-方法"><a href="#3-3-handler-方法" class="headerlink" title="3.3 handler 方法"></a>3.3 handler 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/saveProduct&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveProduct</span><span class="hljs-params">(Product product, BindingResult bindingResult)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>        <span class="hljs-comment">//跳转到错误页面:显示错误数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>    logger.debug(product.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在目前代码的基础上，我们没有提供自定义类型转换器，所以处理请求时看到如下错误日志：</p><blockquote><p>Field error in object ‘student’ on field ‘address’: rejected value [aaa,bbb,ccc]; codes [typeMismatch.student.address,typeMismatch.address,typeMismatch.com.atguigu.mvc.entity.Address,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [student.address,address]; arguments []; default message [address]]; default message [Failed to convert property value of type ‘java.lang.String’ to required type ‘com.atguigu.mvc.entity.Address’ for property ‘address’; nested exception is java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.atguigu.mvc.entity.Address’ for property ‘address’: no matching editors or conversion strategy found]]]</p></blockquote><p>页面返回 400。</p><h4 id="3-4-创建自定义类型转换器类"><a href="#3-4-创建自定义类型转换器类" class="headerlink" title="3.4 创建自定义类型转换器类"></a>3.4 创建自定义类型转换器类</h4><p>实现接口：org.springframework.core.convert.converter.Converter&lt;S,T&gt;</p><p>泛型 S：源类型（本例中是 String 类型）</p><p>泛型 T：目标类型（本例中是 Address 类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.converter;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Address;<br><span class="hljs-keyword">import</span> org.springframework.core.convert.converter.Converter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.converter</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-07  14:00</span><br><span class="hljs-comment"> * 编写自定义类型转换器:</span><br><span class="hljs-comment"> * 1. 写一个类实现Converter接口</span><br><span class="hljs-comment"> * 2. 重写convert方法进行转换</span><br><span class="hljs-comment"> * 3. 在springmvc的配置文件中配置类型转换器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddressConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">String</span> , <span class="hljs-title">Address</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">convert</span><span class="hljs-params">(String source)</span> </span>&#123;<br>        <span class="hljs-comment">//source就是要进行转换的那个字符串</span><br>        <span class="hljs-comment">//1. 解析字符串:获取省、市、街道</span><br>        String[] strs = source.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-comment">//2. 创建一个Address对象</span><br>        Address address = <span class="hljs-keyword">new</span> Address();<br>        <span class="hljs-comment">//3. 将省、市、街道设置到Address对象中</span><br>        address.setProvince(strs[<span class="hljs-number">0</span>]);<br>        address.setCity(strs[<span class="hljs-number">1</span>]);<br>        address.setStreet(strs[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;U&gt; <span class="hljs-function">Converter&lt;String, U&gt; <span class="hljs-title">andThen</span><span class="hljs-params">(Converter&lt;? <span class="hljs-keyword">super</span> Address, ? extends U&gt; after)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-5-在springmvc配置文件中注册类型转换器"><a href="#3-5-在springmvc配置文件中注册类型转换器" class="headerlink" title="3.5 在springmvc配置文件中注册类型转换器"></a>3.5 在springmvc配置文件中注册类型转换器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在 mvc:annotation-driven 中注册 FormattingConversionServiceFactoryBean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;formattingConversionService&quot;</span>/&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 在 FormattingConversionServiceFactoryBean 中注册自定义类型转换器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formattingConversionService&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在 converters 属性中指定自定义类型转换器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.mvc.converter.AddressConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="第三章-数据校验-重要"><a href="#第三章-数据校验-重要" class="headerlink" title="第三章 数据校验(重要)"></a>第三章 数据校验(重要)</h2><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。 </p><h3 id="1-数据校验概述"><a href="#1-数据校验概述" class="headerlink" title="1. 数据校验概述"></a>1. 数据校验概述</h3><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。 </p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Null</td><td>标注值必须为 null</td></tr><tr><td>@NotNull</td><td>标注值不可为 null</td></tr><tr><td>@AssertTrue</td><td>标注值必须为 true</td></tr><tr><td>@AssertFalse</td><td>标注值必须为 false</td></tr><tr><td>@Min(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@Max(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@DecimalMin(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@DecimalMax(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@Size(max,min)</td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td>@Digits(integer,fratction)</td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td>@Past</td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td>@Future</td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td>@Pattern(value)</td><td>标注值必须符合指定的正则表达式</td></tr></tbody></table><p>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解： </p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Email</td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td>@Length</td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>标注值字符串不能是空字符串</td></tr><tr><td>@Range</td><td>标注值必须在指定的范围内</td></tr></tbody></table><p>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注解驱动 mvc:annotation-driven 的方式进行数据校验。Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</p><p>配置 mvc:annotation-driven 后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过<strong>在处理方法的入参上标注 @Validated 注解</strong>即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</p><h3 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h3><p>前提:1.  springmvc环境   2. Tomcat8及以上版本</p><h4 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-应用校验规则"><a href="#2-2-应用校验规则" class="headerlink" title="2.2 应用校验规则"></a>2.2 应用校验规则</h4><h5 id="2-2-1-给要进行校验的字段添加上校验规则注解"><a href="#2-2-1-给要进行校验的字段添加上校验规则注解" class="headerlink" title="2.2.1 给要进行校验的字段添加上校验规则注解"></a>2.2.1 给要进行校验的字段添加上校验规则注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">President</span> </span>&#123;<br>    <span class="hljs-comment">// 字符串长度：[3,6]</span><br>    <span class="hljs-meta">@Size(min = 3, max = 6)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-comment">// 字符串必须满足Email格式</span><br>    <span class="hljs-meta">@Email</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-2-给handler方法的形参加上Validated"><a href="#2-2-2-给handler方法的形参加上Validated" class="headerlink" title="2.2.2 给handler方法的形参加上Validated"></a>2.2.2 给handler方法的形参加上Validated</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/savePresident&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">savePresident</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> President president)</span></span>&#123;<br>    logger.debug(president.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-校验失败效果"><a href="#2-3-校验失败效果" class="headerlink" title="2.3 校验失败效果"></a>2.3 校验失败效果</h4><p>日志：</p><blockquote><p>Field error in object ‘president’ on field ‘email’: rejected value [aa]; codes [Email.president.email,Email.email,Email.java.lang.String,Email]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [president.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@4a6addb7,.*]; default message [不是一个合法的电子邮件地址] Field error in object ‘president’ on field ‘email’: rejected value [aa]; codes [Size.president.email,Size.email,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [president.email,email]; arguments []; default message [email],6,3]; default message [个数必须在3和6之间]]]</p></blockquote><p>同时页面返回 400。</p><h4 id="2-4-显示友好的错误提示"><a href="#2-4-显示友好的错误提示" class="headerlink" title="2.4 显示友好的错误提示"></a>2.4 显示友好的错误提示</h4><h5 id="2-4-1-重构-handler-方法"><a href="#2-4-1-重构-handler-方法" class="headerlink" title="2.4.1 重构 handler 方法"></a>2.4.1 重构 handler 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save/president&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">savePresident</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        // 在实体类参数和 BindingResult 之间不能有任何其他参数</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@Validated</span> President president, BindingResult bindingResult)</span> </span>&#123;<br> <br>    <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>     <br>    logger.debug(president.getEmail());<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-2-准备错误信息页面"><a href="#2-4-2-准备错误信息页面" class="headerlink" title="2.4.2 准备错误信息页面"></a>2.4.2 准备错误信息页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>系统信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 从请求域获取实体类信息时，属性名是按照类名首字母小写的规则 --&gt;</span><br><span class="hljs-comment">&lt;!-- $&#123;注入请求参数的实体类.出问题的字段&#125; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:errors</span>=<span class="hljs-string">&quot;$&#123;president.email&#125;&quot;</span>&gt;</span>这里显示系统提示消息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="第四章-异常映射"><a href="#第四章-异常映射" class="headerlink" title="第四章 异常映射"></a>第四章 异常映射</h2><h3 id="1-为什么需要异常映射"><a href="#1-为什么需要异常映射" class="headerlink" title="1. 为什么需要异常映射"></a>1. 为什么需要异常映射</h3><p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方法处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。 </p><p>异常映射可以将异常类型和某个具体的视图关联起来，建立映射关系。好处是可以通过 SpringMVC 框架来帮助我们管理异常。</p><ul><li>声明式管理异常：在配置文件中指定异常类型和视图之间的对应关系。在配置文件或注解类中统一管理。</li><li>编程式管理异常：需要我们自己手动 try … catch … 捕获异常，然后再手动跳转到某个页面。</li></ul><h3 id="2-异常映射的优势"><a href="#2-异常映射的优势" class="headerlink" title="2. 异常映射的优势"></a>2. 异常映射的优势</h3><ul><li>使用声明式代替编程式来实现异常管理<ul><li>让异常控制和核心业务解耦，二者各自维护，结构性更好</li></ul></li><li>整个项目层面使用同一套规则来管理异常<ul><li>整个项目代码风格更加统一、简洁</li><li>便于团队成员之间的彼此协作</li></ul></li></ul><h3 id="3-基于-XML-的异常映射"><a href="#3-基于-XML-的异常映射" class="headerlink" title="3. 基于 XML 的异常映射"></a>3. 基于 XML 的异常映射</h3><h4 id="3-1-XML配置"><a href="#3-1-XML配置" class="headerlink" title="3.1 XML配置"></a>3.1 XML配置</h4><p>SpringMVC 会根据异常映射信息，在捕获到指定异常对象后，将异常对象存入请求域，然后转发到和异常类型关联的视图。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置异常处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exceptionResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置异常映射关系 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- key属性：指定异常类型 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 文本标签体：和异常类型对应的逻辑视图 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error-arith<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ClassNotFoundException&quot;</span>&gt;</span>error-class<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.RuntimeException&quot;</span>&gt;</span>error-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            SimpleMappingExceptionResolver在处理异常的时候，会将异常对象存储到请求域中</span><br><span class="hljs-comment">            我们下面的配置，就是用于指定将异常对象存储进请求域的时候，使用的是key叫什么</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;atguiguException&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-异常范围"><a href="#3-2-异常范围" class="headerlink" title="3.2 异常范围"></a>3.2 异常范围</h4><p>如果在配置文件中，发现有多个匹配的异常类型，那么 SpringMVC 会采纳范围上最接近的异常映射关系。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error-arith<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.RuntimeException&quot;</span>&gt;</span>error-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-基于注解的异常映射"><a href="#4-基于注解的异常映射" class="headerlink" title="4. 基于注解的异常映射"></a>4. 基于注解的异常映射</h3><h4 id="4-1-创建异常处理器类"><a href="#4-1-创建异常处理器类" class="headerlink" title="4.1 创建异常处理器类"></a>4.1 创建异常处理器类</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_005.png"></p><h4 id="4-2-异常处理器对象加入-IOC-容器"><a href="#4-2-异常处理器对象加入-IOC-容器" class="headerlink" title="4.2 异常处理器对象加入 IOC 容器"></a>4.2 异常处理器对象加入 IOC 容器</h4><h5 id="4-2-1-包扫描"><a href="#4-2-1-包扫描" class="headerlink" title="4.2.1 包扫描"></a>4.2.1 包扫描</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.包扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-2-2-给异常处理器类标记注解"><a href="#4-2-2-给异常处理器类标记注解" class="headerlink" title="4.2.2 给异常处理器类标记注解"></a>4.2.2 给异常处理器类标记注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 异常处理器类需要使用 @ControllerAdvice 注解标记</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExceptionHandler</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-声明处理异常的方法"><a href="#4-3-声明处理异常的方法" class="headerlink" title="4.3 声明处理异常的方法"></a>4.3 声明处理异常的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @ExceptionHandler注解：标记异常处理方法</span><br><span class="hljs-comment">// value属性：指定匹配的异常类型</span><br><span class="hljs-comment">// 异常类型的形参：SpringMVC 捕获到的异常对象</span><br><span class="hljs-meta">@ExceptionHandler(value = NullPointerException.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">resolveNullPointerException</span><span class="hljs-params">(Exception e, Model model)</span> </span>&#123;<br> <br>    <span class="hljs-comment">// 我们可以自己手动将异常对象存入模型</span><br>    model.addAttribute(<span class="hljs-string">&quot;atguiguException&quot;</span>, e);<br> <br>    <span class="hljs-comment">// 返回逻辑视图名称</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error-nullpointer&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当同一个异常类型在基于 XML 和注解的配置中都能够找到对应的映射，那么以注解为准。 </p><h3 id="5-区分请求类型"><a href="#5-区分请求类型" class="headerlink" title="5. 区分请求类型"></a>5. 区分请求类型</h3><h4 id="5-1-为什么要区分请求类型"><a href="#5-1-为什么要区分请求类型" class="headerlink" title="5.1 为什么要区分请求类型"></a>5.1 为什么要区分请求类型</h4><p>异常处理机制和拦截器机制都面临这样的问题： </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_006.png"></p><h4 id="5-2-判断依据"><a href="#5-2-判断依据" class="headerlink" title="5.2 判断依据"></a>5.2 判断依据</h4><p>查看请求消息头中是否包含 Ajax 请求独有的特征：</p><ul><li>Accept 请求消息头：包含 application/json</li><li>X-Requested-With 请求消息头：包含 XMLHttpRequest</li></ul><p>两个条件满足一个即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断请求类型，如果返回true就是同步请求，返回false就是异步请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judgeRequestType</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>    <span class="hljs-comment">//加入代码判断当前请求是同步请求还是异步请求:通过accept或者X-Requested-With</span><br>    String acceptHeader = request.getHeader(<span class="hljs-string">&quot;Accept&quot;</span>);<br>    String xRequestHeader = request.getHeader(<span class="hljs-string">&quot;X-Requested-With&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> !((acceptHeader != <span class="hljs-keyword">null</span> &amp;&amp; acceptHeader.contains(<span class="hljs-string">&quot;application/json&quot;</span>)) ||<br>             (xRequestHeader != <span class="hljs-keyword">null</span> &amp;&amp; xRequestHeader.equals(<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-重构异常处理器兼容两种请求的处理方法"><a href="#5-3-重构异常处理器兼容两种请求的处理方法" class="headerlink" title="5.3 重构异常处理器兼容两种请求的处理方法"></a>5.3 重构异常处理器兼容两种请求的处理方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">resolveNullPointerException</span><span class="hljs-params">(HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          Exception e, Model model)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//这个方法处理空指针异常</span><br>    <span class="hljs-keyword">if</span>(!judgeRequestType(request))&#123;<br>        <span class="hljs-comment">//说明当前是异步请求:使用response向客户端响应异常信息</span><br>        response.getWriter().write(e.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//要获取异常信息，并且将异常信息存储到请求域</span><br>    model.addAttribute(<span class="hljs-string">&quot;atguiguException&quot;</span>,e);<br>    <span class="hljs-comment">//这个方法返回:异常处理页面的逻辑视图</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第五章-文件上传-重要"><a href="#第五章-文件上传-重要" class="headerlink" title="第五章 文件上传(重要)"></a>第五章 文件上传(重要)</h2><h3 id="1-前端表单"><a href="#1-前端表单" class="headerlink" title="1. 前端表单"></a>1. 前端表单</h3><p>需要满足的要求:</p><ul><li>第一点：请求方式必须是 POST</li><li>第二点：请求体的编码方式必须是 multipart/form-data（通过 form 标签的 enctype 属性设置）</li><li>第三点：使用 input 标签、type 属性设置为 file 来生成文件上传框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/atguigu/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;picture&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>上传头像<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>     <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-SpringMVC-环境"><a href="#2-SpringMVC-环境" class="headerlink" title="2. SpringMVC 环境"></a>2. SpringMVC 环境</h3><h4 id="2-1-引入依赖-1"><a href="#2-1-引入依赖-1" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><p>在 SpringMVC 的配置文件中加入 multipart 类型数据的解析器： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 由于上传文件的表单请求体编码方式是 multipart/form-data 格式，所以要在解析器中指定字符集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-handler-方法接收数据"><a href="#3-handler-方法接收数据" class="headerlink" title="3. handler 方法接收数据"></a>3. handler 方法接收数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/simple/upload&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doUpload</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"> </span></span><br><span class="hljs-params"><span class="hljs-function">        // 表单提交的数据仍然是请求参数，所以使用 <span class="hljs-meta">@RequestParam</span> 注解接收</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;nickName&quot;)</span> String nickName,</span></span><br><span class="hljs-params"><span class="hljs-function"> </span></span><br><span class="hljs-params"><span class="hljs-function">        // 对于上传的文件使用 MultipartFile 类型接收其相关数据</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;picture&quot;)</span> MultipartFile picture</span></span><br><span class="hljs-params"><span class="hljs-function">        )</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br> <br>    String inputName = picture.getName();<br>    logger.debug(<span class="hljs-string">&quot;文件上传表单项的 name 属性值：&quot;</span> + inputName);<br> <br>    <span class="hljs-comment">// 获取这个数据通常都是为了获取文件本身的扩展名</span><br>    String originalFilename = picture.getOriginalFilename();<br>    logger.debug(<span class="hljs-string">&quot;文件在用户本地原始的文件名：&quot;</span> + originalFilename);<br> <br>    String contentType = picture.getContentType();<br>    logger.debug(<span class="hljs-string">&quot;文件的内容类型：&quot;</span> + contentType);<br> <br>    <span class="hljs-keyword">boolean</span> empty = picture.isEmpty();<br>    logger.debug(<span class="hljs-string">&quot;文件是否为空：&quot;</span> + empty);<br> <br>    <span class="hljs-keyword">long</span> size = picture.getSize();<br>    logger.debug(<span class="hljs-string">&quot;文件大小：&quot;</span> + size);<br> <br>    <span class="hljs-keyword">byte</span>[] bytes = picture.getBytes();<br>    logger.debug(<span class="hljs-string">&quot;文件二进制数据的字节数组：&quot;</span> + Arrays.asList(bytes));<br> <br>    InputStream inputStream = picture.getInputStream();<br>    logger.debug(<span class="hljs-string">&quot;读取文件数据的输入流对象：&quot;</span> + inputStream);<br> <br>    Resource resource = picture.getResource();<br>    logger.debug(<span class="hljs-string">&quot;代表当前 MultiPartFile 对象的资源对象&quot;</span> + resource);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-MultipartFile接口介绍"><a href="#4-MultipartFile接口介绍" class="headerlink" title="4. MultipartFile接口介绍"></a>4. MultipartFile接口介绍</h3><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_007.png"></p><h3 id="5-文件转存"><a href="#5-文件转存" class="headerlink" title="5. 文件转存"></a>5. 文件转存</h3><h4 id="5-1-底层原理"><a href="#5-1-底层原理" class="headerlink" title="5.1 底层原理"></a>5.1 底层原理</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_008.png"></p><h4 id="5-2-三种去向"><a href="#5-2-三种去向" class="headerlink" title="5.2 三种去向"></a>5.2 三种去向</h4><h5 id="5-2-1-本地转存"><a href="#5-2-1-本地转存" class="headerlink" title="5.2.1 本地转存"></a>5.2.1 本地转存</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_009.png"></p><h6 id="5-2-1-1-创建保存文件的目录"><a href="#5-2-1-1-创建保存文件的目录" class="headerlink" title="5.2.1.1  创建保存文件的目录"></a>5.2.1.1  <strong>创建保存文件的目录</strong></h6><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_010.png"></p><p>这个目录如果是空目录，那么服务器部署运行时很容易会忽略这个目录。为了避免这个问题，在这个目录下随便创建一个文件，随便写点内容即可。 </p><h6 id="5-2-1-2-编写转存代码"><a href="#5-2-1-2-编写转存代码" class="headerlink" title="5.2.1.2  编写转存代码"></a>5.2.1.2  <strong>编写转存代码</strong></h6><p>下面是负责处理文件上传请求的 handler 方法的转存部分： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ServletContext servletContext;<br>Logger logger = LoggerFactory.getLogger(<span class="hljs-keyword">this</span>.getClass());<br><span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;nickname&quot;)</span> String nickname,<span class="hljs-meta">@RequestParam(&quot;picture&quot;)</span> MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//获取请求参数(除了文件之外)，还是和以前一样的方式获取</span><br>    logger.debug(nickname);<br>    <span class="hljs-comment">//multipartFile对象就表示客户端上传的文件</span><br>    <span class="hljs-comment">//1. 指定转存的目录路径:动态获取部署的目录路径</span><br>    String dirPath = servletContext.getRealPath(<span class="hljs-string">&quot;head-picture&quot;</span>);<br><br>    <span class="hljs-comment">//2. 获取文件名:在获取到原文件的文件名之后，将其文件名改成一个唯一的名字，这样就能保证不会出现上传文件同名的情况</span><br>    String UUIDName = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//获取文件名的后缀</span><br>    String originalFilename = multipartFile.getOriginalFilename();<br>    String suffix = originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>    <span class="hljs-comment">//唯一的文件名就是UUIDName拼接后缀</span><br>    String fileName = UUIDName + suffix;<br>    <span class="hljs-comment">//要将该文件转存到目录中</span><br>    multipartFile.transferTo(<span class="hljs-keyword">new</span> File(dirPath+<span class="hljs-string">&quot;/&quot;</span>+fileName));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-2-1-3-缺陷"><a href="#5-2-1-3-缺陷" class="headerlink" title="5.2.1.3 缺陷"></a>5.2.1.3 缺陷</h6><ul><li>Web 应用重新部署时通常都会清理旧的构建结果，此时用户以前上传的文件会被删除，导致数据丢失。</li><li>项目运行很长时间后，会导致上传的文件积累非常多，体积非常大，从而拖慢 Tomcat 运行速度。</li><li>当服务器以集群模式运行时，文件上传到集群中的某一个实例，其他实例中没有这个文件，就会造成数据不一致。</li><li>不支持动态扩容，一旦系统增加了新的硬盘或新的服务器实例，那么上传、下载时使用的路径都需要跟着变化，导致 Java 代码需要重新编写、重新编译，进而导致整个项目重新部署。</li></ul><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_011.png"></p><h5 id="5-2-2-文件服务器"><a href="#5-2-2-文件服务器" class="headerlink" title="5.2.2 文件服务器"></a>5.2.2 文件服务器</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_012.png"></p><h6 id="5-2-2-1-优势"><a href="#5-2-2-1-优势" class="headerlink" title="5.2.2.1 优势"></a>5.2.2.1 优势</h6><ul><li>不受 Web 应用重新部署影响</li><li>在应用服务器集群环境下不会导致数据不一致</li><li>针对文件读写进行专门的优化，性能有保障</li><li>能够实现动态扩容</li></ul><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_013.png"></p><h6 id="5-2-2-2-常见的文件服务器类型"><a href="#5-2-2-2-常见的文件服务器类型" class="headerlink" title="5.2.2.2 常见的文件服务器类型"></a>5.2.2.2 常见的文件服务器类型</h6><ul><li>第三方平台：<ul><li>阿里的 OSS 对象存储服务</li><li>七牛云</li></ul></li><li>自己搭建服务器：FastDFS等</li></ul><h5 id="5-2-3-上传到其他模块-了解"><a href="#5-2-3-上传到其他模块-了解" class="headerlink" title="5.2.3 上传到其他模块(了解)"></a>5.2.3 上传到其他模块(了解)</h5><p>这种情况肯定出现在分布式架构中，常规业务功能不会这么做，采用这个方案的一定的特殊情况。 </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-03/tu_014.png"></p><h2 id="第六章-文件下载-了解"><a href="#第六章-文件下载-了解" class="headerlink" title="第六章 文件下载(了解)"></a>第六章 文件下载(了解)</h2><h3 id="1-原始形态"><a href="#1-原始形态" class="headerlink" title="1. 原始形态"></a>1. 原始形态</h3><p>使用链接地址指向要下载的文件。此时浏览器会尽可能解析对应的文件，只要是能够在浏览器窗口展示的，就都会直接显示，而不是提示下载。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;download/hello.atguigu&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;download/tank.jpg&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;download/chapter04.zip&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>上面例子中，只有 chapter04.zip 文件是直接提示下载的，其他两个都是直接显示。 </p><h3 id="2-明确要求浏览器提示下载"><a href="#2-明确要求浏览器提示下载" class="headerlink" title="2. 明确要求浏览器提示下载"></a>2. 明确要求浏览器提示下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ServletContext servletContext;<br><span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title">download</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;fileName&quot;)</span> String fileName)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//用来下载文件:</span><br>    <span class="hljs-comment">//1. 使用输入流读取要下载的文件</span><br>    <span class="hljs-comment">//1.1 获取要下载的文件路径</span><br>    String downloadPath = servletContext.getRealPath(<span class="hljs-string">&quot;download/&quot;</span>+fileName);<br>    <span class="hljs-comment">//1.2 读取要下载的文件</span><br>    FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(downloadPath);<br>    <span class="hljs-keyword">int</span> len = fileInputStream.available();<br>    <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[len];<br>    fileInputStream.read(buffer);<br><br>    <span class="hljs-comment">//2. 将要下载的文件输出到浏览器:使用响应</span><br>    <span class="hljs-comment">//ResponseEntity表示响应实体:要下载的文件是通过响应体响应给客户端的</span><br>    <span class="hljs-comment">//创建添加响应头</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> HttpHeaders();<br>    <span class="hljs-comment">//获取要下载的文件的mime-type,设置Content-Type响应头</span><br>    String contentType = servletContext.getMimeType(fileName);<br>    headers.add(<span class="hljs-string">&quot;Content-Type&quot;</span>,contentType);<br><br>    <span class="hljs-comment">//Content-Disposition:响应头是指示客户端下载内容</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+fileName);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;&gt;(buffer, headers,HttpStatus.OK);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-典型应用场景举例"><a href="#3-典型应用场景举例" class="headerlink" title="3. 典型应用场景举例"></a>3. 典型应用场景举例</h3><p>我们目前实现的是一个较为简单的下载，可以用在下面的一些场合：</p><ul><li>零星小文件下载</li><li>将系统内部的数据导出为 Excel、PDF 等格式，然后以下载的方式返回给用户</li></ul>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC-04</title>
      <link href="/2021/12/13/springMVC-04/"/>
      <url>/2021/12/13/springMVC-04/</url>
      
        <content type="html"><![CDATA[<h1 id="springmvc-day04"><a href="#springmvc-day04" class="headerlink" title="springmvc-day04"></a>springmvc-day04</h1><h2 id="第一章-SpringMVC运行原理"><a href="#第一章-SpringMVC运行原理" class="headerlink" title="第一章 SpringMVC运行原理"></a>第一章 SpringMVC运行原理</h2><h3 id="第一节-启动过程"><a href="#第一节-启动过程" class="headerlink" title="第一节 启动过程"></a>第一节 启动过程</h3><h4 id="1-Servlet-生命周期回顾"><a href="#1-Servlet-生命周期回顾" class="headerlink" title="1. Servlet 生命周期回顾"></a>1. Servlet 生命周期回顾</h4><table><thead><tr><th>生命周期环节</th><th>调用的方法</th><th>时机</th><th>次数</th></tr></thead><tbody><tr><td>创建对象</td><td>无参构造器</td><td><strong>默认：第一次请求 修改：Web应用启动时</strong></td><td>一次</td></tr><tr><td>初始化</td><td>init(ServletConfig servletConfig)</td><td>创建对象后</td><td>一次</td></tr><tr><td>处理请求</td><td>service(ServletRequest servletRequest,  ServletResponse servletResponse)</td><td>接收到请求后</td><td>多次</td></tr><tr><td>清理操作</td><td>destroy()</td><td>Web应用卸载之前</td><td>一次</td></tr></tbody></table><h4 id="2-初始化操作调用路线图"><a href="#2-初始化操作调用路线图" class="headerlink" title="2. 初始化操作调用路线图"></a>2. 初始化操作调用路线图</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_001.png"></p><h4 id="3-IOC容器创建"><a href="#3-IOC容器创建" class="headerlink" title="3. IOC容器创建"></a>3. IOC容器创建</h4><p>所在类：org.springframework.web.servlet.FrameworkServlet </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> </span>&#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApplicationContextException(<br>                <span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br>                <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>                <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br>    ConfigurableWebApplicationContext wac =<br>            (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br>    wac.setEnvironment(getEnvironment());<br>    <br>    <span class="hljs-comment">// 设置父容器</span><br>    wac.setParent(parent);<br>    String configLocation = getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-keyword">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-将-IOC-容器对象存入应用域"><a href="#4-将-IOC-容器对象存入应用域" class="headerlink" title="4. 将 IOC 容器对象存入应用域"></a>4. 将 IOC 容器对象存入应用域</h4><p>所在类：org.springframework.web.servlet.FrameworkServlet </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title">initWebApplicationContext</span><span class="hljs-params">()</span> </span>&#123;<br>    WebApplicationContext rootContext =<br>            WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    WebApplicationContext wac = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.webApplicationContext != <span class="hljs-keyword">null</span>) &#123;<br>        wac = <span class="hljs-keyword">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-keyword">null</span>) &#123;<br>                    cwac.setParent(rootContext);<br>                &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;<br>        wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 创建 IOC 容器</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.onRefreshMonitor) &#123;<br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// 获取存入应用域时专用的属性名</span><br>        String attrName = getServletContextAttributeName();<br>        <br>        <span class="hljs-comment">// 存入</span><br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这一点的意义：SpringMVC 有一个工具方法，可以从应用域获取 IOC 容器对象的引用。</p><p>工具类：org.springframework.web.context.support.WebApplicationContextUtils</p><p>工具方法：getWebApplicationContext()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebApplicationContext <span class="hljs-title">getWebApplicationContext</span><span class="hljs-params">(ServletContext sc)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-请求映射初始化"><a href="#5-请求映射初始化" class="headerlink" title="5. 请求映射初始化"></a>5. 请求映射初始化</h4><p>FrameworkServlet.createWebApplicationContext()→configureAndRefreshWebApplicationContext()→wac.refresh()→触发刷新事件→org.springframework.web.servlet.DispatcherServlet.initStrategies()→org.springframework.web.servlet.DispatcherServlet.initHandlerMappings() </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_002.png"></p><h4 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h4><p>整个启动过程我们关心如下要点：</p><ul><li>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</li><li>DispatcherServlet 的父类是 FrameworkServlet。<ul><li>FrameworkServlet 负责框架本身相关的创建和初始化。</li><li>DispatcherServlet 负责请求处理相关的初始化。</li></ul></li><li>FrameworkServlet 创建 IOC 容器对象之后会存入应用域。</li><li>FrameworkServlet 完成初始化会调用 IOC 容器的刷新方法。</li><li>刷新方法完成触发刷新事件，在刷新事件的响应函数中，调用 DispatcherServlet 的初始化方法。</li><li>在 DispatcherServlet 的初始化方法中初始化了请求映射等。</li></ul><h2 id="第二章-请求处理过程"><a href="#第二章-请求处理过程" class="headerlink" title="第二章 请求处理过程"></a>第二章 请求处理过程</h2><h3 id="第一节-总体阶段"><a href="#第一节-总体阶段" class="headerlink" title="第一节 总体阶段"></a>第一节 总体阶段</h3><h4 id="1-流程描述"><a href="#1-流程描述" class="headerlink" title="1. 流程描述"></a>1. 流程描述</h4><ul><li>目标 handler 方法执行<strong>前</strong><ul><li>建立调用链，确定整个执行流程</li><li>拦截器的 preHandle() 方法</li><li>注入请求参数</li><li>准备目标 handler 方法所需所有参数</li></ul></li><li><strong>调用</strong>目标 handler 方法</li><li>目标 handler 方法执行<strong>后</strong><ul><li>拦截器的 postHandle() 方法</li><li>渲染视图</li><li>拦截器的 afterCompletion() 方法</li></ul></li></ul><h4 id="2-核心代码"><a href="#2-核心代码" class="headerlink" title="2. 核心代码"></a>2. 核心代码</h4><p>整个请求处理过程都是 doDispatch() 方法在宏观上协调和调度，把握了这个方法就理解了 SpringMVC 总体上是如何处理请求的。</p><p>所在类：org.springframework.web.servlet.<strong>DispatcherServlet</strong></p><p>所在方法：doDispatch()</p><p>核心方法中的核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><h3 id="第二节-调用前阶段"><a href="#第二节-调用前阶段" class="headerlink" title="第二节 调用前阶段"></a>第二节 调用前阶段</h3><h4 id="1-建立调用链"><a href="#1-建立调用链" class="headerlink" title="1. 建立调用链"></a>1. 建立调用链</h4><h5 id="1-1-相关组件"><a href="#1-1-相关组件" class="headerlink" title="1.1 相关组件"></a>1.1 相关组件</h5><p>全类名：org.springframework.web.servlet.HandlerExecutionChain </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_003.png"></p><p>拦截器索引默认是 -1，说明开始的时候，它指向第一个拦截器前面的位置。每执行一个拦截器，就把索引向前移动一个位置。所以这个索引每次都是指向当前拦截器。所以它相当于拦截器的<strong>指针</strong>。 </p><h5 id="1-2-对应操作"><a href="#1-2-对应操作" class="headerlink" title="1.2 对应操作"></a>1.2 对应操作</h5><p>所在类：org.springframework.web.servlet.handler.AbstractHandlerMapping </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_004.png"></p><p>结论：调用链是由拦截器和目标 handler 对象组成的。 </p><h4 id="2-调用拦截器-preHandle"><a href="#2-调用拦截器-preHandle" class="headerlink" title="2. 调用拦截器 preHandle()"></a>2. 调用拦截器 preHandle()</h4><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_005.png"></p><p>具体调用细节：正序调用</p><p>所在类：org.springframework.web.servlet.HandlerExecutionChain</p><p>所在方法：applyPreHandle</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_006.png"></p><p>从这部分代码我们也能看到，为什么拦截器中的 preHandle() 方法通过返回布尔值能够控制是否放行。</p><ul><li>每一个拦截器的 preHandle() 方法都返回 true：applyPreHandle() 方法返回 true，被取反就不执行 if 分支，继续执行后续操作，这就是放行。</li><li>任何一个拦截器的 preHandle() 方法返回 false：applyPreHandle() 方法返回 false，被取反执行 if 分支，return，导致 doDispatch() 方法结束，不执行后续操作，就是不放行。</li></ul><h4 id="3-调用handler方法"><a href="#3-调用handler方法" class="headerlink" title="3. 调用handler方法"></a>3. 调用handler方法</h4><h5 id="3-1-相关组件"><a href="#3-1-相关组件" class="headerlink" title="3.1 相关组件"></a>3.1 相关组件</h5><p>接口：org.springframework.web.servlet.HandlerAdapter</p><p>作用：字面含义是适配器的意思，具体功能有三个</p><ul><li>将请求参数绑定到实体类对象中</li><li>给目标 handler 方法准备所需的其他参数，例如：<ul><li>Model、ModelMap、Map……</li><li>原生 Servlet API：request、response、session……</li><li>BindingResult</li><li>@RequestParam 注解标记的零散请求参数</li><li>@PathVariable 注解标记的路径变量</li></ul></li><li>调用目标 handler 方法</li></ul><h5 id="3-2-创建并获取这个组件"><a href="#3-2-创建并获取这个组件" class="headerlink" title="3.2 创建并获取这个组件"></a>3.2 创建并获取这个组件</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_007.png"></p><h5 id="3-3-具体操作：调用目标-handler-方法"><a href="#3-3-具体操作：调用目标-handler-方法" class="headerlink" title="3.3 具体操作：调用目标 handler 方法"></a>3.3 具体操作：调用目标 handler 方法</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_008.png"></p><h5 id="3-4-具体操作：注入请求参数"><a href="#3-4-具体操作：注入请求参数" class="headerlink" title="3.4 具体操作：注入请求参数"></a>3.4 具体操作：注入请求参数</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_009.png">                         </p><p>通过反射给对应属性注入请求参数应该是下面的过程：</p><ul><li>获取请求参数名称</li><li>将请求参数名称首字母设定为大写</li><li>在首字母大写后的名称前附加 set，得到目标方法名</li><li>通过反射调用 setXxx() 方法</li></ul><h4 id="4-准备其他参数"><a href="#4-准备其他参数" class="headerlink" title="4. 准备其他参数"></a>4. 准备其他参数</h4><p>以 Model 为例来进行说明。</p><h5 id="4-1-背景"><a href="#4-1-背景" class="headerlink" title="4.1 背景"></a>4.1 背景</h5><p>在 handler 方法中，如果需要 Model、ModelMap、Map 等对象用来存放模型数据，那么直接在 handler 方法中声明这些类型的形参即可。</p><p>而不管我们声明 Model、ModelMap、Map 三者中的任何一个，其实实际传入的对象都是 BindingAwareModelMap 类型的。</p><h5 id="4-2-相关组件"><a href="#4-2-相关组件" class="headerlink" title="4.2 相关组件"></a>4.2 相关组件</h5><p>组件类：org.springframework.web.method.support.ModelAndViewContainer</p><p>相关属性：defaultModel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ModelMap defaultModel = <span class="hljs-keyword">new</span> BindingAwareModelMap();<br></code></pre></td></tr></table></figure><p>从这个属性的声明能够看出：defaultModel 直接就是用 BindingAwareModelMap 对象来初始化的。</p><h5 id="4-3-相关操作"><a href="#4-3-相关操作" class="headerlink" title="4.3 相关操作"></a>4.3 相关操作</h5><p>相关接口：org.springframework.web.servlet.HandlerAdapter</p><p>所在类：org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</p><p>所在方法：invokeHandlerMethod()</p><p>操作1：创建 ModelAndViewContainer 对象</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_010.png"></p><p>操作2：把 ModelAndViewContainer 对象传给 invokeAndHandle() 方法 </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_011.png"></p><h3 id="第三节-调用后阶段"><a href="#第三节-调用后阶段" class="headerlink" title="第三节 调用后阶段"></a>第三节 调用后阶段</h3><h4 id="1-调用拦截器的-postHandle-方法"><a href="#1-调用拦截器的-postHandle-方法" class="headerlink" title="1. 调用拦截器的 postHandle() 方法"></a>1. 调用拦截器的 postHandle() 方法</h4><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_012.png"></p><p>调用细节：从拦截器集合长度 - 1 开始循环，循环到 0 为止。所以是<strong>倒序</strong>执行 </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_013.png"></p><h4 id="2-渲染视图"><a href="#2-渲染视图" class="headerlink" title="2. 渲染视图"></a>2. 渲染视图</h4><h5 id="2-1-所有后续操作的入口"><a href="#2-1-所有后续操作的入口" class="headerlink" title="2.1 所有后续操作的入口"></a>2.1 所有后续操作的入口</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_014.png"></p><h5 id="2-2-后续细节1：处理异常"><a href="#2-2-后续细节1：处理异常" class="headerlink" title="2.2 后续细节1：处理异常"></a>2.2 后续细节1：处理异常</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：processDispatchResult()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_015.png"></p><h5 id="2-3-后续细节2：渲染视图"><a href="#2-3-后续细节2：渲染视图" class="headerlink" title="2.3 后续细节2：渲染视图"></a>2.3 后续细节2：渲染视图</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：processDispatchResult()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_016.png"></p><p>补充细节：模型数据存入请求域的具体位置</p><p>所在类：org.thymeleaf.context.WebEngineContext.RequestAttributesVariablesMap</p><p>所在方法：setVariable()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_018.png"></p><h4 id="3-调用拦截器的-afterCompletion-方法"><a href="#3-调用拦截器的-afterCompletion-方法" class="headerlink" title="3. 调用拦截器的 afterCompletion() 方法"></a>3. 调用拦截器的 afterCompletion() 方法</h4><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：processDispatchResult()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_017.png"></p><p>调用细节：从拦截器索引开始循环，直到循环变量 i 被减到 0 为止。这样的效果是前面执行拦截器到哪里，就从哪里倒回去执行；前面没有执行的拦截器，现在也不执行。 </p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_019.png"></p><h2 id="第三章-ContextLoaderListener"><a href="#第三章-ContextLoaderListener" class="headerlink" title="第三章 ContextLoaderListener"></a>第三章 ContextLoaderListener</h2><h3 id="第一节-概述"><a href="#第一节-概述" class="headerlink" title="第一节 概述"></a>第一节 概述</h3><p>目前情况：DispatcherServlet 加载 spring-mvc.xml，此时整个 Web 应用中只创建一个 IOC 容器。将来整合Mybatis、配置声明式事务，全部在 spring-mvc.xml 配置文件中配置也是可以的。可是这样会导致配置文件太长，不容易维护。</p><p>所以想到把配置文件分开：</p><ul><li>处理浏览器请求相关：spring-mvc.xml 配置文件</li><li>声明式事务和整合Mybatis相关：spring-persist.xml 配置文件</li></ul><p>配置文件分开之后，可以让 DispatcherServlet 加载多个配置文件。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果希望这两个配置文件使用不同的机制来加载：</p><ul><li>DispatcherServlet 加载 spring-mvc.xml 配置文件：它们和处理浏览器请求相关</li><li>ContextLoaderListener 加载 spring-persist.xml 配置文件：不需要处理浏览器请求，需要配置持久化层相关功能</li></ul><p>此时会带来一个新的问题：在 Web 一个应用中就会出现两个 IOC 容器</p><ul><li>DispatcherServlet 创建一个 IOC 容器</li><li>ContextLoaderListener 创建一个 IOC 容器</li></ul><p>注意：本节我们探讨的这个技术方案并不是<strong>『必须』</strong>这样做，而仅仅是<strong>『可以』</strong>这样做。</p><h3 id="第二节-配置-ContextLoaderListener"><a href="#第二节-配置-ContextLoaderListener" class="headerlink" title="第二节 配置 ContextLoaderListener"></a>第二节 配置 ContextLoaderListener</h3><h4 id="1-创建-spring-persist-xml"><a href="#1-创建-spring-persist-xml" class="headerlink" title="1. 创建 spring-persist.xml"></a>1. 创建 spring-persist.xml</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_020.png"></p><h4 id="2-配置-ContextLoaderListener"><a href="#2-配置-ContextLoaderListener" class="headerlink" title="2. 配置 ContextLoaderListener"></a>2. 配置 ContextLoaderListener</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 通过全局初始化参数指定 Spring 配置文件的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-persist.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定全类名，配置监听器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>执行时机</th><th>作用</th></tr></thead><tbody><tr><td>contextInitialized()</td><td>Web 应用启动时执行</td><td>创建并初始化 IOC 容器</td></tr><tr><td>contextDestroyed()</td><td>Web 应用卸载时执行</td><td>关闭 IOC 容器</td></tr></tbody></table><h4 id="3-ContextLoader"><a href="#3-ContextLoader" class="headerlink" title="3. ContextLoader"></a>3. ContextLoader</h4><h5 id="3-1-指定配置文件位置的参数名"><a href="#3-1-指定配置文件位置的参数名" class="headerlink" title="3.1 指定配置文件位置的参数名"></a>3.1 指定配置文件位置的参数名</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Name of servlet context parameter (i.e., &#123;<span class="hljs-doctag">@value</span>&#125;) that can specify the</span><br><span class="hljs-comment"> * config location for the root context, falling back to the implementation&#x27;s</span><br><span class="hljs-comment"> * default otherwise.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.web.context.support.XmlWebApplicationContext#DEFAULT_CONFIG_LOCATION</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CONFIG_LOCATION_PARAM = <span class="hljs-string">&quot;contextConfigLocation&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="3-2-初始化-IOC-容器"><a href="#3-2-初始化-IOC-容器" class="headerlink" title="3.2 初始化 IOC 容器"></a>3.2 初始化 IOC 容器</h5><p>方法名：initWebApplicationContext() </p><h5 id="3-3-创建-IOC-容器"><a href="#3-3-创建-IOC-容器" class="headerlink" title="3.3 创建 IOC 容器"></a>3.3 创建 IOC 容器</h5><p>方法名：createWebApplicationContext() </p><h3 id="第三节-探讨两个IOC容器之间的关系"><a href="#第三节-探讨两个IOC容器之间的关系" class="headerlink" title="第三节 探讨两个IOC容器之间的关系"></a>第三节 探讨两个IOC容器之间的关系</h3><p>打印两个 IOC 容器对象的 toString() 方法：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Object springIOC = servletContext.getAttribute(<span class="hljs-string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span><br>logger.debug(springIOC.toString());<br>Object springMVCIOC = servletContext.getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcherServlet&quot;</span>);<br>logger.debug(springMVCIOC.toString());<br></code></pre></td></tr></table></figure><p>打印效果是：</p><blockquote><p><strong>Root</strong> WebApplicationContext, started on Thu Jun 17 14:49:17 CST 2021</p><p>WebApplicationContext for namespace ‘dispatcherServlet-servlet’, started on Thu Jun 17 14:49:18 CST 2021, <strong>parent</strong>: Root WebApplicationContext</p></blockquote><p>结论：两个组件分别创建的 IOC 容器是<strong>父子</strong>关系。</p><ul><li>父容器：ContextLoaderListener 创建的 IOC 容器</li><li>子容器：DispatcherServlet 创建的 IOC 容器</li></ul><p>父子关系是如何决定的？</p><ul><li>ContextLoaderListener 初始化时如果检查到有已经存在的根级别 IOC 容器，那么会抛出异常。</li><li>DispatcherServlet 创建的 IOC 容器会在初始化时先检查当前环境下是否存在已经创建好的 IOC 容器。<ul><li>如果有：则将已存在的这个 IOC 容器设置为自己的父容器</li><li>如果没有：则将自己设置为 root 级别的 IOC 容器</li></ul></li><li>同时 Tomcat 在读取 web.xml 之后，加载组件的顺序就是监听器、过滤器、Servlet。</li></ul><p>DispatcherServlet 创建的 IOC 容器设置父容器的源码截图：</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><p>所在方法：createWebApplicationContext()</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_021.png"></p><h3 id="第四节-探讨两个-IOC-容器之间-bean-的互相访问"><a href="#第四节-探讨两个-IOC-容器之间-bean-的互相访问" class="headerlink" title="第四节 探讨两个 IOC 容器之间 bean 的互相访问"></a>第四节 探讨两个 IOC 容器之间 bean 的互相访问</h3><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_022.png"></p><p>spring-mvc.xml配置方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring.component.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>spring-persist.xml配置方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring.component.service,com.atguigu.spring.component.dao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>所以bean所属IOC容器的关系：</p><ul><li>父容器<ul><li>EmpService</li><li>EmpDao</li></ul></li><li>子容器<ul><li>EmpController</li></ul></li></ul><p>结论：子容器中的 EmpController 装配父容器中的 EmpService 能够正常工作。说明子容器可以访问父容器中的bean。</p><p>分析：“子可用父，父不能用子”的根本原因是子容器中有一个属性 <strong>getParent()</strong> 可以获取到父容器这个对象的引用。</p><p>源码依据：</p><ul><li>在 AbstractApplicationContext 类中，有 parent 属性</li><li>在 AbstractApplicationContext 类中，有获取 parent 属性的 getParent() 方法</li><li>子容器可以通过 getParent() 方法获取到父容器对象的引用</li><li>进而调用父容器中类似 “getBean()” 这样的方法获取到需要的 bean 完成装配</li><li>而父容器中并没有类似 “getChildren()“ 这样的方法，所以没法拿到子容器对象的引用</li></ul><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_023.png"></p><h3 id="第五节-有可能重复创建对象"><a href="#第五节-有可能重复创建对象" class="headerlink" title="第五节 有可能重复创建对象"></a>第五节 有可能重复创建对象</h3><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_024.png"></p><h4 id="1-查看日志确认是否重复创建了对象"><a href="#1-查看日志确认是否重复创建了对象" class="headerlink" title="1. 查看日志确认是否重复创建了对象"></a>1. 查看日志确认是否重复创建了对象</h4><blockquote><p>Root WebApplicationContext: initialization started</p><p>……</p><p>Creating shared instance of singleton bean ‘helloDao’ Creating shared instance of singleton bean ‘helloHandler’ Creating shared instance of singleton bean ‘helloService’</p><p>……</p><p>Root WebApplicationContext initialized in 1150 ms</p><p>……</p><p>Refreshing WebApplicationContext for namespace ‘dispatcherServlet-servlet’</p><p>……</p><p>Creating shared instance of singleton bean ‘helloDao’</p><p>Creating shared instance of singleton bean ‘helloHandler’</p><p>Creating shared instance of singleton bean ‘helloService’</p><p>……</p></blockquote><h4 id="2-重复创建对象的问题"><a href="#2-重复创建对象的问题" class="headerlink" title="2. 重复创建对象的问题"></a>2. 重复创建对象的问题</h4><ul><li><p>浪费内存空间</p></li><li><p>两个 IOC 容器能力是不同的</p><ul><li><p>spring-mvc.xml：仅配置和处理请求相关的功能。所以不能给 service 类附加声明式事务功能。</p><p>结论：基于 spring-mvc.xml 配置文件创建的 EmpService 的 bean 不带有声明式事务的功能</p><p>影响：DispatcherServlet 处理浏览器请求时会调用自己创建的 EmpController，然后再调用自己创建的EmpService，而这个 EmpService 是没有事务的，所以处理请求时<strong>没有事务功能的支持</strong>。</p></li><li><p>spring-persist.xml：配置声明式事务。所以可以给 service 类附加声明式事务功能。</p><p>结论：基于 spring-persist.xml 配置文件创建的 EmpService 有声明式事务的功能</p><p>影响：由于 DispatcherServlet 的 IOC 容器会优先使用自己创建的 EmpController，进而装配自己创建的EmpService，所以基于 spring-persist.xml 配置文件创建的有声明式事务的 EmpService 用不上。</p></li></ul></li></ul><h4 id="3-解决重复创建对象的问题"><a href="#3-解决重复创建对象的问题" class="headerlink" title="3. 解决重复创建对象的问题"></a>3. 解决重复创建对象的问题</h4><h5 id="3-1-解决方案一"><a href="#3-1-解决方案一" class="headerlink" title="3.1 解决方案一"></a>3.1 解决方案一</h5><p>让两个配置文件配置自动扫描的包时，各自扫描各自的组件。</p><ul><li>SpringMVC 就扫描 XxxHandler</li><li>Spring 扫描 XxxService 和 XxxDao</li></ul><h5 id="3-2-解决方案二"><a href="#3-2-解决方案二" class="headerlink" title="3.2 解决方案二"></a>3.2 解决方案二</h5><p>如果由于某种原因，必须扫描同一个包，确实存在重复创建对象的问题，可以采取下面的办法处理。</p><ul><li>spring-mvc.xml 配置文件在整体扫描的基础上进一步配置：仅包含被 @Controller 注解标记的类。</li><li>spring-persist.xml 配置在整体扫描的基础上进一步配置：排除被 @Controller 注解标记的类。</li></ul><p>具体spring-mvc.xml配置文件中的配置方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 两个Spring的配置文件扫描相同的包 --&gt;</span><br><span class="hljs-comment">&lt;!-- 为了解决重复创建对象的问题，需要进一步制定扫描组件时的规则 --&gt;</span><br><span class="hljs-comment">&lt;!-- 目标：『仅』包含@Controller注解标记的类 --&gt;</span><br><span class="hljs-comment">&lt;!-- use-default-filters=&quot;false&quot;表示关闭默认规则，表示什么都不扫描，此时不会把任何组件加入IOC容器；</span><br><span class="hljs-comment">        再配合context:include-filter实现“『仅』包含”效果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring.component&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- context:include-filter标签配置一个“扫描组件时要包含的类”的规则，追加到默认规则中 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- type属性：指定规则的类型，根据什么找到要包含的类，现在使用annotation表示基于注解来查找 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- expression属性：规则的表达式。如果type属性选择了annotation，那么expression属性配置注解的全类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>具体spring-persist.xml配置文件中的配置方式如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 两个Spring的配置文件扫描相同的包 --&gt;</span><br><span class="hljs-comment">&lt;!-- 在默认规则的基础上排除标记了@Controller注解的类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring.component&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置具体排除规则：把标记了@Controller注解的类排除在扫描范围之外 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第六节-小结"><a href="#第六节-小结" class="headerlink" title="第六节 小结"></a>第六节 小结</h3><ul><li>DispatcherServlet 和 ContextLoaderListener 并存<ul><li>DispatcherServlet 负责加载 SpringMVC 的配置文件，例如：spring-mvc.xml</li><li>ContextLoaderListener 负责加载 Spring 的配置文件，例如：spring-persist.xml</li></ul></li><li>两个 IOC 容器的关系：<ul><li>ContextLoaderListener 创建的容器是父容器</li><li>DispatcherServlet 创建的容器是子容器</li></ul></li><li>bean 的装配<ul><li>子容器可以访问父容器中的 bean</li><li>父容器不能访问子容器中的 bean</li></ul></li><li>两个容器扫描同一个包会导致重复创建对象<ul><li>解决办法一：各自扫描各自的包</li><li>解决办法二：<ul><li>DispatcherServlet 创建的容器仅扫描 handler</li><li>ContextLoaderListener 创建的容器不扫描 handler</li></ul></li></ul></li></ul><h2 id="第四章-SSM整合-重点"><a href="#第四章-SSM整合-重点" class="headerlink" title="第四章 SSM整合(重点)"></a>第四章 SSM整合(重点)</h2><h3 id="第一节-Spring-和-Mybatis-整合"><a href="#第一节-Spring-和-Mybatis-整合" class="headerlink" title="第一节 Spring 和 Mybatis 整合"></a>第一节 Spring 和 Mybatis 整合</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_025.png"></p><h4 id="2-Mybatis-Spring技术"><a href="#2-Mybatis-Spring技术" class="headerlink" title="2. Mybatis-Spring技术"></a>2. Mybatis-Spring技术</h4><p><a href="http://mybatis.org/spring/zh/index.html">官方介绍</a></p><p>相关技术之间版本匹配说明：</p><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_026.png"></p><p>Mybatis-Spring 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-总体-SSM-整合所需依赖"><a href="#3-总体-SSM-整合所需依赖" class="headerlink" title="3. 总体 SSM 整合所需依赖"></a>3. 总体 SSM 整合所需依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring 持久化层所需依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- junit5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring 的测试功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Mybatis 和 Spring 的整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入LomBok的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-配置数据源"><a href="#4-配置数据源" class="headerlink" title="4. 配置数据源"></a>4. 配置数据源</h4><h5 id="4-1-创建-jdbc-properties"><a href="#4-1-创建-jdbc-properties" class="headerlink" title="4.1 创建 jdbc.properties"></a>4.1 创建 jdbc.properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h5 id="4-2-加入日志配置文件"><a href="#4-2-加入日志配置文件" class="headerlink" title="4.2 加入日志配置文件"></a>4.2 加入日志配置文件</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_027.png"></p><h5 id="4-3-创建spring配置文件"><a href="#4-3-创建spring配置文件" class="headerlink" title="4.3 创建spring配置文件"></a>4.3 创建spring配置文件</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_028.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-4-创建-junit-测试类"><a href="#4-4-创建-junit-测试类" class="headerlink" title="4.4 创建 junit 测试类"></a>4.4 创建 junit 测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(locations = &#123;&quot;classpath:spring-persist.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SSMTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br> <br>    Logger logger = LoggerFactory.getLogger(getClass());<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConn</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        Connection connection = dataSource.getConnection();<br>        logger.debug(connection.toString());<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-配置-SqlSessionFactoryBean"><a href="#5-配置-SqlSessionFactoryBean" class="headerlink" title="5. 配置 SqlSessionFactoryBean"></a>5. 配置 SqlSessionFactoryBean</h4><h5 id="5-1-创建-Mybatis-全局配置文件"><a href="#5-1-创建-Mybatis-全局配置文件" class="headerlink" title="5.1 创建 Mybatis 全局配置文件"></a>5.1 创建 Mybatis 全局配置文件</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_029.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- Mybatis全局配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将数据库表字段映射到驼峰式命名的Java实体类属性中 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库表字段格式：单词_单词 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- Java实体类属性：首字母小写的驼峰式命名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-2-创建模型"><a href="#5-2-创建模型" class="headerlink" title="5.2 创建模型"></a>5.2 创建模型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.pojo</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-10  09:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-3-创建Mapper接口"><a href="#5-3-创建Mapper接口" class="headerlink" title="5.3 创建Mapper接口"></a>5.3 创建Mapper接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mapper;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Employee;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.mapper</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-10  09:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有员工</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Employee&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4-创建Mapper配置文件-存放路径在resources中要与对应的接口的路径一致"><a href="#5-4-创建Mapper配置文件-存放路径在resources中要与对应的接口的路径一致" class="headerlink" title="5.4 创建Mapper配置文件(存放路径在resources中要与对应的接口的路径一致)"></a>5.4 创建Mapper配置文件(存放路径在resources中要与对应的接口的路径一致)</h5><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_037.png" style="zoom:80%;"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">            <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">            <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mapper.EmployeeMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Employee&quot;</span>&gt;</span><br>        select * from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-5-配置-SqlSessionFactoryBean"><a href="#5-5-配置-SqlSessionFactoryBean" class="headerlink" title="5.5 配置 SqlSessionFactoryBean"></a>5.5 配置 SqlSessionFactoryBean</h5><h6 id="5-5-1-风格一：保留-Mybatis-全局配置文件"><a href="#5-5-1-风格一：保留-Mybatis-全局配置文件" class="headerlink" title="5.5.1 风格一：保留 Mybatis 全局配置文件"></a>5.5.1 风格一：保留 Mybatis 全局配置文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--注入mybatis的全局配置文件的路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-5-2-风格二：彻底舍弃-Mybatis-全局配置文件"><a href="#5-5-2-风格二：彻底舍弃-Mybatis-全局配置文件" class="headerlink" title="5.5.2 风格二：彻底舍弃 Mybatis 全局配置文件"></a>5.5.2 风格二：彻底舍弃 Mybatis 全局配置文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--想配置驼峰,但是又没有Mybatis的核心配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configuration&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--驼峰配置--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--懒加载配置--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置别名包扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.atguigu.pojo&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--单独扫描映射配置文件:注意不是目录路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：上面两种方式如果并存，会抛出异常：</p><blockquote><p>java.lang.IllegalStateException: Property ‘configuration’ and ‘configLocation’ can not specified with together</p></blockquote><h4 id="6-配置-Mapper-接口扫描器"><a href="#6-配置-Mapper-接口扫描器" class="headerlink" title="6. 配置 Mapper 接口扫描器"></a>6. 配置 Mapper 接口扫描器</h4><h5 id="6-1-方式一：使用扫描器"><a href="#6-1-方式一：使用扫描器" class="headerlink" title="6.1 方式一：使用扫描器"></a>6.1 方式一：使用扫描器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 Mapper 接口类型的bean的扫描器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mapperScannerConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-2-方式二：使用-mybatis-spring-名称空间"><a href="#6-2-方式二：使用-mybatis-spring-名称空间" class="headerlink" title="6.2 方式二：使用 mybatis-spring 名称空间"></a>6.2 方式二：使用 mybatis-spring 名称空间</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        3. Mapper接口的包扫描</span><br><span class="hljs-comment">        目的:创建Mapper接口的代理对象</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mybatis-spring:scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> EmpMapper empMapper;<br> <br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMybatis</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Emp&gt; empList = empMapper.selectAll();<br> <br>    <span class="hljs-keyword">for</span> (Emp emp : empList) &#123;<br>        logger.debug(emp.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二节-加入声明式事务"><a href="#第二节-加入声明式事务" class="headerlink" title="第二节 加入声明式事务"></a>第二节 加入声明式事务</h3><h4 id="1-配置事务管理器"><a href="#1-配置事务管理器" class="headerlink" title="1. 配置事务管理器"></a>1. 配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 装配数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 开启基于注解的声明式事务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h4><h5 id="2-1-创建-Service-组件"><a href="#2-1-创建-Service-组件" class="headerlink" title="2.1 创建 Service 组件"></a>2.1 创建 Service 组件</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_030.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmpService</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(readOnly = true)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> empMapper.selectAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-配置自动扫描的包"><a href="#2-2-配置自动扫描的包" class="headerlink" title="2.2 配置自动扫描的包"></a>2.2 配置自动扫描的包</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_028.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--包扫描:配置业务层的组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.service&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-junit"><a href="#2-3-junit" class="headerlink" title="2.3 junit"></a>2.3 junit</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> EmpService empService;<br> <br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTx</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Emp&gt; empList = empService.getAll();<br>    <span class="hljs-keyword">for</span> (Emp emp : empList) &#123;<br>        System.out.println(<span class="hljs-string">&quot;emp = &quot;</span> + emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三节-Spring-和-SpringMVC-整合"><a href="#第三节-Spring-和-SpringMVC-整合" class="headerlink" title="第三节 Spring 和 SpringMVC 整合"></a>第三节 Spring 和 SpringMVC 整合</h3><h4 id="1-整合的本质"><a href="#1-整合的本质" class="headerlink" title="1. 整合的本质"></a>1. 整合的本质</h4><ul><li>ContextLoaderListener：读取 spring-persist.xml</li><li>DispatcherServlet：读取 spring-mvc.xml</li></ul><h4 id="2-web-xml配置"><a href="#2-web-xml配置" class="headerlink" title="2. web.xml配置"></a>2. web.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        在服务器启动的时候加载配置文件，创建ioc容器有两种方式:</span><br><span class="hljs-comment">        1. DispatcherServlet</span><br><span class="hljs-comment">        2. ContextLoaderListener</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--1. 使用DispatcherServlet加载spring-mvc.xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--使用ContextLoaderListener加载spring-persist.xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-persist.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置过滤器解决 POST 请求的字符乱码问题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- encoding参数指定要使用的字符集名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 请求强制编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 响应强制编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-SpringMVC-配置"><a href="#3-SpringMVC-配置" class="headerlink" title="3. SpringMVC 配置"></a>3. SpringMVC 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1. 包扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.handler&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--2. 加载mvc注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--3. 静态资源处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--4. 配置Thymeleaf的模板解析器--&gt;</span><br>    <span class="hljs-comment">&lt;!-- Thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br><br>                        <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br><br>                        <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br><br>                        <span class="hljs-comment">&lt;!--模板类型--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!--模板的字符编码--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置view-controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/index.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-创建组件"><a href="#4-创建组件" class="headerlink" title="4. 创建组件"></a>4. 创建组件</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_031.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.handler;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.service.EmployeeService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.handler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-10  10:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/employee&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmployeeService employeeService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/findAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findAll</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//1. 调用业务层的方法查询所有员工信息</span><br>        List&lt;Employee&gt; employeeList = employeeService.findAll();<br>        <span class="hljs-comment">//2. 将employeeList存储到请求域</span><br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,employeeList);<br>        <span class="hljs-comment">//3. 返回逻辑视图</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp-list&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-页面操作"><a href="#5-页面操作" class="headerlink" title="5. 页面操作"></a>5. 页面操作</h4><h5 id="5-1-首页超链接"><a href="#5-1-首页超链接" class="headerlink" title="5.1 首页超链接"></a>5.1 首页超链接</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_032.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee/findAll&#125;&quot;</span>&gt;</span>显示员工列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-2-显示数据的页面"><a href="#5-2-显示数据的页面" class="headerlink" title="5.2 显示数据的页面"></a>5.2 显示数据的页面</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_033.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>员工信息展示页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto <span class="hljs-number">0px</span> auto;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>NAME<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>SALARY<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#lists.isEmpty(list)&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>抱歉！没有查询到数据！<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #lists.isEmpty(list)&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;emp : $&#123;list&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.empId&#125;&quot;</span>&gt;</span>这里显示员工ID<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.empName&#125;&quot;</span>&gt;</span>这里显示员工NAME<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.empSalary&#125;&quot;</span>&gt;</span>这里显示员工SALARY<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="第五章-分页"><a href="#第五章-分页" class="headerlink" title="第五章 分页"></a>第五章 分页</h2><h3 id="第一节-分页的概述"><a href="#第一节-分页的概述" class="headerlink" title="第一节 分页的概述"></a>第一节 分页的概述</h3><h4 id="1-为什么要分页"><a href="#1-为什么要分页" class="headerlink" title="1. 为什么要分页"></a>1. 为什么要分页</h4><p>如果应用程序显示数据不分页，会有三个问题：</p><ul><li>用户查看数据非常不方便。</li><li>所有数据不分冷热全部显示出来，冷数据白白占用存储空间，浪费内存。</li><li>在服务器端查询全部数据占用内存很大，给整个系统增加了很大压力。</li></ul><h4 id="2-分页本身的概念"><a href="#2-分页本身的概念" class="headerlink" title="2. 分页本身的概念"></a>2. 分页本身的概念</h4><p>把系统中要显示的数据分成较小的单元，每个单元作为『一页』显示给用户。每次访问服务器只查询一页数据。</p><p>分页的好处：</p><ul><li>用户体验较好。</li><li>服务器端每次只查询一部分数据，内存压力减小。</li><li>对冷数据减少查询的次数，据此对系统性能进行优化。</li></ul><h4 id="3-分页的细节"><a href="#3-分页的细节" class="headerlink" title="3. 分页的细节"></a>3. 分页的细节</h4><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_034.png"></p><h4 id="4-实现分页的基本逻辑"><a href="#4-实现分页的基本逻辑" class="headerlink" title="4. 实现分页的基本逻辑"></a>4. 实现分页的基本逻辑</h4><h5 id="4-1-物理分页"><a href="#4-1-物理分页" class="headerlink" title="4.1 物理分页"></a>4.1 物理分页</h5><p>具体数据库不同，分页语法有区别。下面我们以 MySQL 为例来说明。MySQL 的分页需要借助 LIMIT 子句来完成。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select emp_id,emp_name,emp_salary from t_emp limit 0,5; # 查询第一页数据<br>select emp_id,emp_name,emp_salary from t_emp limit 5,5; # 查询第二页数据<br>select emp_id,emp_name,emp_salary from t_emp limit 10,5;# 查询第三页数据<br></code></pre></td></tr></table></figure><p>LIMIT 子句的公式：</p><blockquote><p>limit (pageNo-1)*pageSize,pageSize</p></blockquote><p>注意：在 SQL 的语法中，LIMIT 子句必须出现在 SQL 语句最后。</p><h5 id="4-2-逻辑分页"><a href="#4-2-逻辑分页" class="headerlink" title="4.2 逻辑分页"></a>4.2 逻辑分页</h5><h6 id="4-2-1-需求"><a href="#4-2-1-需求" class="headerlink" title="4.2.1 需求"></a>4.2.1 需求</h6><p>为了能够在页面上全面显示分页相关的细节数据，总页数需要计算得到。 </p><h6 id="4-2-2-总页数计算方式"><a href="#4-2-2-总页数计算方式" class="headerlink" title="4.2.2 总页数计算方式"></a>4.2.2 总页数计算方式</h6><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_035.png"></p><h6 id="4-2-3-页码的合理化"><a href="#4-2-3-页码的合理化" class="headerlink" title="4.2.3 页码的合理化"></a>4.2.3 页码的合理化</h6><p>页码的有效范围：1~总页数。修正方式：</p><ul><li>用户输入的页码 &lt; 1：将页码设定为第一页</li><li>用户输入的页码 &gt; 总页数：将页码设定为最后一页</li></ul><h6 id="4-2-4-分页执行流程"><a href="#4-2-4-分页执行流程" class="headerlink" title="4.2.4 分页执行流程"></a>4.2.4 分页执行流程</h6><ul><li>查询总记录数(用count()函数)</li><li>查询当前页数据(使用limit查询)</li><li>根据总记录数和每页条数计算总页数</li><li>在1~总页数之间修正页码</li><li>封装上述所有数据，发送到页面显示</li></ul><h3 id="第二节-实现分页"><a href="#第二节-实现分页" class="headerlink" title="第二节 实现分页"></a>第二节 实现分页</h3><h4 id="1-Mybatis的分页插件"><a href="#1-Mybatis的分页插件" class="headerlink" title="1. Mybatis的分页插件"></a>1. Mybatis的分页插件</h4><p>具体使用细节可以参考：<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md">官方文档</a> </p><h5 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 SqlSessionFactoryBean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br> <br>    ……<br> <br>    <span class="hljs-comment">&lt;!-- 在 plugins 属性中配置 Mybatis 插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 设置 reasonable 为 true 表示将页码进行合理化修正。页码的有效范围：1~总页数 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;reasonable&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                        <br>                        <span class="hljs-comment">&lt;!-- 数据库方言：同样都是 SQL 语句，拿到不同数据库中，在语法上会有差异 --&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 默认情况下，按照 MySQL 作为数据库方言来运行 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;helperDialect&quot;</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-具体代码"><a href="#2-具体代码" class="headerlink" title="2. 具体代码"></a>2. 具体代码</h4><h5 id="2-1-首页超链接"><a href="#2-1-首页超链接" class="headerlink" title="2.1 首页超链接"></a>2.1 首页超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/get/page/1&#125;&quot;</span>&gt;</span>显示分页数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-handler-方法"><a href="#2-2-handler-方法" class="headerlink" title="2.2 handler 方法"></a>2.2 handler 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get/page/&#123;pageNo&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@PathVariable(&quot;pageNo&quot;)</span> Integer pageNo, </span></span><br><span class="hljs-params"><span class="hljs-function">        Model model)</span> </span>&#123;<br> <br>    <span class="hljs-comment">// PageInfo 对象封装了和分页相关的所有信息</span><br>    PageInfo&lt;Emp&gt; pageInfo = empService.getPageInfo(pageNo);<br>    <br>    <span class="hljs-comment">// 将 PageInfo 对象存入模型</span><br>    model.addAttribute(<span class="hljs-string">&quot;pageInfo&quot;</span>, pageInfo);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;emp-page&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-service-方法"><a href="#2-3-service-方法" class="headerlink" title="2.3 service 方法"></a>2.3 service 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PageInfo&lt;Emp&gt; <span class="hljs-title">getPageInfo</span><span class="hljs-params">(Integer pageNo)</span> </span>&#123;<br> <br>    <span class="hljs-comment">// 1、确定每页显示数据的条数</span><br>    <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">5</span>;<br> <br>    <span class="hljs-comment">// 2、设定分页数据：开启分页功能。开启后，后面执行的 SELECT 语句会自动被附加 LIMIT 子句，</span><br>    <span class="hljs-comment">// 而且会自动查询总记录数</span><br>    PageHelper.startPage(pageNo, pageSize);<br> <br>    <span class="hljs-comment">// 3、正常执行查询</span><br>    List&lt;Emp&gt; empList = empMapper.selectAll();<br> <br>    <span class="hljs-comment">// 4、封装为 PageInfo 对象返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(empList);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-页面展示分页数据"><a href="#2-4-页面展示分页数据" class="headerlink" title="2.4 页面展示分页数据"></a>2.4 页面展示分页数据</h5><h6 id="2-4-1-显示列表"><a href="#2-4-1-显示列表" class="headerlink" title="2.4.1 显示列表"></a>2.4.1 显示列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">……<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;emp : $&#123;pageInfo.list&#125;&quot;</span>&gt;</span><br>……<br></code></pre></td></tr></table></figure><h6 id="2-4-2-显示翻页导航栏"><a href="#2-4-2-显示翻页导航栏" class="headerlink" title="2.4.2 显示翻页导航栏"></a>2.4.2 显示翻页导航栏</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;pageInfo.hasPreviousPage&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/get/page/1&#125;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/get/page/&#125;+$&#123;pageInfo.prePage&#125;&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;navigator : $&#123;pageInfo.navigatepageNums&#125;&quot;</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- th:if 判断当前标签是否是当前页 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果不是当前页则显示超链接 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;navigator != pageInfo.pageNum&#125;&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/get/page/&#125;+$&#123;navigator&#125;&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;[&#x27;+$&#123;navigator&#125;+&#x27;]&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 如果是当前页则显示页码本身 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;navigator == pageInfo.pageNum&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;[&#x27;+$&#123;navigator&#125;+&#x27;]&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;pageInfo.hasNextPage&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/get/page/&#125;+$&#123;pageInfo.nextPage&#125;&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/get/page/&#125;+$&#123;pageInfo.pages&#125;&quot;</span>&gt;</span>最后一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;pageInfo.pageNum&#125;+&#x27;/&#x27;+$&#123;pageInfo.pages&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-5-打印的-SQL-语句"><a href="#2-5-打印的-SQL-语句" class="headerlink" title="2.5 打印的 SQL 语句"></a>2.5 打印的 SQL 语句</h5><p><img src="http://www.slx.blue/2021/12/13/springMVC-04/tu_036.png"></p><h3 id="第三节-为什么是-PageInfo-而不是-Page"><a href="#第三节-为什么是-PageInfo-而不是-Page" class="headerlink" title="第三节 为什么是 PageInfo 而不是 Page"></a>第三节 为什么是 PageInfo 而不是 Page</h3><h4 id="1-List接口的具体实现"><a href="#1-List接口的具体实现" class="headerlink" title="1. List接口的具体实现"></a>1. List接口的具体实现</h4><p>当我们开启了分页功能后，查询一个 List 集合，实际返回的是：com.github.pagehelper.Page 类型。这个 Page 类继承了 ArrayList，所以也兼容 List 接口类型。</p><h4 id="2-提出问题"><a href="#2-提出问题" class="headerlink" title="2. 提出问题"></a>2. 提出问题</h4><p>如果我们将 Page 类型的对象存入模型，转发到视图模板上显示数据，会存在一个问题：视图模板技术只承认这个对象是一个 List 集合，不识别 List 集合之外的其它属性。</p><p>这一点在其他场合也需要注意：我们开发时尽量不要继承 ArrayList、HashMap 等类似的集合实现类。如果继承了，那么页面视图模板技术或其他表达式往往只能识别我们的对象是一个集合，而无法访问额外封装的其他属性。</p><p>所以 Page 对象需要封装为 PageInfo，让 list、pageNum 等等数据作为 PageInfo 对象的属性；PageInfo 本身并不是一个 List 类型的集合。</p><h4 id="3-PageHelper-非侵入式的体现"><a href="#3-PageHelper-非侵入式的体现" class="headerlink" title="3. PageHelper 非侵入式的体现"></a>3. PageHelper 非侵入式的体现</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">pageNo</span>, <span class="hljs-params">pageSize</span>)</span>;<br></code></pre></td></tr></table></figure><p>开启分页功能，就在 SQL 语句后面附加 LIMIT 子句并查询总记录数；不开启就还是按照原样查询。分页功能对原有的 Mapper 接口、SQL 语句没有任何影响。这个效果可以称之为是非侵入式，也可以说是可插拔的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>ContextLoaderListener: 在服务器启动的时候加载配置文件创建IOC容器<ol><li>ContextLoaderListener创建的IOC是DispatcherServlet 创建的IOC容器的父容器；</li><li>子容器中可以拿到父容器中的对象</li><li>在我们项目中DispatchServlet只负责表现层，只扫描Controller或者是RestController</li><li>ContextLoaderListener负责其它的</li></ol></li><li>Spring与Mybatis整合<ol><li>引入mybatis-spring的整合的依赖</li><li>mybatis的使用和以前一样，只是不用写全局配置文件，并且也不用写创建持久层代理对象的那一堆代码</li><li>整合的目的: 在Spring的IOC容器中持有持久层的代理对象</li><li>整合的步骤:<ol><li>在spring的配置文件中配置SqlSessionFactoryBean<ol><li>注入dataSource</li><li>别名包扫描</li><li>驼峰配置</li><li>懒加载等等配置</li><li>指定映射配置文件的路径</li></ol></li><li>扫描持久层接口所在的包</li></ol></li></ol></li><li>PageHelper分页插件<ol><li>目标: 以非侵入的方式在后端进行分页</li><li>使用步骤:<ol><li>引入分页插件的依赖</li><li>在SqlSessionFactoryBean的配置中，配置分页插件</li><li>在业务层中:<ol><li>调用PageHelper.startPage(pageNo,pageSize)开启分页</li><li>调用查询所有的持久层方法</li><li>使用PageInfo封装分页数据    </li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-备忘录模式</title>
      <link href="/2021/12/13/java-memento/"/>
      <url>/2021/12/13/java-memento/</url>
      
        <content type="html"><![CDATA[<h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li>备忘录模式(Memento patten)在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</li><li>现实生活中的备忘录是用来记录某些要去做的事情，或者是记录已经达成的共同意见的事情，以防忘记了。而在软件层面，备忘录模式有着相同的含义，备忘录主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作。</li></ol><p><img src="http://www.slx.blue/2021/12/13/java-memento/memento01.png" alt="image-20211213193806376"></p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用来保存状态 state可以替换为各种想要保存的东西</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span> </span>&#123;<br><span class="hljs-keyword">private</span> String state;<br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Memento</span><span class="hljs-params">(String state)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.state = state;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> state;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//想要使用备忘录的对象 拥有恢复状态可备份状态的功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Originator</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String state;<span class="hljs-comment">//状态信息</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(String state)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.state = state;<br>&#125;<br><br><span class="hljs-comment">//编写一个方法，可以保存一个状态对象 Memento</span><br><span class="hljs-comment">//因此编写一个方法，返回 Memento</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Memento <span class="hljs-title">saveStateMemento</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Memento(state);<br>&#125;<br><br><span class="hljs-comment">//通过备忘录对象，恢复状态</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStateFromMemento</span><span class="hljs-params">(Memento memento)</span> </span>&#123;<br>state = memento.getState();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对应一个角色可以有很多个状态，所以用List来保存便于管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Caretaker</span> </span>&#123;<br><br><span class="hljs-comment">//在List 集合中会有很多的备忘录对象</span><br><span class="hljs-keyword">private</span> List&lt;Memento&gt; mementoList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Memento memento)</span> </span>&#123;<br>mementoList.add(memento);<br>&#125;<br><br><span class="hljs-comment">//获取到第index个Originator 的 备忘录对象(即保存状态)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Memento <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br><span class="hljs-keyword">return</span> mementoList.get(index);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Originator originator = <span class="hljs-keyword">new</span> Originator();<br>Caretaker caretaker = <span class="hljs-keyword">new</span> Caretaker();<br><br>originator.setState(<span class="hljs-string">&quot; 状态#1 攻击力 100 &quot;</span>);<br><span class="hljs-comment">//保存了当前的状态</span><br>caretaker.add(originator.saveStateMemento());<br><br>originator.setState(<span class="hljs-string">&quot; 状态#2 攻击力 80 &quot;</span>);<br>caretaker.add(originator.saveStateMemento());<br><br>originator.setState(<span class="hljs-string">&quot; 状态#3 攻击力 50 &quot;</span>);<br>caretaker.add(originator.saveStateMemento());<br><br>System.out.println(<span class="hljs-string">&quot;当前的状态是 =&quot;</span> + originator.getState());<br><span class="hljs-comment">//希望得到状态 1, 将 originator 恢复到状态1</span><br><br>originator.getStateFromMemento(caretaker.get(<span class="hljs-number">0</span>));<br>System.out.println(<span class="hljs-string">&quot;恢复到状态1 , 当前的状态是&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;当前的状态是 =&quot;</span> + originator.getState());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>游戏案例代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//守护者对象, 保存游戏角色的状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Caretaker</span> </span>&#123;<br><br><span class="hljs-comment">//如果只保存一次状态</span><br><span class="hljs-keyword">private</span> Memento memento;<br><span class="hljs-comment">//对GameRole 保存多次状态</span><br><span class="hljs-comment">//private ArrayList&lt;Memento&gt; mementos;</span><br><span class="hljs-comment">//对多个游戏角色保存多个状态</span><br><span class="hljs-comment">//private HashMap&lt;String, ArrayList&lt;Memento&gt;&gt; rolesMementos;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Memento <span class="hljs-title">getMemento</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> memento;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemento</span><span class="hljs-params">(Memento memento)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.memento = memento;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GameRole</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> vit;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> def;<br><br><span class="hljs-comment">//创建Memento ,即根据当前的状态得到Memento</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Memento <span class="hljs-title">createMemento</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Memento(vit, def);<br>&#125;<br><br><span class="hljs-comment">//从备忘录对象，恢复GameRole的状态</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recoverGameRoleFromMemento</span><span class="hljs-params">(Memento memento)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.vit = memento.getVit();<br><span class="hljs-keyword">this</span>.def = memento.getDef();<br>&#125;<br><br><span class="hljs-comment">//显示当前游戏角色的状态</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;游戏角色当前的攻击力：&quot;</span> + <span class="hljs-keyword">this</span>.vit + <span class="hljs-string">&quot; 防御力: &quot;</span> + <span class="hljs-keyword">this</span>.def);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getVit</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> vit;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> vit)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.vit = vit;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDef</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> def;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDef</span><span class="hljs-params">(<span class="hljs-keyword">int</span> def)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.def = def;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span> </span>&#123;<br><br><span class="hljs-comment">//攻击力</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> vit;<br><span class="hljs-comment">//防御力</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> def;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Memento</span><span class="hljs-params">(<span class="hljs-keyword">int</span> vit, <span class="hljs-keyword">int</span> def)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.vit = vit;<br><span class="hljs-keyword">this</span>.def = def;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getVit</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> vit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> vit)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.vit = vit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDef</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> def;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDef</span><span class="hljs-params">(<span class="hljs-keyword">int</span> def)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.def = def;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建游戏角色</span><br>GameRole gameRole = <span class="hljs-keyword">new</span> GameRole();<br>gameRole.setVit(<span class="hljs-number">100</span>);<br>gameRole.setDef(<span class="hljs-number">100</span>);<br><br>System.out.println(<span class="hljs-string">&quot;和boss大战前的状态&quot;</span>);<br>gameRole.display();<br><br><span class="hljs-comment">//把当前状态保存caretaker</span><br>Caretaker caretaker = <span class="hljs-keyword">new</span> Caretaker();<br>caretaker.setMemento(gameRole.createMemento());<br><br>System.out.println(<span class="hljs-string">&quot;和boss大战~~~&quot;</span>);<br>gameRole.setDef(<span class="hljs-number">30</span>);<br>gameRole.setVit(<span class="hljs-number">30</span>);<br><br>gameRole.display();<br><br>System.out.println(<span class="hljs-string">&quot;大战后，使用备忘录对象恢复到站前&quot;</span>);<br><br>gameRole.recoverGameRoleFromMemento(caretaker.getMemento());<br>System.out.println(<span class="hljs-string">&quot;恢复后的状态&quot;</span>);<br>gameRole.display();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ol><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便的回到某个历史的状态。</li><li>实现了信息的封装，使得用户不需要关心状态的保存细节。</li><li>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存、这个需要注意。</li><li>使用的应用场景<ul><li>后悔药</li><li>游戏存档</li><li>Windows里的ctrl+z</li><li>浏览器的回退 </li><li>数据库的事务管理</li></ul></li><li>为了节省内存，备忘录模式可以结合原型模式一起食用</li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc-day02</title>
      <link href="/2021/12/11/springMVC-02/"/>
      <url>/2021/12/11/springMVC-02/</url>
      
        <content type="html"><![CDATA[<h1 id="springmvc-day02"><a href="#springmvc-day02" class="headerlink" title="springmvc-day02"></a>springmvc-day02</h1><h2 id="第一章-RESTFul风格交互方式"><a href="#第一章-RESTFul风格交互方式" class="headerlink" title="第一章 RESTFul风格交互方式"></a>第一章 RESTFul风格交互方式</h2><h3 id="第一节-RESTFul概述"><a href="#第一节-RESTFul概述" class="headerlink" title="第一节 RESTFul概述"></a>第一节 RESTFul概述</h3><h4 id="1-REST的概念"><a href="#1-REST的概念" class="headerlink" title="1. REST的概念"></a>1. REST的概念</h4><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。 </p><ul><li>定位：互联网软件架构风格</li><li>倡导者：Roy Thomas Fielding</li><li>文献：Roy Thomas Fielding的博士论文</li></ul><h4 id="2-REST要解决的问题-将针对功能设计系统转变成针对资源设计系统"><a href="#2-REST要解决的问题-将针对功能设计系统转变成针对资源设计系统" class="headerlink" title="2. REST要解决的问题: 将针对功能设计系统转变成针对资源设计系统"></a>2. REST要解决的问题: 将针对功能设计系统转变成针对资源设计系统</h4><p>传统的软件系统仅在本地工作，但随着项目规模的扩大和复杂化，不但整个项目会拓展为分布式架构，很多功能也会通过网络访问第三方接口来实现。在通过网络访问一个功能的情况下，我们不能轻易假设网络状况稳定可靠。所以当一个请求发出后没有接收到对方的回应，那我们该如何判定本次操作成功与否？</p><p>下面以保存操作为例来说明一下针对功能和针对资源进行操作的区别：</p><ul><li><p>针对功能设计系统</p><p>保存一个 Employee 对象，没有接收到返回结果，判定操作失败，再保存一次。但是其实在服务器端保存操作已经成功了，只是返回结果在网络传输过程中丢失了。而第二次的补救行为则保存了重复、冗余但 id 不同的数据，这对整个系统数据来说是一种破坏。</p></li><li><p>针对资源设计系统</p><p>针对 id 为 3278 的资源执行操作，服务器端会判断指定 id 的资源是否存在。如果不存在，则执行保存操作新建数据；如果存在，则执行更新操作。所以这个操作不论执行几次，对系统的影响都是一样的。在网络状态不可靠的情况下可以多次重试，不会破坏系统数据。</p></li></ul><blockquote><p>幂等性：如果一个操作执行一次和执行 N 次对系统的影响相同，那么我们就说这个操作满足幂等性。而幂等性正是 REST 规范所倡导的。</p></blockquote><h4 id="3-RESTFul风格的架构特点"><a href="#3-RESTFul风格的架构特点" class="headerlink" title="3. RESTFul风格的架构特点"></a>3. RESTFul风格的架构特点</h4><h5 id="3-1-通过URL就知道要操作什么资源"><a href="#3-1-通过URL就知道要操作什么资源" class="headerlink" title="3.1 通过URL就知道要操作什么资源"></a>3.1 通过URL就知道要操作什么资源</h5><p>REST是针对资源设计系统，所以在REST中一个URL就对应一个资源， 为实现操作<strong>幂等性</strong>奠定基础。 </p><h5 id="3-2-通过Http请求的方式就知道要对资源进行何种操作"><a href="#3-2-通过Http请求的方式就知道要对资源进行何种操作" class="headerlink" title="3.2 通过Http请求的方式就知道要对资源进行何种操作"></a>3.2 通过Http请求的方式就知道要对资源进行何种操作</h5><p>在REST中，针对同一资源的增删改查操作的URL是完全相同的，它是通过Http协议的不同请求方式来区分不同操作的</p><p>REST 风格<strong>主张</strong>在项目设计、开发过程中，具体的操作符合 HTTP 协议定义的请求方式的<strong>语义</strong>。</p><table><thead><tr><th>操作</th><th>请求方式</th></tr></thead><tbody><tr><td>查询操作</td><td>GET</td></tr><tr><td>保存操作</td><td>POST</td></tr><tr><td>删除操作</td><td>DELETE</td></tr><tr><td>更新操作</td><td>PUT</td></tr></tbody></table><blockquote><p>另有一种说法：</p><ul><li>POST 操作针对功能执行，没有锁定资源 id，是非幂等性操作。</li><li>PUT 操作锁定资源 id，即使操作失败仍然可以针对原 id 重新执行，对整个系统来说满足幂等性。<ul><li>id 对应的资源不存在：执行保存操作</li><li>id 对应的资源存在：执行更新操作</li></ul></li></ul></blockquote><h5 id="3-3-URL更加简洁也更加隐晦"><a href="#3-3-URL更加简洁也更加隐晦" class="headerlink" title="3.3 URL更加简洁也更加隐晦"></a>3.3 URL更加简洁也更加隐晦</h5><p>REST风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。还有一点是不要使用请求扩展名。</p><p>使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。 </p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>/CRUD/saveEmp</td><td>URL 地址：/CRUD/emp 请求方式：POST</td></tr><tr><td>删除</td><td>/CRUD/removeEmp?empId=2</td><td>URL 地址：/CRUD/emp/2 请求方式：DELETE</td></tr><tr><td>更新</td><td>/CRUD/updateEmp</td><td>URL 地址：/CRUD/emp 请求方式：PUT</td></tr><tr><td>查询（表单回显）</td><td>/CRUD/editEmp?empId=2</td><td>URL 地址：/CRUD/emp/2 请求方式：GET</td></tr></tbody></table><h3 id="第二节-四种请求方式的映射"><a href="#第二节-四种请求方式的映射" class="headerlink" title="第二节 四种请求方式的映射"></a>第二节 四种请求方式的映射</h3><h4 id="1-为什么要进行请求方式的映射"><a href="#1-为什么要进行请求方式的映射" class="headerlink" title="1. 为什么要进行请求方式的映射"></a>1. 为什么要进行请求方式的映射</h4><p>在 HTML 中，GET 和 POST 请求可以天然实现，但是 DELETE 和 PUT 请求无法直接做到。SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong>。</p><h4 id="2-具体执行映射操作"><a href="#2-具体执行映射操作" class="headerlink" title="2. 具体执行映射操作"></a>2. 具体执行映射操作</h4><h5 id="2-1-映射PUT-请求"><a href="#2-1-映射PUT-请求" class="headerlink" title="2.1 映射PUT 请求"></a>2.1 映射PUT 请求</h5><h6 id="2-1-1-修改web-xml文件"><a href="#2-1-1-修改web-xml文件" class="headerlink" title="2.1.1 修改web.xml文件"></a>2.1.1 修改web.xml文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--一定要配置在解决乱码的Filter之后--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-1-2-页面的表单"><a href="#2-1-2-页面的表单" class="headerlink" title="2.1.2 页面的表单"></a>2.1.2 页面的表单</h6><ul><li>要点1：原请求方式必须是 post</li><li>要点2：新的请求方式名称通过请求参数发送</li><li>要点3：请求参数名称必须是 _method</li><li>要点4：请求参数的值就是要改成的请求方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/rest/movie&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-1-3-handler方法"><a href="#2-1-3-handler方法" class="headerlink" title="2.1.3 handler方法"></a>2.1.3 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/movie&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateMovie</span><span class="hljs-params">()</span></span>&#123;<br>    logger.debug(<span class="hljs-string">&quot;PUT请求....&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-映射DELETE请求"><a href="#2-2-映射DELETE请求" class="headerlink" title="2.2 映射DELETE请求"></a>2.2 映射DELETE请求</h5><h6 id="2-2-1-web-xml中要维持之前映射PUT请求的配置"><a href="#2-2-1-web-xml中要维持之前映射PUT请求的配置" class="headerlink" title="2.2.1 web.xml中要维持之前映射PUT请求的配置"></a>2.2.1 web.xml中要维持之前映射PUT请求的配置</h6><h6 id="2-2-2-前端页面"><a href="#2-2-2-前端页面" class="headerlink" title="2.2.2 前端页面"></a>2.2.2 前端页面</h6><p>通常删除超链接会出现在列表页面： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>将XXX请求转换为DELETE请求<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataTable&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/rest/movie&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteMovie&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/rest/movie&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteMovie&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建负责转换的表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myForm&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用vue给删除超链接绑定单击响应函数:</p><ol><li>引入vue</li></ol><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_001.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--引入vue--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/javaScript/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>绑定单击响应函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-string">&quot;el&quot;</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-string">&quot;methods&quot;</span>:&#123;<br>        <span class="hljs-function"><span class="hljs-title">deleteMovie</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;aaaaaaa&quot;</span>)<br>            <span class="hljs-comment">//真正发送删除请求:</span><br>            <span class="hljs-comment">//1. 阻止标签的默认行为</span><br>            event.preventDefault()<br>            <span class="hljs-comment">//2. 创建一个空表单:先动态设置表单的action</span><br>            <span class="hljs-keyword">var</span> myForm = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myForm&quot;</span>);<br>            myForm.action = event.target.href<br>            <span class="hljs-comment">//并且使用js代码提交表单</span><br>            myForm.submit()<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="2-2-3-handler方法"><a href="#2-2-3-handler方法" class="headerlink" title="2.2.3 handler方法"></a>2.2.3 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/movie&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteMovieById</span><span class="hljs-params">()</span></span>&#123;<br>    logger.debug(<span class="hljs-string">&quot;DELETE请求....&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三节-PathVariable注解获取路径参数"><a href="#第三节-PathVariable注解获取路径参数" class="headerlink" title="第三节 PathVariable注解获取路径参数"></a>第三节 PathVariable注解获取路径参数</h3><h4 id="1-REST-风格路径参数"><a href="#1-REST-风格路径参数" class="headerlink" title="1. REST 风格路径参数"></a>1. REST 风格路径参数</h4><p>请看下面链接：</p><blockquote><p>/emp/20</p><p>/shop/product/iphone</p></blockquote><p>如果我们想要获取链接地址中的某个部分的值，就可以使用 @PathVariable 注解，例如上面地址中的20、iphone部分。</p><h4 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h4><h5 id="2-1-单个路径参数"><a href="#2-1-单个路径参数" class="headerlink" title="2.1 单个路径参数"></a>2.1 单个路径参数</h5><h6 id="2-1-1-发送请求携带参数"><a href="#2-1-1-发送请求携带参数" class="headerlink" title="2.1.1 发送请求携带参数"></a>2.1.1 发送请求携带参数</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/rest/movie/2&#125;&quot;</span>&gt;</span>携带参数movieId<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-1-2-handler方法获取路径参数"><a href="#2-1-2-handler方法获取路径参数" class="headerlink" title="2.1.2 handler方法获取路径参数"></a>2.1.2 handler方法获取路径参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意:&#123;movieId是一个占位符&#125;，表示获取该位置的值，@PathVariable(&quot;movieId&quot;)表示获取占位符为&quot;movieId&quot;的值</span><br><span class="hljs-meta">@GetMapping(&quot;/movie/&#123;movieId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findMovieById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;movieId&quot;)</span> Integer movieId)</span></span>&#123;<br>    logger.debug(<span class="hljs-string">&quot;GET请求....&quot;</span>+movieId);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-多个路径参数"><a href="#2-2-多个路径参数" class="headerlink" title="2.2 多个路径参数"></a>2.2 多个路径参数</h5><h6 id="2-2-1-发送请求携带参数"><a href="#2-2-1-发送请求携带参数" class="headerlink" title="2.2.1 发送请求携带参数"></a>2.2.1 发送请求携带参数</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/rest/movie/2/22/123&#125;&quot;</span>&gt;</span>携带多个参数<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-2-2-handler方法获取路径参数"><a href="#2-2-2-handler方法获取路径参数" class="headerlink" title="2.2.2 handler方法获取路径参数"></a>2.2.2 handler方法获取路径参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/movie/&#123;categoryId&#125;/&#123;groupId&#125;/&#123;movieId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findMovieById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;categoryId&quot;)</span> Integer categoryId,<span class="hljs-meta">@PathVariable(&quot;groupId&quot;)</span>Integer groupId,<span class="hljs-meta">@PathVariable(&quot;movieId&quot;)</span> Integer movieId)</span></span>&#123;<br>    logger.debug(<span class="hljs-string">&quot;GET请求....&quot;</span>+categoryId+<span class="hljs-string">&quot;:&quot;</span>+groupId+<span class="hljs-string">&quot;:&quot;</span>+movieId);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-RESTFul综合案例"><a href="#第四节-RESTFul综合案例" class="headerlink" title="第四节 RESTFul综合案例"></a>第四节 RESTFul综合案例</h3><h4 id="1-案例准备"><a href="#1-案例准备" class="headerlink" title="1. 案例准备"></a>1. 案例准备</h4><p>将前面的传统CRUD案例复制并且重新导入</p><h4 id="2-功能清单"><a href="#2-功能清单" class="headerlink" title="2. 功能清单"></a>2. 功能清单</h4><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据</td><td>/movie</td><td>GET</td></tr><tr><td>删除</td><td>/movie/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据的表单</td><td>/movie/add.html</td><td>GET</td></tr><tr><td>执行保存</td><td>/movie</td><td>POST</td></tr><tr><td>跳转到更新数据的表单</td><td>/movie/2</td><td>GET</td></tr><tr><td>执行更新</td><td>/movie</td><td>PUT</td></tr></tbody></table><h4 id="3-访问首页"><a href="#3-访问首页" class="headerlink" title="3. 访问首页"></a>3. 访问首页</h4><h5 id="3-1-配置view-controller"><a href="#3-1-配置view-controller" class="headerlink" title="3.1 配置view-controller"></a>3.1 配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>其它不用做任何修改</p><h4 id="4-查询全部"><a href="#4-查询全部" class="headerlink" title="4. 查询全部"></a>4. 查询全部</h4><h5 id="4-1-案例流程"><a href="#4-1-案例流程" class="headerlink" title="4.1 案例流程"></a>4.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_002.png"></p><h5 id="4-2-具体实现"><a href="#4-2-具体实现" class="headerlink" title="4.2 具体实现"></a>4.2 具体实现</h5><h6 id="4-2-1-handler方法"><a href="#4-2-1-handler方法" class="headerlink" title="4.2.1 handler方法"></a>4.2.1 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//因为类上的RequestMapping注解的值已经是&quot;/movie&quot;了</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showList</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    <span class="hljs-comment">//1. 调用业务层的方法查询所有的movie</span><br>    List&lt;Movie&gt; movieList = movieService.getAll();<br>    <span class="hljs-comment">//2. 将查询到的所有movie存储到请求域</span><br>    model.addAttribute(<span class="hljs-string">&quot;movieList&quot;</span>,movieList);<br>    <span class="hljs-comment">//3. 解析Thymeleaf模板显示所有movie</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-2-2-portal-html页面a标签的路径"><a href="#4-2-2-portal-html页面a标签的路径" class="headerlink" title="4.2.2 portal.html页面a标签的路径"></a>4.2.2 portal.html页面a标签的路径</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie&#125;&quot;</span>&gt;</span>显示电影列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="4-2-3-list页面展示-不用修改"><a href="#4-2-3-list页面展示-不用修改" class="headerlink" title="4.2.3 list页面展示(不用修改)"></a>4.2.3 list页面展示(不用修改)</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>电影列表页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto <span class="hljs-number">0px</span> auto;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电影ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电影名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电影票价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#lists.isEmpty(movieList)&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>抱歉！没有查询到数据！<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;#lists.isEmpty(movieList)&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;movie : $&#123;movieList&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;movie.movieId&#125;&quot;</span>&gt;</span>电影ID<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;movie.movieName&#125;&quot;</span>&gt;</span>电影名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;movie.moviePrice&#125;&quot;</span>&gt;</span>电影票价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie/removeMovie(movieId=$&#123;movie.movieId&#125;)&#125;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie/toUpdatePage(movieId=$&#123;movie.movieId&#125;)&#125;&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/add.html&#125;&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-删除一行数据"><a href="#5-删除一行数据" class="headerlink" title="5. 删除一行数据"></a>5. 删除一行数据</h4><h5 id="5-1-案例流程"><a href="#5-1-案例流程" class="headerlink" title="5.1 案例流程"></a>5.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_003.png"></p><p>重点在于将 GET 请求转换为 DELETE。基本思路是：通过一个<strong>通用表单</strong>，使用 <strong>Vue</strong> 代码先把 GET 请求转换为 POST，然后再借助 <strong>hiddenHttpMethodFilter</strong> 在服务器端把 POST 请求转为 DELETE。 </p><h5 id="5-2-具体实现"><a href="#5-2-具体实现" class="headerlink" title="5.2 具体实现"></a>5.2 具体实现</h5><h6 id="5-2-1-创建通用表单"><a href="#5-2-1-创建通用表单" class="headerlink" title="5.2.1 创建通用表单"></a>5.2.1 创建通用表单</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 组件名称：通用表单 --&gt;</span><br><span class="hljs-comment">&lt;!-- 组件作用：把删除超链接的 GET 请求转换为 POST，并携带 _method 请求参数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;convertForm&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 请求参数作用：告诉服务器端 hiddenHttpMethodFilter 要转换的目标请求方式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求参数名：_method，这是 hiddenHttpMethodFilter 中规定的 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求参数值：delete，这是因为我们希望服务器端将请求方式最终转换为 delete --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-2-2-删除超链接绑定单击响应函数"><a href="#5-2-2-删除超链接绑定单击响应函数" class="headerlink" title="5.2.2 删除超链接绑定单击响应函数"></a>5.2.2 删除超链接绑定单击响应函数</h6><ol><li>引入vue</li></ol><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_004.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/script/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li> 删除超链接绑定单击事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie/&#125;+$&#123;movie.movieId&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteMovie()&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>vue代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-string">&quot;el&quot;</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-string">&quot;methods&quot;</span>:&#123;<br>        <span class="hljs-function"><span class="hljs-title">deleteMovie</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//1. 阻止默认事件</span><br>            event.preventDefault()<br>            <span class="hljs-comment">//2. 创建一个空表单:设置表单的action的值和当前a标签的路径一致</span><br>            <span class="hljs-keyword">var</span> deleteForm = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;deleteForm&quot;</span>);<br>            deleteForm.action = event.target.href<br>            <span class="hljs-comment">//3. 提交表单</span><br>            deleteForm.submit()<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="5-2-3-handler方法"><a href="#5-2-3-handler方法" class="headerlink" title="5.2.3 handler方法"></a>5.2.3 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/&#123;movieId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">removeMovie</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;movieId&quot;)</span> String movieId)</span></span>&#123;<br>    <span class="hljs-comment">//调用业务层的方法根据id删除movie</span><br>    movieService.removeMovieById(movieId);<br>    <span class="hljs-comment">//重新查询所有</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/movie&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-跳转到添加数据的表单-不用修改"><a href="#6-跳转到添加数据的表单-不用修改" class="headerlink" title="6. 跳转到添加数据的表单(不用修改)"></a>6. 跳转到添加数据的表单(不用修改)</h4><h5 id="6-1-案例流程"><a href="#6-1-案例流程" class="headerlink" title="6.1 案例流程"></a>6.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_005.png"></p><h5 id="6-2-具体实现"><a href="#6-2-具体实现" class="headerlink" title="6.2 具体实现"></a>6.2 具体实现</h5><h6 id="6-2-1-配置view-controller"><a href="#6-2-1-配置view-controller" class="headerlink" title="6.2.1 配置view-controller"></a>6.2.1 配置view-controller</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--8. 使用view-controller访问添加页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/add.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;add&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="6-2-2-创建页面"><a href="#6-2-2-创建页面" class="headerlink" title="6.2.2 创建页面"></a>6.2.2 创建页面</h6><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_006.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/movie&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <br>    电影名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    电影票价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;moviePrice&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-执行添加"><a href="#7-执行添加" class="headerlink" title="7. 执行添加"></a>7. 执行添加</h4><h5 id="7-1-案例流程"><a href="#7-1-案例流程" class="headerlink" title="7.1 案例流程"></a>7.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_007.png"></p><h5 id="7-2-具体实现"><a href="#7-2-具体实现" class="headerlink" title="7.2 具体实现"></a>7.2 具体实现</h5><h6 id="7-2-1-handler方法"><a href="#7-2-1-handler方法" class="headerlink" title="7.2.1 handler方法"></a>7.2.1 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addMovie</span><span class="hljs-params">(Movie movie)</span></span>&#123;<br>    <span class="hljs-comment">//调用业务层的方法添加Movie</span><br>    movieService.saveMovie(movie);<br>    <span class="hljs-comment">//重新查询所有</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/movie&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="7-2-2-添加页面"><a href="#7-2-2-添加页面" class="headerlink" title="7.2.2 添加页面"></a>7.2.2 添加页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>添加电影页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/movie&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>        电影名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        电影票价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;moviePrice&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-跳转到更新数据页面"><a href="#8-跳转到更新数据页面" class="headerlink" title="8. 跳转到更新数据页面"></a>8. 跳转到更新数据页面</h4><h5 id="8-1-案例流程"><a href="#8-1-案例流程" class="headerlink" title="8.1 案例流程"></a>8.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_008.png"></p><h5 id="8-2-具体实现"><a href="#8-2-具体实现" class="headerlink" title="8.2 具体实现"></a>8.2 具体实现</h5><h6 id="8-2-1-handler方法"><a href="#8-2-1-handler方法" class="headerlink" title="8.2.1 handler方法"></a>8.2.1 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;movieId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdatePage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;movieId&quot;)</span> String movieId,Model model)</span></span>&#123;<br>    <span class="hljs-comment">//1. 根据要修改的电影的id查询到当前电影的信息</span><br>    Movie movie = movieService.getMovieById(movieId);<br>    <span class="hljs-comment">//2. 将当前电影的信息存储到请求域</span><br>    model.addAttribute(<span class="hljs-string">&quot;movie&quot;</span>,movie);<br>    <span class="hljs-comment">//3. 解析update页面</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="8-2-2-修改更新的超链接"><a href="#8-2-2-修改更新的超链接" class="headerlink" title="8.2.2 修改更新的超链接"></a>8.2.2 修改更新的超链接</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie/&#125;+$&#123;movie.movieId&#125;&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="8-2-3-页面回显数据"><a href="#8-2-3-页面回显数据" class="headerlink" title="8.2.3 页面回显数据"></a>8.2.3 页面回显数据</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/movie&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--映射成put请求--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--使用隐藏域绑定movieId--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieId&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;movie.movieId&#125;&quot;</span> /&gt;</span><br>    电影名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;movie.movieName&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    电影票价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;moviePrice&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;movie.moviePrice&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-执行更新"><a href="#9-执行更新" class="headerlink" title="9. 执行更新"></a>9. 执行更新</h4><h5 id="9-1-案例流程"><a href="#9-1-案例流程" class="headerlink" title="9.1 案例流程"></a>9.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_009.png"></p><h5 id="9-2-具体实现"><a href="#9-2-具体实现" class="headerlink" title="9.2 具体实现"></a>9.2 具体实现</h5><h6 id="9-2-1-handler方法"><a href="#9-2-1-handler方法" class="headerlink" title="9.2.1 handler方法"></a>9.2.1 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span></span>&#123;<br>    <span class="hljs-comment">//1. 调用业务层的方法修改电影信息</span><br>    movieService.updateMovie(movie);<br>    <span class="hljs-comment">//2. 重新查询所有</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/movie&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五节-REST的小结"><a href="#第五节-REST的小结" class="headerlink" title="第五节 REST的小结"></a>第五节 REST的小结</h3><ol><li>解决什么问题: 从根据功能设计url变成根据资源设计url</li><li>是什么:资源状态转移<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer</li><li>特征:<ol><li>一个url就代表一个资源，也就是说通过url我们可以知道当前请求操作的是什么资源</li><li>请求方式代表操作,也就是说通过请求方式我们知道当前请求对当前资源做的是何种操作</li></ol></li><li>效果:<ol><li>url更加简洁</li><li>url更加隐晦</li><li>操作的幂等性</li></ol></li><li>怎么实现:<ol><li>请求方式映射:HTML默认只能发送GET和POST请求，SpringMVC在某些时候需要将POST请求映射成PUT或者DELETE请求</li><li>GetMapping、PostMapping、DeleteMapping、PutMapping要选择情况使用</li><li>合理设计url</li><li>使用Pathvariable注解获取REST风格的url上的路径参数</li></ol></li></ol><h2 id="第二章-Ajax交互"><a href="#第二章-Ajax交互" class="headerlink" title="第二章 Ajax交互"></a>第二章 Ajax交互</h2><h3 id="第一节-获取请求参数"><a href="#第一节-获取请求参数" class="headerlink" title="第一节 获取请求参数"></a>第一节 获取请求参数</h3><h4 id="1-获取普通类型参数-与之前获取请求参数的方式一致"><a href="#1-获取普通类型参数-与之前获取请求参数的方式一致" class="headerlink" title="1. 获取普通类型参数(与之前获取请求参数的方式一致)"></a>1. 获取普通类型参数(与之前获取请求参数的方式一致)</h4><h5 id="1-1-引入JavaScript库"><a href="#1-1-引入JavaScript库" class="headerlink" title="1.1 引入JavaScript库"></a>1.1 引入JavaScript库</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_010.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-前端代码"><a href="#1-2-前端代码" class="headerlink" title="1.2 前端代码"></a>1.2 前端代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">sendCommon</span>(<span class="hljs-params"></span>)</span>&#123;<br>    axios(&#123;<br>        <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;ajax/commonParameter&quot;</span>,<br>        <span class="hljs-comment">//params表示携带普通类型的参数</span><br>        <span class="hljs-string">&quot;params&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;userName&quot;</span>:<span class="hljs-string">&quot;tom&quot;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>        &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-后端代码"><a href="#1-3-后端代码" class="headerlink" title="1.3 后端代码"></a>1.3 后端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/commonParameter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">commonParameter</span><span class="hljs-params">(User user)</span></span>&#123;<br>    <span class="hljs-comment">//获取异步请求携带的普通类型参数，和以前获取同步请求携带的参数是一样的</span><br>    logger.debug(user.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-获取JSON请求体参数"><a href="#2-获取JSON请求体参数" class="headerlink" title="2. 获取JSON请求体参数"></a>2. 获取JSON请求体参数</h4><h5 id="2-1-前端代码"><a href="#2-1-前端代码" class="headerlink" title="2.1 前端代码"></a>2.1 前端代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">sendJsonBody</span>(<span class="hljs-params"></span>)</span>&#123;<br>    axios(&#123;<br>        <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;ajax/jsonBodyParameter&quot;</span>,<br>        <span class="hljs-comment">//data表示携带json请求体类型的参数</span><br>        <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;userName&quot;</span>:<span class="hljs-string">&quot;tom&quot;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>        &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-后端代码"><a href="#2-2-后端代码" class="headerlink" title="2.2 后端代码"></a>2.2 后端代码</h5><h6 id="2-2-1-引入jackson依赖"><a href="#2-2-1-引入jackson依赖" class="headerlink" title="2.2.1 引入jackson依赖"></a>2.2.1 引入jackson依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果忘记导入这个依赖，会看到下面的错误页面 </p><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_011.png"></p><p>关于 SpringMVC 和 Jackson jar包之间的关系，需要注意：当 SpringMVC 需要解析 JSON 数据时就需要使用 Jackson 的支持。但是 SpringMVC 的 jar 包并没有依赖 Jackson，所以需要我们自己导入。</p><p>我们自己导入时需要注意：SpringMVC 和 Jackson 配合使用有版本的要求。二者中任何一个版本太高或太低都不行。</p><p>SpringMVC 解析 JSON 数据包括两个方向：</p><ul><li>从 JSON 字符串到 Java 实体类。</li><li>从 Java 实体类到 JSON 字符串。</li></ul><p>另外，如果导入了 Jackson 依赖，但是没有开启 mvc:annotation-driven 功能，那么仍然会返回上面的错误页面。</p><p>也就是说，我们可以这么总结 SpringMVC 想要解析 JSON 数据需要两方面支持：</p><ul><li>mvc:annotation-driven</li><li>引入 Jackson 依赖</li></ul><p>还有一点，如果运行环境是 Tomcat7，那么在 Web 应用启动时会抛出下面异常：</p><blockquote><p>org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19</p></blockquote><p>解决办法是使用 Tomcat8 或更高版本。</p><h6 id="2-2-2-handler方法"><a href="#2-2-2-handler方法" class="headerlink" title="2.2.2 handler方法"></a>2.2.2 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jsonBodyParameter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jsonBodyParameter</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span></span>&#123;<br>    <span class="hljs-comment">//1. 获取Json请求体类型的参数必须要封装到POJO对象或者是Map中</span><br>    <span class="hljs-comment">//2. POJO参数或者Map参数的前面一定要加入RequestBody注解</span><br>    <span class="hljs-comment">//3. 你的项目中一定要引入jackson的依赖(因为SpringMVC默认支持jackson)</span><br>    <span class="hljs-comment">//获取Json请求体类型的请求参数和获取普通类型的参数不一样</span><br>    logger.debug(user.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-3-RequestBody注解"><a href="#2-2-3-RequestBody注解" class="headerlink" title="2.2.3 RequestBody注解"></a>2.2.3 RequestBody注解</h6><p>适用 @RequestBody 注解的场景：请求体整个是一个 JSON 数据 </p><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_012.png"></p><p>Request Payload 翻译成中文大致可以说：请求负载。 </p><h3 id="第二节-响应JSON类型数据"><a href="#第二节-响应JSON类型数据" class="headerlink" title="第二节 响应JSON类型数据"></a>第二节 响应JSON类型数据</h3><h4 id="1-前端代码"><a href="#1-前端代码" class="headerlink" title="1. 前端代码"></a>1. 前端代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">sendJsonBody</span>(<span class="hljs-params"></span>)</span>&#123;<br>    axios(&#123;<br>        <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;ajax/jsonBodyParameter&quot;</span>,<br>        <span class="hljs-comment">//data表示携带json请求体类型的参数</span><br>        <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;userName&quot;</span>:<span class="hljs-string">&quot;tom&quot;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>        &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(response.data.movieName)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-后端代码"><a href="#2-后端代码" class="headerlink" title="2. 后端代码"></a>2. 后端代码</h4><p>前提是项目中引入了jackson的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/jsonBodyParameter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Movie <span class="hljs-title">jsonBodyParameter</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span></span>&#123;<br>    logger.debug(user.toString());<br><br>    Movie movie = <span class="hljs-keyword">new</span> Movie(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;西游记&quot;</span>, <span class="hljs-number">40.0</span>);<br>    <span class="hljs-comment">//目标:将movie转成json字符串响应给客户端</span><br>    <span class="hljs-comment">//1. handler方法的返回值就是你要转成json的那个对象</span><br>    <span class="hljs-comment">//2. handler方法上必须添加ResponseBody注解</span><br>    <span class="hljs-comment">//3. 你的项目中一定要引入了jackson的依赖</span><br>    <span class="hljs-keyword">return</span> movie;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-常见错误"><a href="#3-常见错误" class="headerlink" title="3. 常见错误"></a>3. 常见错误</h4><h5 id="3-1-500-错误"><a href="#3-1-500-错误" class="headerlink" title="3.1 500 错误"></a>3.1 500 错误</h5><p><img src="http://www.slx.blue/2021/12/11/springMVC-02/tu_014.png"></p><p>出现上面的错误页面，表示SpringMVC 为了将 实体类对象转换为 JSON 数据, 需要转换器。但是现在找不到转换器。它想要成功完成转换需要两方面支持：</p><ul><li>mvc:annotation-driven</li><li>引入Jackson依赖</li></ul><h5 id="3-2-406-错误-了解"><a href="#3-2-406-错误-了解" class="headerlink" title="3.2 406 错误(了解)"></a>3.2 406 错误(了解)</h5><p>问题出现的原因：</p><ul><li>请求地址扩展名：html</li><li>服务器端打算返回的数据格式：JSON</li></ul><p>上面二者不一致。SpringMVC 要坚守一个商人的良心，不能干『挂羊头，卖狗肉』的事儿。解决办法有三种思路：</p><ul><li>第一种方法：不使用请求扩展名</li><li>第二种方法：使用和实际返回的数据格式一致的扩展名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.json<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>第三种方法：使用一个 HTTP 协议中没有被定义的扩展名，例如：*.do</li></ul><h4 id="4-RestController注解"><a href="#4-RestController注解" class="headerlink" title="4. RestController注解"></a>4. RestController注解</h4><h5 id="4-1-提取ResponseBody注解"><a href="#4-1-提取ResponseBody注解" class="headerlink" title="4.1 提取ResponseBody注解"></a>4.1 提取ResponseBody注解</h5><p>如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上。 </p><h5 id="4-2-合并注解"><a href="#4-2-合并注解" class="headerlink" title="4.2 合并注解"></a>4.2 合并注解</h5><p>类上的ResponseBody 注解可以和Controller 注解合并为RestController 注解。所以使用了RestController 注解就相当于给类中的每个方法都加了ResponseBody 注解。 </p><h5 id="4-3-RestController源码"><a href="#4-3-RestController源码" class="headerlink" title="4.3 RestController源码"></a>4.3 RestController源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RestController &#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The value may indicate a suggestion for a logical component name,</span><br><span class="hljs-comment">     * to be turned into a Spring bean in case of an autodetected component.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 4.0.1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AliasFor(annotation = Controller.class)</span><br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC-01</title>
      <link href="/2021/12/10/springMVC-01/"/>
      <url>/2021/12/10/springMVC-01/</url>
      
        <content type="html"><![CDATA[<h1 id="springmvc-day01"><a href="#springmvc-day01" class="headerlink" title="springmvc-day01"></a>springmvc-day01</h1><h2 id="第一章-SpringMVC入门"><a href="#第一章-SpringMVC入门" class="headerlink" title="第一章 SpringMVC入门"></a>第一章 SpringMVC入门</h2><h3 id="第一节-SpringMVC概述"><a href="#第一节-SpringMVC概述" class="headerlink" title="第一节 SpringMVC概述"></a>第一节 SpringMVC概述</h3><h4 id="1-SpringMVC-优势"><a href="#1-SpringMVC-优势" class="headerlink" title="1. SpringMVC 优势"></a>1. SpringMVC 优势</h4><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。之所以能做到这一点，是因为 SpringMVC 具备如下显著优势：</p><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h4 id="2-表述层框架要解决的基本问题"><a href="#2-表述层框架要解决的基本问题" class="headerlink" title="2. 表述层框架要解决的基本问题"></a>2. 表述层框架要解决的基本问题</h4><ul><li>请求映射:让一个方法处理一个请求</li><li>数据输入:获取请求参数</li><li>类型转换:内置或者自定义类型转换器，对请求参数的类型进行转换</li><li>数据校验:参数的非空校验</li><li>视图界面:Thymeleaf</li><li>请求分发:请求转发</li><li>与域对象交互</li><li>会话控制:Session</li><li>过滤拦截:Filter</li><li>异步交互</li><li>文件上传</li><li>文件下载</li></ul><h3 id="第二节-SpringMVC入门案例-重点"><a href="#第二节-SpringMVC入门案例-重点" class="headerlink" title="第二节 SpringMVC入门案例(重点)"></a>第二节 SpringMVC入门案例(重点)</h3><h4 id="1-功能需求"><a href="#1-功能需求" class="headerlink" title="1. 功能需求"></a>1. 功能需求</h4><h5 id="1-1-访问首页"><a href="#1-1-访问首页" class="headerlink" title="1.1 访问首页"></a>1.1 访问首页</h5><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_001.png" style="zoom: 80%;"><h5 id="1-2-在首页点超链接"><a href="#1-2-在首页点超链接" class="headerlink" title="1.2 在首页点超链接"></a>1.2 在首页点超链接</h5><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_002.png" style="zoom:80%;"><h4 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2. 搭建环境"></a>2. 搭建环境</h4><h5 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。 </p><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_003.png"></p><h5 id="2-2-日志配置文件"><a href="#2-2-日志配置文件" class="headerlink" title="2.2 日志配置文件"></a>2.2 日志配置文件</h5><p>文件名：logback.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-web-xml配置"><a href="#2-3-web-xml配置" class="headerlink" title="2.3 web.xml配置"></a>2.3 web.xml配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC中负责处理请求的核心Servlet，也被称为SpringMVC的前端控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- DispatcherServlet的全类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <br>        <span class="hljs-comment">&lt;!-- 如果不记得contextConfigLocation配置项的名称，可以到DispatcherServlet的父类FrameworkServlet中查找 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <br>        <span class="hljs-comment">&lt;!-- 使用classpath:说明这个路径从类路径的根目录开始才查找 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做，这些操作放在第一次请求时才执行非常不恰当 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 我们应该将DispatcherServlet设置为随Web应用一起启动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 对DispatcherServlet来说，url-pattern有两种方式配置 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 方式一：配置“/”，表示匹配整个Web应用范围内所有请求。 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 方式二：配置“*.扩展名”，表示匹配整个Web应用范围内部分请求 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-4-Spring配置文件"><a href="#2-4-Spring配置文件" class="headerlink" title="2.4 Spring配置文件"></a>2.4 Spring配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.mvc.handler&quot;</span>/&gt;</span><br>    <br><span class="hljs-comment">&lt;!-- Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><h5 id="3-1-创建请求处理器类"><a href="#3-1-创建请求处理器类" class="headerlink" title="3.1 创建请求处理器类"></a>3.1 创建请求处理器类</h5><h6 id="3-1-1-命名规范"><a href="#3-1-1-命名规范" class="headerlink" title="3.1.1 命名规范"></a>3.1.1 命名规范</h6><p>SpringMVC 对处理请求的类并没有特殊要求，只要是 JavaBean 即可。我们自己习惯上有两种命名方式：</p><ul><li>XxxHandler：意思是 Xxx 处理器的意思</li><li>XxxController：意思是 Xxx 控制器的意思</li></ul><p>这只是一个命名的习惯，不是语法要求。所以往往把处理请求的类叫做『Handler类』，处理请求的方法叫做『Handler方法』。</p><h6 id="3-1-2-创建处理器类"><a href="#3-1-2-创建处理器类" class="headerlink" title="3.1.2 创建处理器类"></a>3.1.2 创建处理器类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01HelloHandler</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-实现访问首页"><a href="#3-2-实现访问首页" class="headerlink" title="3.2 实现访问首页"></a>3.2 实现访问首页</h5><h6 id="3-2-1-创建-handler-方法"><a href="#3-2-1-创建-handler-方法" class="headerlink" title="3.2.1 创建 handler 方法"></a>3.2.1 创建 handler 方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01Handler</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showPortal</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;showPortal()方法被调用了...&quot;</span>);<br>        <span class="hljs-comment">//handler方法的返回值就是对应的Thymeleaf模板的逻辑视图</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-2-2-在首页编写超链接"><a href="#3-2-2-在首页编写超链接" class="headerlink" title="3.2.2 在首页编写超链接"></a>3.2.2 在首页编写超链接</h6><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_004.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到SpringMVC首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&quot;@&#123;/&#125;&quot;表示&quot;/项目名/&quot;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toTarget&#125;&quot;</span>&gt;</span>访问目标页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-3-实现点击超链接"><a href="#3-3-实现点击超链接" class="headerlink" title="3.3 实现点击超链接"></a>3.3 实现点击超链接</h5><h6 id="3-3-1-加入日志记录仪"><a href="#3-3-1-加入日志记录仪" class="headerlink" title="3.3.1 加入日志记录仪"></a>3.3.1 加入日志记录仪</h6><p>在 handler 类中声明一个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="hljs-keyword">this</span>.getClass());<br></code></pre></td></tr></table></figure><ul><li>Logger：org.slf4j.Logger</li><li>LoggerFactory：org.slf4j.LoggerFactory</li></ul><h6 id="3-3-2-声明-handler-方法"><a href="#3-3-2-声明-handler-方法" class="headerlink" title="3.3.2 声明 handler 方法"></a>3.3.2 声明 handler 方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toTarget&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toTarget</span><span class="hljs-params">()</span></span>&#123;<br>    logger.debug(<span class="hljs-string">&quot;toTarget方法被调用了...&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-3-3-创建目标页面"><a href="#3-3-3-创建目标页面" class="headerlink" title="3.3.3 创建目标页面"></a>3.3.3 创建目标页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>目标页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到目标页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-4-整体流程解析"><a href="#3-4-整体流程解析" class="headerlink" title="3.4 整体流程解析"></a>3.4 整体流程解析</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_006.png"></p><h3 id="第三节-常见注解"><a href="#第三节-常见注解" class="headerlink" title="第三节 常见注解"></a>第三节 常见注解</h3><h4 id="1-RequestMapping注解-重点"><a href="#1-RequestMapping注解-重点" class="headerlink" title="1. RequestMapping注解(重点)"></a>1. RequestMapping注解(重点)</h4><h5 id="1-1-作用"><a href="#1-1-作用" class="headerlink" title="1.1 作用"></a>1.1 作用</h5><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p><h5 id="1-2-使用位置"><a href="#1-2-使用位置" class="headerlink" title="1.2 使用位置"></a>1.2 使用位置</h5><h6 id="1-2-1-准备客户端访问路径"><a href="#1-2-1-准备客户端访问路径" class="headerlink" title="1.2.1 准备客户端访问路径"></a>1.2.1 准备客户端访问路径</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试@RequestMapping注解标记在类上<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/login&#125;&quot;</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/register&#125;&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/logout&#125;&quot;</span>&gt;</span>用户退出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-2-2-仅标记在方法上的RequestMapping注解"><a href="#1-2-2-仅标记在方法上的RequestMapping注解" class="headerlink" title="1.2.2 仅标记在方法上的RequestMapping注解"></a>1.2.2 仅标记在方法上的RequestMapping注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user/login&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/register&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/logout&quot;)</span><br></code></pre></td></tr></table></figure><h6 id="1-2-3-分别标记在类和方法上的-RequestMapping注解"><a href="#1-2-3-分别标记在类和方法上的-RequestMapping注解" class="headerlink" title="1.2.3 分别标记在类和方法上的@RequestMapping注解"></a>1.2.3 分别标记在类和方法上的@RequestMapping注解</h6><p>在类级别：抽取各个方法上@RequestMapping注解地址中前面重复的部分 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br></code></pre></td></tr></table></figure><p>在方法级别：省略被类级别抽取的部分 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/register&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/logout&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="1-3-指定请求方式"><a href="#1-3-指定请求方式" class="headerlink" title="1.3 指定请求方式"></a>1.3 指定请求方式</h5><h6 id="1-3-1-通过RequestMapping的method属性指定"><a href="#1-3-1-通过RequestMapping的method属性指定" class="headerlink" title="1.3.1 通过RequestMapping的method属性指定"></a>1.3.1 通过RequestMapping的method属性指定</h6><p>HTTP 协议定义了八种请求方式，在 SpringMVC 中封装到了下面这个枚举类： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RequestMethod</span> </span>&#123;<br>    GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE<br>&#125;<br></code></pre></td></tr></table></figure><p>设置RequestMapping注解的method属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//value属性表示匹配请求路径，method属性表示匹配请求方式</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/emp&quot;, method = RequestMethod.GET)</span><br></code></pre></td></tr></table></figure><h6 id="1-3-2-通过RequestMapping的进阶注解指定"><a href="#1-3-2-通过RequestMapping的进阶注解指定" class="headerlink" title="1.3.2 通过RequestMapping的进阶注解指定"></a>1.3.2 通过RequestMapping的进阶注解指定</h6><table><thead><tr><th>原版</th><th>进阶版</th></tr></thead><tbody><tr><td>@RequestMapping(value = “/emp”,  method = RequestMethod.GET)</td><td>@GetMapping(“/emp”)</td></tr><tr><td>@RequestMapping(value = “/emp”,  method = RequestMethod.POST)</td><td>@PostMapping(“/emp”)</td></tr><tr><td>@RequestMapping(value = “/emp”,  method = RequestMethod.PUT)</td><td>@PutMapping(“/emp”)</td></tr><tr><td>@RequestMapping(value = “/emp”,  method = RequestMethod.DELETE)</td><td>@DeleteMapping(“/emp”)</td></tr></tbody></table><p> 针对Http的八种请求方式都有专门的注解</p><p> 另外需要注意：进阶版的这几个注解是从 4.3 版本才开始有，低于 4.3 版本无法使用。 </p><h5 id="1-4-Ambiguous-mapping异常"><a href="#1-4-Ambiguous-mapping异常" class="headerlink" title="1.4 Ambiguous mapping异常"></a>1.4 Ambiguous mapping异常</h5><p>出现原因：多个 handler 方法映射了同一个地址，导致 SpringMVC 在接收到这个地址的请求时该找哪个 handler 方法处理。</p><blockquote><p>Caused by: java.lang.IllegalStateException: Ambiguous mapping. Cannot map ‘demo03MappingMethodHandler’ method  com.atguigu.mvc.handler.Demo03MappingMethodHandler#empPost() to { [/emp]}: <strong>There is already</strong> ‘demo03MappingMethodHandler’ bean method com.atguigu.mvc.handler.Demo03MappingMethodHandler#empGet() <strong>mapped</strong>.</p></blockquote><h4 id="2-RequestHeader注解-了解"><a href="#2-RequestHeader注解-了解" class="headerlink" title="2. RequestHeader注解(了解)"></a>2. RequestHeader注解(了解)</h4><h5 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1 作用"></a>2.1 作用</h5><p>通过这个注解获取请求消息头中的具体数据。 </p><h5 id="2-2-用法"><a href="#2-2-用法" class="headerlink" title="2.2 用法"></a>2.2 用法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/getHeader&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHeaderValue</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;user-agent&quot;)</span> String headerValue)</span></span>&#123;<br>    <span class="hljs-comment">//目标:获取user-agent请求头的信息，并且赋值给headerValue</span><br>    logger.debug(headerValue);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-CookieValue注解-了解"><a href="#3-CookieValue注解-了解" class="headerlink" title="3. CookieValue注解(了解)"></a>3. CookieValue注解(了解)</h4><h5 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h5><p>获取当前请求中的 Cookie 数据。 </p><h5 id="3-2-用法"><a href="#3-2-用法" class="headerlink" title="3.2 用法"></a>3.2 用法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/getCookie&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCookieValue</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;JSESSIONID&quot;,defaultValue = &quot;abc&quot;)</span> String cookieValue)</span></span>&#123;<br>    <span class="hljs-comment">//目标:获取浏览器中的名为&quot;JSESSIONID&quot;的cookie的值，赋值给CookieValue参数</span><br>    logger.debug(cookieValue);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-获取请求参数-重点"><a href="#第四节-获取请求参数-重点" class="headerlink" title="第四节 获取请求参数(重点)"></a>第四节 获取请求参数(重点)</h3><h4 id="1-根据一个参数名获取一个参数值"><a href="#1-根据一个参数名获取一个参数值" class="headerlink" title="1. 根据一个参数名获取一个参数值"></a>1. 根据一个参数名获取一个参数值</h4><h5 id="1-1-前端页面携带请求参数"><a href="#1-1-前端页面携带请求参数" class="headerlink" title="1.1 前端页面携带请求参数"></a>1.1 前端页面携带请求参数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/param/one(userName=&#x27;tom&#x27;)&#125;&quot;</span>&gt;</span>一个名字一个值的情况<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-处理器中获取请求参数"><a href="#1-2-处理器中获取请求参数" class="headerlink" title="1.2 处理器中获取请求参数"></a>1.2 处理器中获取请求参数</h5><h6 id="1-2-1-最简写法"><a href="#1-2-1-最简写法" class="headerlink" title="1.2.1 最简写法"></a>1.2.1 最简写法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/oneParameter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">oneParameter</span><span class="hljs-params">(String username)</span></span>&#123;<br>    <span class="hljs-comment">//最简单的方式获取单个请求参数:就是在handler方法中添加一个和请求参数名同名的参数，来接收请求参数</span><br>    <span class="hljs-comment">//其实这个地方String username此处省略了一个注解 @RequestParam</span><br>    <span class="hljs-comment">//@RequestParam(&quot;username&quot;)就是通过参数名获取请求参数</span><br>    logger.debug(username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-2-使用RequestParam注解"><a href="#1-2-2-使用RequestParam注解" class="headerlink" title="1.2.2 使用RequestParam注解"></a>1.2.2 使用RequestParam注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/oneParameter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">oneParameter</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span></span>&#123;<br>    <span class="hljs-comment">//最简单的方式获取单个请求参数:就是在handler方法中添加一个和请求参数名同名的参数，来接收请求参数</span><br>    <span class="hljs-comment">//其实这个地方String username此处省略了一个注解 @RequestParam</span><br>    <span class="hljs-comment">//@RequestParam(&quot;username&quot;)就是通过参数名获取请求参数</span><br>    logger.debug(username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-3-如果此时请求中没有携带username参数"><a href="#1-2-3-如果此时请求中没有携带username参数" class="headerlink" title="1.2.3 如果此时请求中没有携带username参数"></a>1.2.3 如果此时请求中没有携带username参数</h6><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_007.png"></p><p>页面信息说明：</p><ul><li>响应状态码：400（在 SpringMVC 环境下，400通常和数据注入相关）</li><li>说明信息：必需的 String 请求参数 ‘username’ 不存在</li></ul><p>原因可以参考 @RequestParam 注解的 required 属性：默认值为true，表示请求参数默认必须提供</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Whether the parameter is required.</span><br><span class="hljs-comment">     * &lt;p&gt;Defaults to &#123;<span class="hljs-doctag">@code</span> true&#125;, leading to an exception being thrown</span><br><span class="hljs-comment">     * if the parameter is missing in the request. Switch this to</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> false&#125; if you prefer a &#123;<span class="hljs-doctag">@code</span> null&#125; value if the parameter is</span><br><span class="hljs-comment">     * not present in the request.</span><br><span class="hljs-comment">     * &lt;p&gt;Alternatively, provide a &#123;<span class="hljs-doctag">@link</span> #defaultValue&#125;, which implicitly</span><br><span class="hljs-comment">     * sets this flag to &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;<br></code></pre></td></tr></table></figure><p>我们可以通过将required 属性设置为 false 表示这个请求参数可有可无： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(value = &quot;userName&quot;, required = false)</span><br></code></pre></td></tr></table></figure><p>当然，我们也可以通过设置请求参数的默认值来解决上述<code>400</code>错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(value = &quot;userName&quot;, defaultValue = &quot;missing&quot;)</span><br></code></pre></td></tr></table></figure><h4 id="2-根据一个参数名获取多个参数值"><a href="#2-根据一个参数名获取多个参数值" class="headerlink" title="2. 根据一个参数名获取多个参数值"></a>2. 根据一个参数名获取多个参数值</h4><h5 id="2-1-前端页面携带请求参数"><a href="#2-1-前端页面携带请求参数" class="headerlink" title="2.1 前端页面携带请求参数"></a>2.1 前端页面携带请求参数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/param/multi&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    请选择你最喜欢的球队：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Brazil&quot;</span>/&gt;</span>巴西<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;German&quot;</span>/&gt;</span>德国<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;French&quot;</span>/&gt;</span>法国<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Holland&quot;</span>/&gt;</span>荷兰<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Italian&quot;</span>/&gt;</span>意大利<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>/&gt;</span>中国<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保存&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-处理器中获取请求参数"><a href="#2-2-处理器中获取请求参数" class="headerlink" title="2.2 处理器中获取请求参数"></a>2.2 处理器中获取请求参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/multi&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">oneNameMultiValue</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;team&quot;)</span>List&lt;String&gt; teamList)</span></span>&#123;<br>    logger.debug(teamList.toString());<br>    <span class="hljs-comment">//要使用什么类型来接收参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-使用实体类封装请求参数"><a href="#3-使用实体类封装请求参数" class="headerlink" title="3. 使用实体类封装请求参数"></a>3. 使用实体类封装请求参数</h4><h5 id="3-1-前端页面携带请求参数"><a href="#3-1-前端页面携带请求参数" class="headerlink" title="3.1 前端页面携带请求参数"></a>3.1 前端页面携带请求参数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;emp/save&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    工资：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empSalary&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保存&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-封装实体类"><a href="#3-2-封装实体类" class="headerlink" title="3.2 封装实体类"></a>3.2 封装实体类</h5><p>注意: 实体类的属性名要和请求参数名一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer empAge;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-处理器中获取请求参数"><a href="#3-3-处理器中获取请求参数" class="headerlink" title="3.3 处理器中获取请求参数"></a>3.3 处理器中获取请求参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/pojo&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">parameterToPojo</span><span class="hljs-params">(Employee employee)</span></span>&#123;<br>    <span class="hljs-comment">//获取请求参数封装到Employee对象中:只需要保证Employee类中的属性和请求参数名一致</span><br>    logger.debug(employee.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-4-解决POST请求的中文字符乱码问题"><a href="#3-4-解决POST请求的中文字符乱码问题" class="headerlink" title="3.4 解决POST请求的中文字符乱码问题"></a>3.4 解决POST请求的中文字符乱码问题</h5><p>到 web.xml 中配置 CharacterEncodingFilter 即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置过滤器解决 POST 请求的字符乱码问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- encoding参数指定要使用的字符集名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 请求强制编码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 响应强制编码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注1：在较低版本的 SpringMVC 中，forceRequestEncoding 属性、forceResponseEncoding 属性没有分开，它们是一个 forceEncoding 属性。这里需要注意一下。</p><p>注2：由于 CharacterEncodingFilter 是通过 request.setCharacterEncoding(encoding); 来设置请求字符集，所以在此操作前不能有任何的 request.getParameter() 操作。在设置字符集之前获取过请求参数，那么设置字符集的操作将无效。</p><h4 id="4-使用Map封装请求参数"><a href="#4-使用Map封装请求参数" class="headerlink" title="4. 使用Map封装请求参数"></a>4. 使用Map封装请求参数</h4><h5 id="4-1-前端页面表单"><a href="#4-1-前端页面表单" class="headerlink" title="4.1 前端页面表单"></a>4.1 前端页面表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/parameter/map&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    工资：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empSalary&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保存&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-2-handler方法接收参数"><a href="#4-2-handler方法接收参数" class="headerlink" title="4.2 handler方法接收参数"></a>4.2 handler方法接收参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/map&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">parameterToMap</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map map)</span></span>&#123;<br>    <span class="hljs-comment">//获取请求参数，封装到Map中:请求参数名就是map的key，请求参数值就是map的value</span><br>    logger.debug(map.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-实体类封装的数据包含级联属性-了解"><a href="#5-实体类封装的数据包含级联属性-了解" class="headerlink" title="5. 实体类封装的数据包含级联属性(了解"></a>5. 实体类封装的数据包含级联属性(了解</h4><h5 id="5-1-实体类"><a href="#5-1-实体类" class="headerlink" title="5.1 实体类"></a>5.1 实体类</h5><h6 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String stuName;<br>    <span class="hljs-keyword">private</span> School school;<br>    <span class="hljs-keyword">private</span> List&lt;Subject&gt; subjectList;<br>    <span class="hljs-keyword">private</span> Subject[] subjectArray;<br>    <span class="hljs-keyword">private</span> List&lt;Teacher&gt; teacherList;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Double&gt; scores;<br>    ……<br></code></pre></td></tr></table></figure><h6 id="School"><a href="#School" class="headerlink" title="School"></a>School</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">School</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String schoolName;<br>    ……<br></code></pre></td></tr></table></figure><h6 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String subjectName;<br>    ……<br></code></pre></td></tr></table></figure><h6 id="Teacher"><a href="#Teacher" class="headerlink" title="Teacher"></a>Teacher</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String teacherName;<br>    ……<br></code></pre></td></tr></table></figure><h5 id="5-2-前端页面携带请求参数"><a href="#5-2-前端页面携带请求参数" class="headerlink" title="5.2 前端页面携带请求参数"></a>5.2 前端页面携带请求参数</h5><p>表单项中的 name 属性值必须严格按照级联对象的属性来设定： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 提交数据的表单 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;param/toNestEntity&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    stuName：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    school.schoolName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;school.schoolName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;atguigu&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectList[0].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectList[0].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectList[1].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectList[1].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectList[2].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectList[2].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;javascript&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectList[3].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectList[3].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;css&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectList[4].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectList[4].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vue&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectArray[0].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectArray[0].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectArray[1].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectArray[1].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SpringMVC&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectArray[2].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectArray[2].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mybatis&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectArray[3].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectArray[3].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;maven&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    subjectArray[4].subjectName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subjectArray[4].subjectName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    teacherList[0].teacherName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherList[0].teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t_one&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    teacherList[1].teacherName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherList[1].teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t_two&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    teacherList[2].teacherName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherList[2].teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t_three&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    teacherList[3].teacherName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherList[3].teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t_four&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    teacherList[4].teacherName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherList[4].teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t_five&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    scores[&#x27;Chinese&#x27;]：input type=&quot;text&quot; name=&quot;scores[&#x27;Chinese&#x27;]&quot; value=&quot;100&quot;/&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    scores[&#x27;English&#x27;]：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scores[&#x27;English&#x27;]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;95&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    scores[&#x27;Mathematics&#x27;]：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scores[&#x27;Mathematics&#x27;]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;88&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    scores[&#x27;Chemistry&#x27;]：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scores[&#x27;Chemistry&#x27;]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;63&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    scores[&#x27;Biology&#x27;]：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scores[&#x27;Biology&#x27;]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;44&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保存&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-3-处理器中获取请求参数"><a href="#5-3-处理器中获取请求参数" class="headerlink" title="5.3 处理器中获取请求参数"></a>5.3 处理器中获取请求参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/param/toNestEntity&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">formToNestedEntity</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        // SpringMVC 自己懂得注入级联属性，只要属性名和对应的getXxx()</span>、<span class="hljs-title">setXxx</span><span class="hljs-params">()</span>匹配即可</span><br><span class="hljs-function">        Student student) </span>&#123;<br>    logger.debug(student.toString());<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五节-访问静态资源-重点"><a href="#第五节-访问静态资源-重点" class="headerlink" title="第五节 访问静态资源(重点)"></a>第五节 访问静态资源(重点)</h3><h4 id="1-SpringMVC环境下的静态资源访问问题"><a href="#1-SpringMVC环境下的静态资源访问问题" class="headerlink" title="1. SpringMVC环境下的静态资源访问问题"></a>1. SpringMVC环境下的静态资源访问问题</h4><h5 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h5><p>在 Web 应用中加入图片资源：</p><p> <img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_009.png"></p><p>访问静态资源</p><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_010.png"></p><h5 id="1-2-分析原因"><a href="#1-2-分析原因" class="headerlink" title="1.2 分析原因"></a>1.2 分析原因</h5><ul><li>DispatcherServlet 的 url-pattern 配置的是“/”</li><li>url-pattern 配置“/”表示整个 Web 应用范围内所有请求都由 SpringMVC 来处理</li><li>对 SpringMVC 来说，必须有对应的 @RequestMapping 才能找到处理请求的方法</li><li>现在static/images/mm.jpg 请求没有对应的 @RequestMapping 所以返回 404</li></ul><h5 id="1-3-解决办法"><a href="#1-3-解决办法" class="headerlink" title="1.3 解决办法"></a>1.3 解决办法</h5><p>在 SpringMVC 配置文件中增加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加入这个配置，SpringMVC 就会在遇到没有 @RequestMapping 的请求时放它过去 --&gt;</span><br><span class="hljs-comment">&lt;!-- 所谓放它过去就是让这个请求去找它原本要访问的资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>再次测试访问图片：</p><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_011.png"></p><p>新的问题：其他原本正常的请求访问不了了,进一步解决问题：再增加一个配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启 SpringMVC 的注解驱动功能。这个配置也被称为 SpringMVC 的标配。 --&gt;</span><br><span class="hljs-comment">&lt;!-- 标配：因为 SpringMVC 环境下非常多的功能都要求必须打开注解驱动才能正常工作。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-4-default-servlet-handler底层-了解"><a href="#1-4-default-servlet-handler底层-了解" class="headerlink" title="1.4 default-servlet-handler底层[了解]"></a>1.4 default-servlet-handler底层[了解]</h5><p>所在类：org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler</p><p>关键方法：handleRequest()方法</p><p>大体机制：SpringMVC 首先查找是否存在和当前请求对应的 @RequestMapping；如果没有，则调用handleRequest()方法转发到目标资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <br>    Assert.state(<span class="hljs-keyword">this</span>.servletContext != <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;No ServletContext set&quot;</span>);<br>    RequestDispatcher rd = <span class="hljs-keyword">this</span>.servletContext.getNamedDispatcher(<span class="hljs-keyword">this</span>.defaultServletName);<br>    <span class="hljs-keyword">if</span> (rd == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;A RequestDispatcher could not be located for the default servlet &#x27;&quot;</span> +<br>        <span class="hljs-keyword">this</span>.defaultServletName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 这里执行请求转发操作</span><br>    rd.forward(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第六节-页面跳转控制"><a href="#第六节-页面跳转控制" class="headerlink" title="第六节 页面跳转控制"></a>第六节 页面跳转控制</h3><h4 id="1-访问Thymeleaf前后缀控制范围内的页面"><a href="#1-访问Thymeleaf前后缀控制范围内的页面" class="headerlink" title="1. 访问Thymeleaf前后缀控制范围内的页面"></a>1. 访问Thymeleaf前后缀控制范围内的页面</h4><p>访问Thymeleaf前后缀控制范围之内的页面，直接<code>return</code>逻辑视图即可，但是访问前后缀控制范围之外的页面，则需要使用重定向或者请求转发</p><h4 id="2-访问Thymeleaf前后缀控制范围外的页面-了解"><a href="#2-访问Thymeleaf前后缀控制范围外的页面-了解" class="headerlink" title="2. 访问Thymeleaf前后缀控制范围外的页面(了解)"></a>2. 访问Thymeleaf前后缀控制范围外的页面(了解)</h4><h5 id="2-1-创建范围之外的页面"><a href="#2-1-创建范围之外的页面" class="headerlink" title="2.1 创建范围之外的页面"></a>2.1 创建范围之外的页面</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_008.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>范围之外页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-在-SpringMVC-配置文件加入配置"><a href="#2-2-在-SpringMVC-配置文件加入配置" class="headerlink" title="2.2 在 SpringMVC 配置文件加入配置"></a>2.2 在 SpringMVC 配置文件加入配置</h5><p>下面配置是访问静态资源所需配置(如果没有它的话，访问静态资源会被DispatcherServlet所拦截)： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-使用指令进行跳转-了解"><a href="#2-3-使用指令进行跳转-了解" class="headerlink" title="2.3 使用指令进行跳转(了解)"></a>2.3 使用指令进行跳转(了解)</h5><h6 id="2-3-1-请求转发的指令"><a href="#2-3-1-请求转发的指令" class="headerlink" title="2.3.1 请求转发的指令"></a>2.3.1 请求转发的指令</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/forwardCommand&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">forwardCommand</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用转发指令:在handler方法中，访问Thymeleaf前后缀控制范围外的页面</span><br>    <span class="hljs-comment">//&quot;forward:要转发到的资源路径&quot;,相当于使用的是请求转发跳转</span><br>    <span class="hljs-comment">//请求转发的绝对路径是:在uri的基础上省略&quot;/项目名&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/outter.html&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-重定向的指令"><a href="#2-3-2-重定向的指令" class="headerlink" title="2.3.2 重定向的指令"></a>2.3.2 重定向的指令</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/redirectCommand&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">redirectCommand</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用重定向指令:在handler方法中，访问Thymeleaf前后缀控制范围外的页面</span><br>    <span class="hljs-comment">//&quot;redirect:要转发到的资源路径&quot;,相当于使用的是请求转发跳转</span><br>    <span class="hljs-comment">//重定向的绝对路径:就是uri   &quot;/项目名/资源路径&quot;</span><br>    <span class="hljs-comment">//因为SpringMVC框架在接收到redirect指令之后，会自动给访问路径加上&quot;/项目名&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/outter.html&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-mvc-view-controller访问页面-重点"><a href="#3-mvc-view-controller访问页面-重点" class="headerlink" title="3. mvc:view-controller访问页面(重点)"></a>3. mvc:view-controller访问页面(重点)</h4><h5 id="3-1-场景描述"><a href="#3-1-场景描述" class="headerlink" title="3.1 场景描述"></a>3.1 场景描述</h5><p>在一个 handler 方法中，仅仅只是完成 @RequestMapping 映射，将请求转发到目标视图，除此之外没有任何其他代码。此时可以使用 SpringMVC 配置文件中的配置代替这样的 handler 方法。 </p><h5 id="3-2-具体操作"><a href="#3-2-具体操作" class="headerlink" title="3.2 具体操作"></a>3.2 具体操作</h5><h6 id="3-2-1-访问Thymeleaf前后缀控制范围内的页面"><a href="#3-2-1-访问Thymeleaf前后缀控制范围内的页面" class="headerlink" title="3.2.1 访问Thymeleaf前后缀控制范围内的页面"></a>3.2.1 访问Thymeleaf前后缀控制范围内的页面</h6><p>在 SpringMVC 配置文件中使用 mvc:view-controller 配置： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/index.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>此时浏览器路径”index.html”可以访问到Thymeleaf前后缀控制范围内的portal.html页面</p><h6 id="3-2-2-访问Thymeleaf前后缀控制范围外的页面"><a href="#3-2-2-访问Thymeleaf前后缀控制范围外的页面" class="headerlink" title="3.2.2 访问Thymeleaf前后缀控制范围外的页面"></a>3.2.2 访问Thymeleaf前后缀控制范围外的页面</h6><p>在 SpringMVC 配置文件中使用 mvc:view-controller 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test/redirect/command&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;redirect:/outter.html&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>此时就相当于代替了之前的重定向访问的那个handler方法</p><h5 id="3-3-遇到的问题"><a href="#3-3-遇到的问题" class="headerlink" title="3.3 遇到的问题"></a>3.3 遇到的问题</h5><p>加入 mvc:view-controller 配置后，其他正常 @RequestMapping 将失效。此时还是需要加入 mvc:annotation-driven 来解决。 </p><h4 id="4-三个配置影响访问效果探索-了解"><a href="#4-三个配置影响访问效果探索-了解" class="headerlink" title="4. 三个配置影响访问效果探索(了解)"></a>4. 三个配置影响访问效果探索(了解)</h4><p>通过前面的学习，我们发现无论是添加了<code>default-servlet-handler</code>还是<code>view-controller</code>,我们都必须添加<code>annotation-driven</code>标签。所以<code>annotation-driven</code>标签是SpringMVC必须添加的</p><p>接下来我们从源码角度分析这三个配置:</p><h5 id="4-1-相关组件：HandlerMapping"><a href="#4-1-相关组件：HandlerMapping" class="headerlink" title="4.1 相关组件：HandlerMapping"></a>4.1 相关组件：HandlerMapping</h5><p>见名知意，HandlerMapping 封装的数据包含了请求地址和 handler 方法之间的映射关系。所以请求访问是否能生效关键要看 HandlerMapping 在 IOC 容器中加载的情况。为了看到这一点，我们可以在 DispatcherServlet 中找到 doDispatch() 方法设置断点。之所以选择这个方法，是因为每一个由 SpringMVC 处理的请求都会经过这里，便于操作。 </p><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_014.png"></p><h5 id="4-2-按三种标签的配置情况进行分析"><a href="#4-2-按三种标签的配置情况进行分析" class="headerlink" title="4.2 按三种标签的配置情况进行分析"></a>4.2 按三种标签的配置情况进行分析</h5><h6 id="4-2-1-三个标签都没有配置的情况"><a href="#4-2-1-三个标签都没有配置的情况" class="headerlink" title="4.2.1 三个标签都没有配置的情况"></a>4.2.1 三个标签都没有配置的情况</h6><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_015.png"></p><p>我们看到 SpringMVC 加载了三个 HandlerMapping：</p><blockquote><p>org.springframework.web.servlet.handler.<strong>BeanNameUrlHandlerMapping</strong></p><p>org.springframework.web.servlet.mvc.method.annotation.<strong>RequestMappingHandlerMapping</strong></p><p>org.springframework.web.servlet.function.support.<strong>RouterFunctionMapping</strong></p></blockquote><p>其中 RequestMappingHandlerMapping 封装了 @RequestMapping 相关请求，有它在 @RequestMapping 相关请求就能访问到。</p><p>这里顺带一提，在较低版本的 SpringMVC 此处要加载的是：</p><blockquote><p>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</p></blockquote><p>其中 DefaultAnnotationHandlerMapping 封装了 @RequestMapping 相关请求，有它在 @RequestMapping 相关请求就能访问到。</p><h6 id="4-2-2-配置了-mvc-view-controller-或-mvc-default-servlet-handler-的情况"><a href="#4-2-2-配置了-mvc-view-controller-或-mvc-default-servlet-handler-的情况" class="headerlink" title="4.2.2  配置了 mvc:view-controller 或 mvc:default-servlet-handler 的情况"></a>4.2.2  配置了 mvc:view-controller 或 mvc:default-servlet-handler 的情况</h6><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_016.png"></p><p>我们看到 SpringMVC 加载了两个 HandlerMapping：</p><blockquote><p>org.springframework.web.servlet.handler.<strong>SimpleUrlHandlerMapping</strong></p><p>org.springframework.web.servlet.handler.<strong>BeanNameUrlHandlerMapping</strong></p></blockquote><p>此时没有了RequestMappingHandlerMapping，所以无法根据@RequestMapping的映射来调用handler方法了</p><p>较低版本的 SpringMVC 在这里的情况一样。</p><h6 id="4-2-3-三个标签全部配置了的情况"><a href="#4-2-3-三个标签全部配置了的情况" class="headerlink" title="4.2.3 三个标签全部配置了的情况"></a>4.2.3 三个标签全部配置了的情况</h6><p>配置全部 mvc:view-controller、mvc:default-servlet-handler、mvc:annotation-driven 三个标签。 </p><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_017.png"></p><p>我们看到 SpringMVC 加载了略有不同的三个 HandlerMapping：</p><blockquote><p>org.springframework.web.servlet.mvc.method.annotation.<strong>RequestMappingHandlerMapping</strong></p><p>org.springframework.web.servlet.handler.<strong>SimpleUrlHandlerMapping</strong></p><p>org.springframework.web.servlet.handler.<strong>BeanNameUrlHandlerMapping</strong></p></blockquote><p>此时RequestMappingHandlerMapping 封装了 @RequestMapping 相关请求，有它在 @RequestMapping 相关请求就能访问到。</p><p>较低版本的 SpringMVC 在这里的情况还是一样。</p><h2 id="第二章-SpringMVC使用域对象"><a href="#第二章-SpringMVC使用域对象" class="headerlink" title="第二章 SpringMVC使用域对象"></a>第二章 SpringMVC使用域对象</h2><h3 id="第一节-请求域对象"><a href="#第一节-请求域对象" class="headerlink" title="第一节 请求域对象"></a>第一节 请求域对象</h3><h4 id="1-将数据存入请求域对象"><a href="#1-将数据存入请求域对象" class="headerlink" title="1. 将数据存入请求域对象"></a>1. 将数据存入请求域对象</h4><h5 id="1-1-使用原生的Servlet的API操作"><a href="#1-1-使用原生的Servlet的API操作" class="headerlink" title="1.1 使用原生的Servlet的API操作"></a>1.1 使用原生的Servlet的API操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAttrOriginalRequest&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAttrOriginalRequest</span><span class="hljs-params">(HttpServletRequest request)</span></span>&#123;<br>    <span class="hljs-comment">//目标:将数据存储到请求域对象，然后跳转到target页面</span><br>    <span class="hljs-comment">//方式一:使用原始的request来完成</span><br>    request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;aobama&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-使用-Model-类型的形参操作"><a href="#1-2-使用-Model-类型的形参操作" class="headerlink" title="1.2 使用 Model 类型的形参操作"></a>1.2 使用 Model 类型的形参操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAttrRequestModel&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAttrRequestModel</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    <span class="hljs-comment">//目标:目标:将数据存储到请求域对象，然后跳转到target页面</span><br>    <span class="hljs-comment">//方式二:使用Model对象往请求域中存储值</span><br>    model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;aolafu&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-使用-ModelMap-类型的形参"><a href="#1-3-使用-ModelMap-类型的形参" class="headerlink" title="1.3 使用 ModelMap 类型的形参"></a>1.3 使用 ModelMap 类型的形参</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/attr/request/model/map&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAttrRequestModelMap</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    </span></span><br><span class="hljs-params"><span class="hljs-function">        // 在形参位置声明ModelMap类型变量，用于存储模型数据</span></span><br><span class="hljs-params"><span class="hljs-function">        ModelMap modelMap)</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span><br>    <span class="hljs-comment">// 存入请求域这个动作也被称为暴露到请求域</span><br>    modelMap.addAttribute(<span class="hljs-string">&quot;requestScopeMessageModelMap&quot;</span>,<span class="hljs-string">&quot;i am very happy[model map]&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-使用-Map-类型的形参"><a href="#1-4-使用-Map-类型的形参" class="headerlink" title="1.4 使用 Map 类型的形参"></a>1.4 使用 Map 类型的形参</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/attr/request/map&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAttrRequestMap</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    </span></span><br><span class="hljs-params"><span class="hljs-function">        // 在形参位置声明Map类型变量，用于存储模型数据</span></span><br><span class="hljs-params"><span class="hljs-function">        Map&lt;String, Object&gt; map)</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span><br>    <span class="hljs-comment">// 存入请求域这个动作也被称为暴露到请求域</span><br>    map.put(<span class="hljs-string">&quot;requestScopeMessageMap&quot;</span>, <span class="hljs-string">&quot;i am very happy[map]&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-5-使用-ModelAndView-对象"><a href="#1-5-使用-ModelAndView-对象" class="headerlink" title="1.5 使用 ModelAndView 对象"></a>1.5 使用 ModelAndView 对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/attr/request/mav&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">testAttrByModelAndView</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 1.创建ModelAndView对象</span><br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    <br>    <span class="hljs-comment">// 2.存入模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;requestScopeMessageMAV&quot;</span>, <span class="hljs-string">&quot;i am very happy[mav]&quot;</span>);<br>    <br>    <span class="hljs-comment">// 3.设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;target&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-模型的本质"><a href="#2-模型的本质" class="headerlink" title="2. 模型的本质"></a>2. 模型的本质</h4><h5 id="2-1-BindingAwareModelMap"><a href="#2-1-BindingAwareModelMap" class="headerlink" title="2.1 BindingAwareModelMap"></a>2.1 BindingAwareModelMap</h5><p>SpringMVC 传入的 Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的。 </p><h5 id="2-2-体系结构"><a href="#2-2-体系结构" class="headerlink" title="2.2 体系结构"></a>2.2 体系结构</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_012.png"></p><h4 id="3-框架底层将模型存入请求域的原理"><a href="#3-框架底层将模型存入请求域的原理" class="headerlink" title="3. 框架底层将模型存入请求域的原理"></a>3. 框架底层将模型存入请求域的原理</h4><h5 id="3-1-源码位置"><a href="#3-1-源码位置" class="headerlink" title="3.1 源码位置"></a>3.1 源码位置</h5><p>所在类：org.thymeleaf.context.WebEngineContext</p><p>所在方法：setVariable()</p><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_013.png"></p><h3 id="第二节-会话域对象"><a href="#第二节-会话域对象" class="headerlink" title="第二节 会话域对象"></a>第二节 会话域对象</h3><p>使用会话域最简单直接的办法就是使用原生的 HttpSession 对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/attrSession&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">attrSession</span><span class="hljs-params">(HttpSession httpSession)</span></span>&#123;<br>    <span class="hljs-comment">//目标:往会话域中存储数据</span><br>    httpSession.setAttribute(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;召唤师峡谷&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三节-应用域"><a href="#第三节-应用域" class="headerlink" title="第三节 应用域"></a>第三节 应用域</h3><p>应用域同样是使用IOC注入的方式来操作： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ServletContext servletContext;<br><span class="hljs-meta">@RequestMapping(&quot;/attr/application&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">attrApplication</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    servletContext.setAttribute(<span class="hljs-string">&quot;appScopeMsg&quot;</span>, <span class="hljs-string">&quot;i am hungry...&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章 综合案例"></a>第三章 综合案例</h2><h3 id="第一节-案例准备工作"><a href="#第一节-案例准备工作" class="headerlink" title="第一节 案例准备工作"></a>第一节 案例准备工作</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入LomBok的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-数据建模"><a href="#2-数据建模" class="headerlink" title="2 数据建模"></a>2 数据建模</h4><h5 id="2-1-物理建模"><a href="#2-1-物理建模" class="headerlink" title="2.1 物理建模"></a>2.1 物理建模</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_movie(<br>movie_id INT PRIMARY KEY AUTO_INCREMENT,<br>movie_name VARCHAR(50),<br>movie_price DOUBLE<br>);<br>INSERT INTO t_movie(movie_name,movie_price) <br>VALUES (&quot;肖申克救赎&quot;,10.0),<br>(&quot;泰坦尼克号&quot;,20.0),<br>(&quot;审死官&quot;,30.0),<br>(&quot;大话西游之大圣娶亲&quot;,40.0),<br>(&quot;大话西游之仙履奇缘&quot;,50.0),<br>(&quot;功夫&quot;,60.0)<br></code></pre></td></tr></table></figure><h5 id="2-2-逻辑建模"><a href="#2-2-逻辑建模" class="headerlink" title="2.2 逻辑建模"></a>2.2 逻辑建模</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Movie</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer movieId;<br>    <span class="hljs-keyword">private</span> String movieName;<br>    <span class="hljs-keyword">private</span> Double moviePrice;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-创建Dao"><a href="#3-创建Dao" class="headerlink" title="3. 创建Dao"></a>3. 创建Dao</h4><h5 id="3-1-接口"><a href="#3-1-接口" class="headerlink" title="3.1 接口"></a>3.1 接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MovieDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movieId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加Movie</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movie</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改Movie</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movie</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movieId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-实现类"><a href="#3-2-实现类" class="headerlink" title="3.2 实现类"></a>3.2 实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.MovieDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao.impl</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovieDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MovieDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-创建Service"><a href="#4-创建Service" class="headerlink" title="4 创建Service"></a>4 创建Service</h4><h5 id="4-1-接口"><a href="#4-1-接口" class="headerlink" title="4.1 接口"></a>4.1 接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MovieService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movieId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加Movie</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movie</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改Movie</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movie</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> movieId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-实现类"><a href="#4-2-实现类" class="headerlink" title="4.2 实现类"></a>4.2 实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.MovieDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovieDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MovieDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二节-环境搭建"><a href="#第二节-环境搭建" class="headerlink" title="第二节 环境搭建"></a>第二节 环境搭建</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1 配置文件"></a>1 配置文件</h4><h5 id="1-1-web-xml"><a href="#1-1-web-xml" class="headerlink" title="1.1 web.xml"></a>1.1 web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--CharacterEncodingFilter--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置过滤器解决 POST 请求的字符乱码问题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- encoding参数指定要使用的字符集名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 请求强制编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 响应强制编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-logback-xml"><a href="#1-2-logback-xml" class="headerlink" title="1.2 logback.xml"></a>1.2 logback.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-3-SpringMVC-配置文件springmvc-xml"><a href="#1-3-SpringMVC-配置文件springmvc-xml" class="headerlink" title="1.3 SpringMVC 配置文件springmvc.xml"></a>1.3 SpringMVC 配置文件springmvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1.包扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--2. Thymeleaf解析器的配置--&gt;</span><br>    <span class="hljs-comment">&lt;!-- Thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br><br>                        <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br><br>                        <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br><br>                        <span class="hljs-comment">&lt;!--模板类型--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!--模板的字符编码--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3. 加载MVC注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--4. 静态资源处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第三节-持久层代码"><a href="#第三节-持久层代码" class="headerlink" title="第三节 持久层代码"></a>第三节 持久层代码</h3><h4 id="1-数据源配置文件-jdbc-properties"><a href="#1-数据源配置文件-jdbc-properties" class="headerlink" title="1. 数据源配置文件:jdbc.properties"></a>1. 数据源配置文件:jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springmvc-test</span><br></code></pre></td></tr></table></figure><h4 id="2-配置数据源-在springmvc-xml中"><a href="#2-配置数据源-在springmvc-xml中" class="headerlink" title="2. 配置数据源:在springmvc.xml中"></a>2. 配置数据源:在springmvc.xml中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--5. 对数据源进行IOC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-配置JdbcTemplate-在springmvc-xml中"><a href="#3-配置JdbcTemplate-在springmvc-xml中" class="headerlink" title="3. 配置JdbcTemplate:在springmvc.xml中"></a>3. 配置JdbcTemplate:在springmvc.xml中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--6. 对JdbcTemplate进行IOC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-配置持久层的实现类"><a href="#4-配置持久层的实现类" class="headerlink" title="4. 配置持久层的实现类"></a>4. 配置持久层的实现类</h4><p>对持久层的实现类进行IOC配置，以及注入JdbcTemplate对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.MovieDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao.impl</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovieDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MovieDao</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-编写测试持久层的各个方法"><a href="#5-编写测试持久层的各个方法" class="headerlink" title="5. 编写测试持久层的各个方法"></a>5. 编写测试持久层的各个方法</h4><h5 id="5-1-持久层的各个方法实现"><a href="#5-1-持久层的各个方法实现" class="headerlink" title="5.1 持久层的各个方法实现"></a>5.1 持久层的各个方法实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.MovieDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao.impl</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovieDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MovieDao</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select movie_id movieId, movie_name movieName,movie_price moviePrice from t_movie&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.query(sql,<span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Movie.class));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select movie_id movieId, movie_name movieName,movie_price moviePrice from t_movie where movie_id=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql,<span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Movie.class),movieId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into t_movie(movie_name,movie_price) values (?,?)&quot;</span>;<br>        jdbcTemplate.update(sql,movie.getMovieName(),movie.getMoviePrice());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update t_movie set movie_name=?,movie_price=? where movie_id=?&quot;</span>;<br>        jdbcTemplate.update(sql,movie.getMovieName(),movie.getMoviePrice(),movie.getMovieId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;delete from t_movie where movie_id=?&quot;</span>;<br>        jdbcTemplate.update(sql,movieId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-2-持久层方法测试"><a href="#5-2-持久层方法测试" class="headerlink" title="5.2 持久层方法测试"></a>5.2 持久层方法测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.MovieDao;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:springmvc.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDao</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MovieDao movieDao;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetAll</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(movieDao.getAll());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-业务层的代码"><a href="#第四节-业务层的代码" class="headerlink" title="第四节 业务层的代码"></a>第四节 业务层的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.MovieDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><span class="hljs-keyword">import</span> com.atguigu.service.MovieService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service.impl</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovieServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MovieService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MovieDao movieDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Movie&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> movieDao.getAll();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Movie <span class="hljs-title">getMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> movieDao.getMovieById(movieId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br>        movieDao.saveMovie(movie);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br>        movieDao.updateMovie(movie);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeMovieById</span><span class="hljs-params">(String movieId)</span> </span>&#123;<br>        movieDao.removeMovieById(movieId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五节-实现功能"><a href="#第五节-实现功能" class="headerlink" title="第五节 实现功能"></a>第五节 实现功能</h3><h4 id="1-显示首页"><a href="#1-显示首页" class="headerlink" title="1. 显示首页"></a>1. 显示首页</h4><h5 id="1-1-案例流程"><a href="#1-1-案例流程" class="headerlink" title="1.1 案例流程"></a>1.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_018.png"></p><h5 id="1-2-具体实现"><a href="#1-2-具体实现" class="headerlink" title="1.2 具体实现"></a>1.2 具体实现</h5><h6 id="1-2-1-配置-view-controller"><a href="#1-2-1-配置-view-controller" class="headerlink" title="1.2.1 配置 view-controller"></a>1.2.1 配置 view-controller</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--7. 使用view-controller访问首页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/index.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;portal&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-2-2-前端页面"><a href="#1-2-2-前端页面" class="headerlink" title="1.2.2 前端页面"></a>1.2.2 前端页面</h6><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_019.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie/showList&#125;&quot;</span>&gt;</span>显示电影列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-在首页点击超链接显示全部数据"><a href="#2-在首页点击超链接显示全部数据" class="headerlink" title="2. 在首页点击超链接显示全部数据"></a>2. 在首页点击超链接显示全部数据</h4><h5 id="2-1-案例流程"><a href="#2-1-案例流程" class="headerlink" title="2.1 案例流程"></a>2.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_020.png"></p><h5 id="2-2-具体实现"><a href="#2-2-具体实现" class="headerlink" title="2.2 具体实现"></a>2.2 具体实现</h5><h6 id="2-2-1-处理器类和处理器方法"><a href="#2-2-1-处理器类和处理器方法" class="headerlink" title="2.2.1 处理器类和处理器方法"></a>2.2.1 处理器类和处理器方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.handler;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Movie;<br><span class="hljs-keyword">import</span> com.atguigu.service.MovieService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.handler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-09-06  10:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/movie&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovieHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MovieService movieService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/showList&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showList</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//1. 调用业务层的方法查询所有的movie</span><br>        List&lt;Movie&gt; movieList = movieService.getAll();<br>        <span class="hljs-comment">//2. 将查询到的所有movie存储到请求域</span><br>        model.addAttribute(<span class="hljs-string">&quot;movieList&quot;</span>,movieList);<br>        <span class="hljs-comment">//3. 解析Thymeleaf模板显示所有movie</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="2-2-2-前端页面"><a href="#2-2-2-前端页面" class="headerlink" title="2.2.2 前端页面"></a>2.2.2 前端页面</h6><ol><li>样式部分</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto <span class="hljs-number">0px</span> auto;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>数据展示部分</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电影ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电影名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>电影票价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#lists.isEmpty(movieList)&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>抱歉！没有查询到数据！<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;#lists.isEmpty(movieList)&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;movie : $&#123;movieList&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;movie.movieId&#125;&quot;</span>&gt;</span>电影ID<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;movie.movieName&#125;&quot;</span>&gt;</span>电影名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;movie.moviePrice&#125;&quot;</span>&gt;</span>电影票价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-删除一条数据"><a href="#3-删除一条数据" class="headerlink" title="3. 删除一条数据"></a>3. 删除一条数据</h4><h5 id="3-1-案例流程"><a href="#3-1-案例流程" class="headerlink" title="3.1 案例流程"></a>3.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_021.png"></p><h5 id="3-2-具体实现"><a href="#3-2-具体实现" class="headerlink" title="3.2 具体实现"></a>3.2 具体实现</h5><h6 id="3-2-1-修改数据展示时候的删除数据的超链接"><a href="#3-2-1-修改数据展示时候的删除数据的超链接" class="headerlink" title="3.2.1 修改数据展示时候的删除数据的超链接"></a>3.2.1 修改数据展示时候的删除数据的超链接</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/movie/removeMovie(movieId=$&#123;movie.movieId&#125;)&#125;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-2-2-handler-方法"><a href="#3-2-2-handler-方法" class="headerlink" title="3.2.2 handler 方法"></a>3.2.2 handler 方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/removeMovie&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">removeMovie</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;movieId&quot;)</span> String movieId)</span></span>&#123;<br>    <span class="hljs-comment">//调用业务层的方法根据id删除movie</span><br>    movieService.removeMovieById(movieId);<br>    <span class="hljs-comment">//重新查询所有</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/movie/showList&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-跳转到添加页面"><a href="#4-跳转到添加页面" class="headerlink" title="4. 跳转到添加页面"></a>4. 跳转到添加页面</h4><h5 id="4-1-案例流程"><a href="#4-1-案例流程" class="headerlink" title="4.1  案例流程"></a>4.1  案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_022.png"></p><h5 id="4-2-具体实现"><a href="#4-2-具体实现" class="headerlink" title="4.2 具体实现"></a>4.2 具体实现</h5><h6 id="4-2-1-修改页面上添加数据的超链接"><a href="#4-2-1-修改页面上添加数据的超链接" class="headerlink" title="4.2.1 修改页面上添加数据的超链接"></a>4.2.1 修改页面上添加数据的超链接</h6><p>在<code>tfoot</code>标签的td中加入超链接标签 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/add.html&#125;&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="4-2-2-配置view-controller"><a href="#4-2-2-配置view-controller" class="headerlink" title="4.2.2 配置view-controller"></a>4.2.2 配置view-controller</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--8. 使用view-controller访问添加页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/add.html&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;add&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="4-2-3-movie-add-html页面的表单"><a href="#4-2-3-movie-add-html页面的表单" class="headerlink" title="4.2.3 movie-add.html页面的表单"></a>4.2.3 movie-add.html页面的表单</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/movie/saveMovie&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>    电影名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    电影票价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;moviePrice&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-执行添加数据"><a href="#5-执行添加数据" class="headerlink" title="5. 执行添加数据"></a>5. 执行添加数据</h4><h5 id="5-1-案例流程"><a href="#5-1-案例流程" class="headerlink" title="5.1 案例流程"></a>5.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_023.png"></p><h5 id="5-2-具体实现"><a href="#5-2-具体实现" class="headerlink" title="5.2 具体实现"></a>5.2 具体实现</h5><h6 id="5-2-1-handler方法"><a href="#5-2-1-handler方法" class="headerlink" title="5.2.1 handler方法"></a>5.2.1 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/saveMovie&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addMovie</span><span class="hljs-params">(Movie movie)</span></span>&#123;<br>    <span class="hljs-comment">//调用业务层的方法添加Movie</span><br>    movieService.saveMovie(movie);<br>    <span class="hljs-comment">//重新查询所有</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/movie/showList&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-跳转到更新表单回显数据"><a href="#6-跳转到更新表单回显数据" class="headerlink" title="6. 跳转到更新表单回显数据"></a>6. 跳转到更新表单回显数据</h4><h5 id="6-1-案例流程"><a href="#6-1-案例流程" class="headerlink" title="6.1 案例流程"></a>6.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_021.png"></p><h5 id="6-2-具体实现"><a href="#6-2-具体实现" class="headerlink" title="6.2 具体实现"></a>6.2 具体实现</h5><h6 id="6-2-1-修改页面更新数据的超链接"><a href="#6-2-1-修改页面更新数据的超链接" class="headerlink" title="6.2.1 修改页面更新数据的超链接"></a>6.2.1 修改页面更新数据的超链接</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/edit/movie/page(movieId=$&#123;movie.movieId&#125;)&#125;&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="6-2-2-handler方法"><a href="#6-2-2-handler方法" class="headerlink" title="6.2.2 handler方法"></a>6.2.2 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/edit/movie/page&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editMoviePage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    </span></span><br><span class="hljs-params"><span class="hljs-function">        // 获取请求参数</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-meta">@RequestParam(&quot;movieId&quot;)</span> String movieId,</span></span><br><span class="hljs-params"><span class="hljs-function">        </span></span><br><span class="hljs-params"><span class="hljs-function">        Model model</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 1.根据id查询movie对象</span><br>    Movie movie = movieService.getMovieById(movieId);<br>        <br>    <span class="hljs-comment">// 2.将movie对象存入模型</span><br>    model.addAttribute(<span class="hljs-string">&quot;movie&quot;</span>, movie);<br>    <br>    <span class="hljs-comment">// 3.返回逻辑视图</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;movie-edit&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-2-3-准备表单页面并回显"><a href="#6-2-3-准备表单页面并回显" class="headerlink" title="6.2.3 准备表单页面并回显"></a>6.2.3 准备表单页面并回显</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/update/movie&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieId&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;movie.movieId&#125;&quot;</span> /&gt;</span><br>    <br>    电影名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;movie.movieName&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    电影票价格：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;moviePrice&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;movie.moviePrice&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-执行更新"><a href="#7-执行更新" class="headerlink" title="7. 执行更新"></a>7. 执行更新</h4><h5 id="7-1-案例流程"><a href="#7-1-案例流程" class="headerlink" title="7.1 案例流程"></a>7.1 案例流程</h5><p><img src="http://www.slx.blue/2021/12/10/springMVC-01/tu_025.png"></p><h5 id="7-2-具体实现"><a href="#7-2-具体实现" class="headerlink" title="7.2 具体实现"></a>7.2 具体实现</h5><h6 id="7-2-1-handler方法"><a href="#7-2-1-handler方法" class="headerlink" title="7.2.1 handler方法"></a>7.2.1 handler方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/update/movie&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateMovie</span><span class="hljs-params">(Movie movie)</span> </span>&#123;<br>    <br>    movieService.updateMovie(movie);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/show/list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第六节-案例环境总结"><a href="#第六节-案例环境总结" class="headerlink" title="第六节 案例环境总结"></a>第六节 案例环境总结</h3><h4 id="1-Spring和SpringMVC的环境"><a href="#1-Spring和SpringMVC的环境" class="headerlink" title="1. Spring和SpringMVC的环境"></a>1. Spring和SpringMVC的环境</h4><ol><li>依赖</li><li>web.xml中的配置:servlet、filter</li><li>springmvc配置文件:<ol><li>包扫描:为了解析组件注解(IOC和依赖注入的主键)</li><li>配置Thymeleaf的模板解析器:为了解析Thymeleaf模板</li><li>加载MVC注解驱动:为了能够找到Handler方法处理请求</li><li>处理静态资源</li><li><code>view-controller</code>:访问页面</li></ol></li><li>注解: <ol><li>IOC和依赖注入的注解: Controller、Service、Repository、AutoWired</li><li>SpringMVC的注解: RequestMapping(请求映射)、RequestParam(获取请求参数)</li></ol></li><li>日志</li></ol><h4 id="2-持久层环境"><a href="#2-持久层环境" class="headerlink" title="2. 持久层环境"></a>2. 持久层环境</h4><ol><li>依赖</li><li>springmvc配置文件中配置持久层:<ol><li>数据源</li><li>JdbcTemplate</li></ol></li><li>持久层实现类的方法中执行各个SQL语句</li></ol><h4 id="3-测试环境"><a href="#3-测试环境" class="headerlink" title="3. 测试环境"></a>3. 测试环境</h4><ol><li>依赖</li><li>Spring整合Junit</li><li>测试:需要测试业务层和持久层的代码</li></ol><h3 id="第七节-功能总结"><a href="#第七节-功能总结" class="headerlink" title="第七节 功能总结"></a>第七节 功能总结</h3><h4 id="1-单纯跳转页面的功能"><a href="#1-单纯跳转页面的功能" class="headerlink" title="1. 单纯跳转页面的功能"></a>1. 单纯跳转页面的功能</h4><p>例如:访问首页、访问add.html添加页面，使用<code>view-controller</code>标签实现</p><h4 id="2-查询功能"><a href="#2-查询功能" class="headerlink" title="2. 查询功能"></a>2. 查询功能</h4><p>例如:查询电影列表、更新前的数据回显。它们的具体步骤:</p><ol><li>需不需要带参数:就要看有没有查询条件</li><li>获取参数:</li><li>调用业务层的方法进行查询，获取到查询的数据</li><li>将查询到的数据存储到请求域</li><li>返回逻辑视图</li><li>在Thymeleaf页面获取请求域的数据，并展示</li></ol><h4 id="3-增删改功能"><a href="#3-增删改功能" class="headerlink" title="3. 增删改功能"></a>3. 增删改功能</h4><p>例如:添加电影、删除电影、更新电影。它们的具体步骤:</p><ol><li>肯定需要带参数:Thymeleaf的路径携带参数、以及表单携带参数</li><li>参数乱码:配置过滤器解决</li><li>获取参数:单个参数、POJO封装参数</li><li>调用业务层的方法进行增删改</li><li>重新查询所有: 使用<code>redirect</code>指令重定向访问<code>查询所有电影</code>的功能</li></ol>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-中介者模式</title>
      <link href="/2021/12/09/java-mediator/"/>
      <url>/2021/12/09/java-mediator/</url>
      
        <content type="html"><![CDATA[<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>传统案例</p><p>智能家居项目，智能家庭包括各种设备，闹钟，咖啡机，电视机，窗帘等</p><p>主人要看电视时，各个设备可以完成看电视的准备工作，比如流程为：闹铃响起，咖啡机开始做咖啡，窗帘自动落下，电视开始播放。</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>中介者模式(Mediator Pattern)，    用一个中介者对象来封装一系列的交互对象，中介者使各个对象不需要显式的相互作用，从而使其耦合松散，而且可以独立的改变他们之间的交互</li><li>中介者模式属于行为型模式，使代码易于维护</li><li>比如MVC模式，C(Controller控制器)是M(Model模型）和（View视图）的中介者，在前后端交互时气到了中间人的作用。</li></ol><p>原理类图</p><p><img src="http://www.slx.blue/2021/12/09/java-mediator/mediator01.png" alt="mediator"></p><p>类图说明</p><ol><li>Mediator就是抽象中介者，定义了同事对象到中介者对象的接口</li><li>Colleague是抽象同事类</li><li><code>ConcreteMediator</code> 具体的中介者对象，它需要知道所有的具体的同事类，即以一个集合来管理(<code>HashMap</code>)，并接受某个同事对象消息，完成相应的任务</li><li><code>ConcreteColleague</code> 具体的同事类，会有很多，每个同事只知道自己的行为，而不了解其他的行为(方法)，但是他们都依赖中介者对象。</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>实现类图：</p><p><img src="http://www.slx.blue/2021/12/09/java-mediator/mediator02.png" alt="mediator02"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//中介者抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mediator</span> </span>&#123;<br><span class="hljs-comment">//将给中介者对象，加入到集合中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Register</span><span class="hljs-params">(String colleagueName, Colleague colleague)</span></span>;<br><br><span class="hljs-comment">//接收消息, 具体的同事对象发出</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange, String colleagueName)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//同事抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Colleague</span> </span>&#123;<br><span class="hljs-keyword">private</span> Mediator mediator;<br><span class="hljs-keyword">public</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Colleague</span><span class="hljs-params">(Mediator mediator, String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.mediator = mediator;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mediator <span class="hljs-title">GetMediator</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.mediator;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//具体的中介者类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mediator</span> </span>&#123;<br><span class="hljs-comment">//集合，放入所有的同事对象</span><br><span class="hljs-keyword">private</span> HashMap&lt;String, Colleague&gt; colleagueMap;<br><span class="hljs-keyword">private</span> HashMap&lt;String, String&gt; interMap;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteMediator</span><span class="hljs-params">()</span> </span>&#123;<br>colleagueMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Colleague&gt;();<br>interMap = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Register</span><span class="hljs-params">(String colleagueName, Colleague colleague)</span> </span>&#123;<br>colleagueMap.put(colleagueName, colleague);<br><br><span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> Alarm) &#123;<br>interMap.put(<span class="hljs-string">&quot;Alarm&quot;</span>, colleagueName);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> CoffeeMachine) &#123;<br>interMap.put(<span class="hljs-string">&quot;CoffeeMachine&quot;</span>, colleagueName);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> TV) &#123;<br>interMap.put(<span class="hljs-string">&quot;TV&quot;</span>, colleagueName);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> Curtains) &#123;<br>interMap.put(<span class="hljs-string">&quot;Curtains&quot;</span>, colleagueName);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//具体中介者的核心方法</span><br><span class="hljs-comment">//1. 根据得到消息，完成对应任务</span><br><span class="hljs-comment">//2. 中介者在这个方法，协调各个具体的同事对象，完成任务</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange, String colleagueName)</span> </span>&#123;<br><br><span class="hljs-comment">//处理闹钟发出的消息</span><br><span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> Alarm) &#123;<br><span class="hljs-keyword">if</span> (stateChange == <span class="hljs-number">0</span>) &#123;<br>((CoffeeMachine) (colleagueMap.get(interMap<br>.get(<span class="hljs-string">&quot;CoffeeMachine&quot;</span>)))).StartCoffee();<br>((TV) (colleagueMap.get(interMap.get(<span class="hljs-string">&quot;TV&quot;</span>)))).StartTv();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stateChange == <span class="hljs-number">1</span>) &#123;<br>((TV) (colleagueMap.get(interMap.get(<span class="hljs-string">&quot;TV&quot;</span>)))).StopTv();<br>&#125;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> CoffeeMachine) &#123;<br>((Curtains) (colleagueMap.get(interMap.get(<span class="hljs-string">&quot;Curtains&quot;</span>))))<br>.UpCurtains();<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> TV) &#123;<span class="hljs-comment">//如果TV发现消息</span><br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(colleagueName) <span class="hljs-keyword">instanceof</span> Curtains) &#123;<br><span class="hljs-comment">//如果是以窗帘发出的消息，这里处理...</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//同事类</span><br><br><span class="hljs-comment">//具体的同事类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span> </span>&#123;<br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Alarm</span><span class="hljs-params">(Mediator mediator, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(mediator, name);<br><span class="hljs-comment">//在创建Alarm 同事对象时，将自己放入到ConcreteMediator 对象中[集合]</span><br>mediator.Register(name, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendAlarm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange)</span> </span>&#123;<br>SendMessage(stateChange);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange)</span> </span>&#123;<br><span class="hljs-comment">//调用的中介者对象的getMessage</span><br><span class="hljs-keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-keyword">this</span>.name);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//咖啡机</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoffeeMachine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CoffeeMachine</span><span class="hljs-params">(Mediator mediator, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(mediator, name);<br>mediator.Register(name, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-keyword">this</span>.name);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartCoffee</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;It&#x27;s time to startcoffee!&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FinishCoffee</span><span class="hljs-params">()</span> </span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;After 5 minutes!&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Coffee is ok!&quot;</span>);<br>SendMessage(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//窗帘</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Curtains</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Curtains</span><span class="hljs-params">(Mediator mediator, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(mediator, name);<br>mediator.Register(name, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-keyword">this</span>.name);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpCurtains</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;I am holding Up Curtains!&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//TV</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TV</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TV</span><span class="hljs-params">(Mediator mediator, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(mediator, name);<br>mediator.Register(name, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stateChange)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="hljs-keyword">this</span>.name);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartTv</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;It&#x27;s time to StartTv!&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StopTv</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;StopTv!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Client</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建一个中介者对象</span><br>Mediator mediator = <span class="hljs-keyword">new</span> ConcreteMediator();<br><br><span class="hljs-comment">//创建Alarm 并且加入到  ConcreteMediator 对象的HashMap</span><br>Alarm alarm = <span class="hljs-keyword">new</span> Alarm(mediator, <span class="hljs-string">&quot;alarm&quot;</span>);<br><br><span class="hljs-comment">//创建了CoffeeMachine 对象，并  且加入到  ConcreteMediator 对象的HashMap</span><br>CoffeeMachine coffeeMachine = <span class="hljs-keyword">new</span> CoffeeMachine(mediator, <span class="hljs-string">&quot;coffeeMachine&quot;</span>);<br><br><span class="hljs-comment">//创建 Curtains , 并  且加入到  ConcreteMediator 对象的HashMap</span><br>Curtains curtains = <span class="hljs-keyword">new</span> Curtains(mediator, <span class="hljs-string">&quot;curtains&quot;</span>);<br>TV tV = <span class="hljs-keyword">new</span> TV(mediator, <span class="hljs-string">&quot;TV&quot;</span>);<br><br><span class="hljs-comment">//让闹钟发出消息</span><br>alarm.SendAlarm(<span class="hljs-number">0</span>);<br>coffeeMachine.FinishCoffee();<br>alarm.SendAlarm(<span class="hljs-number">1</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p><code>MVC</code>模式中 View 和 Controller 的关系就有点像 中介者模式 </p><p>View想要访问另一个View 就通过Controller调用各种Model ，条件判断 ，最终返回另一个View</p></blockquote><h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ol><li>多个类相互耦合，会形成网状结构，使用终结者模式将网状结构分离为星形结构，进行了解耦</li><li>减少了类间依赖，降低了耦合，符合了迪米特法则</li><li> 中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响</li><li>如果设计不当，中介者对象本身变得过于复杂，这点在实际使用的时候要注意，代码要谨慎写。</li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-构建者模式</title>
      <link href="/2021/12/08/java-builder/"/>
      <url>/2021/12/08/java-builder/</url>
      
        <content type="html"><![CDATA[<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ol><li>需求：需要建房子 这一过程为打桩 砌墙 封顶</li><li>房子有各种各种的 比如普通房 高楼 别墅 各种房子的过程虽然一样 但是要求不要相同</li><li>编写程序完成需求</li></ol><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;  <span class="hljs-comment">//抽象房子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 打地基</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//砌墙</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//封顶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//造房子</span><br>        buildBasic();<br>        buildWalls();<br>        roofed();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//普通房子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子打地基&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子砌墙&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        commonHouse.build();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/JavaDesignMode/builder/TraditionalBuilder.jpg" alt="TraditionalBuilder"></p><ol><li><p>有点是比较好理解，简单易操作</p></li><li><p>设计的程序结构过于简单，没有设计缓存层对象，程序的扩展和维护不好,也就是说 这种设计方案把产品（房子）和创建产品的过程（建房子build方法）封装在一起 ，耦合性增强了</p></li><li><p>解决方案：将<strong>产品</strong>和<strong>产品建造过程</strong>解耦 =&gt; 建造者模式</p></li></ol><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>建造者模式(Builder Pattern)又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别） 使这个抽象过程的不同方法可以构造出不同表现(属性)的对象。</li><li>建造者模式是一步一步创建一个复杂的对象 ，他允许用户指定复杂的类型就可以构建他们，用户不需要知道具体构建细节。</li></ol><h4 id="建造者模式的四个角色"><a href="#建造者模式的四个角色" class="headerlink" title="建造者模式的四个角色"></a>建造者模式的四个角色</h4><ol><li>Product(产品角色) ：一个具体的产品对象</li><li>Builder(抽象建造者)：创建一个Product对象的各个部件的接口/抽象类</li><li><code>ConcreteBuilder</code>(具体建造者)实现接口，构建和装配各个部件</li><li>Director(指挥者)：构建一个Builder接口的对象，它主要是用于创建一个复杂的对象。主要有两个作用，一是：隔离客户与对象产生的过程，二是：复杂控制产品对象的生产过程</li></ol><p>产品：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span> </span>&#123;<span class="hljs-comment">//对应产品</span><br>    <span class="hljs-keyword">private</span> String base;<br>    <span class="hljs-keyword">private</span> String wall;<br>    <span class="hljs-keyword">private</span> String roofed;<br><span class="hljs-comment">//对应getset方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>抽象的建造者Builder:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> House house = <span class="hljs-keyword">new</span> House(); <span class="hljs-comment">//组合一个产品</span><br>    <span class="hljs-comment">//将建造的流程写好,抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//建造房子 建好后将房子返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">BuildHouse</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> house;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指挥者Director</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//指挥者 这里去指定制作流程 返回房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span> </span>&#123;<br>    HouseBuilder houseBuilder = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//1.构造器传入  依赖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//2.通过set方法传入 聚合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//如何处理建房流程，交给指挥者</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">constructorHouse</span><span class="hljs-params">()</span></span>&#123;<br>        houseBuilder.buildBasic();<br>        houseBuilder.buildWalls();<br>        houseBuilder.roofed();<br>        <span class="hljs-keyword">return</span> houseBuilder.BuildHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个产品类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//普通房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子打地基五米&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子砌墙10cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//高楼</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HighBuilding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼打地基50&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼砌墙20cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼透明屋顶&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//盖普通房子</span><br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        <span class="hljs-comment">//准备创建房子的指挥者</span><br>        HouseDirector houseDirector = <span class="hljs-keyword">new</span> HouseDirector(commonHouse);<br>        <span class="hljs-comment">//完成盖房子，返回产品（房子）</span><br>        House house = houseDirector.constructorHouse();<br><br>        <span class="hljs-comment">//盖高楼</span><br>        HighBuilding highBuilding = <span class="hljs-keyword">new</span> HighBuilding();<br>        houseDirector.setHouseBuilder(highBuilding);<br>        House house1 = houseDirector.constructorHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/JavaDesignMode/builder/improveBuilder.jpg" alt="improveBuilder"></p><p><code>JDK</code>中用到的建造者模式 <code>java.lang.StringBuilder</code></p><ul><li><code>Appendable</code>接口定义了多个append方法（抽象方法） ， 即<code>Appendable</code>为建造者，定义了抽象方法</li><li><code>AbstractStringBuilder</code>已经是建造者，只是不能实例化</li><li><code>StringBuilder</code>即充当了指挥者角色，同时同时充当了具体的建造者。建造方法的实现是由<code>AbstractStringBuilder</code>完成，而<code>StringBuilder</code>继承了<code>AbstractStringBuilder</code></li></ul><p><strong>建造者模式的注意事项和细节</strong></p><ol><li><p>客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p></li><li><p>建造者模式所创建的产品一般具有较多相同的共同点，其组成部分相似，如果产品之间的差异性很大，则不是和使用建造者模式，因此其使用范围收到一定的限制。</p></li><li><p>如果产品内部变化复杂，可能会导致需要定义很多具体建造者来实现这种变化，导致系统变得庞大，因此要考虑是否适合选择建造者模式。</p></li><li><p>每一个具体的建造者都相对独立，而与其他的具体建造者无关，因此可以很方便的替换具体建造者或者增加新的具体建造者，用户使用不同的建造者即可得到不同的产品对象。</p></li><li><p>可以更加精细的控制产品的建造过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建流程。</p></li><li><p>增加新的具体创建者无需修改原油类库的代码，指挥者针对抽象建造者类变成，系统扩展方便，符合开闭原则。</p><blockquote><p><strong>抽象工厂模式和建造者模式</strong></p></blockquote><p>抽象工厂模式实现对产品家族的创建，一个产品家族是一系列产品，具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产。而建造者模式则是按照指定的蓝图构建产品，它的主要目的是通过组装零配件而生产一个新的产品。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-原型模式</title>
      <link href="/2021/12/08/java-prototype/"/>
      <url>/2021/12/08/java-prototype/</url>
      
        <content type="html"><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>现有一只羊，姓名为tom，年龄为1：颜色为白色，请编写程序创建和tom羊属性完全相同的10只羊</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传统方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>     Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白色&quot;</span>);<br>     <span class="hljs-comment">//克隆十次...</span><br>     <span class="hljs-keyword">new</span> Sheep(sheep.getName(),sheep.getAge(),sheep.getColor());<br> &#125;<br></code></pre></td></tr></table></figure><p>传统方式的优缺点</p><ol><li>有点是比较好理解，简单易操作</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂，效率较低</li><li>总是需要重新初始化对象，而不是动态的获得对象运行时的状态，不够灵活</li></ol><p>思路：<code>java</code>中Object类是所有类的父类，Object提供了一个clone方法，可以将一个<code>java</code>对象复制一份，但是需要实现clone的<code>java</code>类需要实现一个接口<code>Clonealbe</code>，该接口表示该类能够复制且具有复制的能力=&gt;原型模式</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>原型模式(Prototype模式)是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</li><li>原型模式是一种创建型设计模式，允许一个对象在创建另外一个可定制的对象，无需知道如何创建的细节</li><li>工作的原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝他们来实施创建，即对象.clone() </li><li>形象理解：猴子拔出猴毛变成其他猴子</li></ol><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>     <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br><span class="hljs-comment">//克隆该实例 使用默认的clone方法来完成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">null</span>;<br>        Sheep clone = (Sheep) <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;包塞&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//克隆十次</span><br>            Sheep clone1 = (Sheep) sheep.clone();<br>            Sheep clone2 = (Sheep) sheep.clone();<br>            <span class="hljs-comment">//....</span><br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>原型模式在Spring框架中源码分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testImport</span><span class="hljs-params">()</span></span>&#123;<br> Object bean1 = applicationContext.getBean(xxx);     <br>    Object bean2 = applicationContext.getBean(xxx);  <br>    <span class="hljs-comment">//如果是scope = prototype 多例 就用到了原型模式</span><br>    <span class="hljs-comment">//getbean每次都是通过clone生成的对象 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>原型模式完成对象的创建，如果被克隆的对象中有对象属性，那么克隆的时候并不会被克隆</p><h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><p>浅拷贝：</p><ol><li>对于数据类型是基本类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性复制一份给新的对象</li><li>对于数据类型是应用数据类型的成员变量，比如成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是只将该成员变量的引用值(内存地址)复制一份给新的对象。实际上两个对象都指向同一个实例，所以这种情况下 一个对象中修改该成员变量会影响到另一个对象的该成员变量值</li><li>比如默认开启的对象克隆就是浅拷贝</li><li><code> Sheep clone2 = (Sheep) sheep.clone();</code></li></ol><p>深拷贝：</p><ol><li>复制对象的<strong>所有</strong>基本数据类型的成员变量值 </li><li>为所有应用数据类型的成员变量<strong>申请存储空间</strong>，并复制每个应用数据类型成员变量所引用的对象，直到该对象可达的所有对象，<strong>也就是说，对象进行深拷贝要对整个对象(包括引用对象)进行拷贝</strong></li><li>深拷贝实现方式1：<strong>重写clone</strong>方法来实现深拷贝</li><li>深拷贝实现方式2：通过<strong>序列化</strong>实现深拷贝  </li></ol><h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//克隆引用对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String cloneName;<br>    <span class="hljs-keyword">private</span> String cloneClass;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepCloneTarget</span><span class="hljs-params">(String cloneName, String cloneClass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cloneName = cloneName;<br>        <span class="hljs-keyword">this</span>.cloneClass = cloneClass;<br>    &#125;<br><br>    <span class="hljs-comment">//因为该类的属性都是string 所以直接用默认clone方式即可</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要克隆的对象 实现了两种克隆方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepProtoType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//String 属性</span><br>    <span class="hljs-keyword">public</span> DeepCloneTarget deepCloneTarget;<span class="hljs-comment">//引用类型 //属性是对象 默认克隆会浅拷贝</span><br>    <span class="hljs-comment">//深拷贝-1 使用重写clone方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Object deep = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//这里完成对基本数据类型(属性)和字符串的clone</span><br>        deep = <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-comment">//对引用类型的属性进行单独处理</span><br>        DeepProtoType deepProtoType = (DeepProtoType) deep;<br>        deepProtoType.deepCloneTarget = (DeepCloneTarget) deepCloneTarget.clone();<br>        <span class="hljs-keyword">return</span> deepProtoType;<br>    &#125;<br><br>    <span class="hljs-comment">//深拷贝2 使用对象的序列化实现(推荐)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//创建流对象</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">null</span>;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br>        ByteArrayInputStream bis = <span class="hljs-keyword">null</span>;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>            oos.writeObject(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//当前这个对象以对象流的方式输出 序列化</span><br>            <span class="hljs-comment">//再反序列化 读出来 相当于存了值 成功克隆了一个新的对象</span><br>            bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>            DeepProtoType copy = (DeepProtoType) ois.readObject();<br>            <span class="hljs-keyword">return</span> copy;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bos.close();<br>                oos.close();<br>                bis.close();<br>                ois.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        DeepProtoType dp = <span class="hljs-keyword">new</span> DeepProtoType();<br>        dp.name = <span class="hljs-string">&quot;小水牛&quot;</span>;<br>        dp.deepCloneTarget = <span class="hljs-keyword">new</span> DeepCloneTarget(<span class="hljs-string">&quot;大水牛&quot;</span>, <span class="hljs-string">&quot;敲能喝&quot;</span>);<br>        <span class="hljs-comment">//方式一 完成深拷贝</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        DeepProtoType clone = (DeepProtoType) dp.clone();</span><br><span class="hljs-comment">        System.out.println(dp.hashCode());//460141958</span><br><span class="hljs-comment">        System.out.println(clone.hashCode());//1163157884</span><br><span class="hljs-comment">       */</span><br>       <span class="hljs-comment">//方式二 完成深拷贝</span><br>        DeepProtoType p = (DeepProtoType) dp.deepClone();<br>        System.out.println(<span class="hljs-string">&quot;克隆原型：&quot;</span>+dp.name + <span class="hljs-string">&quot;--&quot;</span> + dp.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆原型：小水牛--325040804</span><br><br>        System.out.println(<span class="hljs-string">&quot;克隆的对象&quot;</span>+p.name + <span class="hljs-string">&quot;--&quot;</span> + p.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆的对象小水牛--2065951873</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//推荐使用的是通过序列化实现深拷贝，这样无论原型如何修改都不会影响克隆 因为直接通过流来反序列化创建</span><br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</li><li>不用重新初始化对象，而是动态的获得对象运行时的状态</li><li>如果原型对象发生变化（增加或减少属性），其他克隆对象也会发生相应的变化，无需修改代码</li><li>在实现深克隆的时候 可能需要比较复杂的代码</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但是对已有的类来说进行改造的时候 需要修改它的源代码，违背了<code>OCP</code>（开闭原则）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-观察者模式</title>
      <link href="/2021/12/08/java-observer/"/>
      <url>/2021/12/08/java-observer/</url>
      
        <content type="html"><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p> 天气预报需求：</p><ol><li>气象站可以将每天测量到的温度，湿度，气压等一公告的形式发布出去，比如发布到自己的网站或者第三方</li><li>设计开放性API 便于其他第三方接入气象站获取数据</li><li>每次更新的时候 就要实时通知其他的第三方更新。</li></ol><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>观察者模式，对象之间多对一依赖的一种设计方案</li></ol><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/JavaDesignMode/observer/observe01.png" alt="observe01"></p><h4 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//观察者接口，有观察者来实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature, <span class="hljs-keyword">float</span> pressure, <span class="hljs-keyword">float</span> humidity)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口, 让WeatherData 来实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer o)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer o)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 相当于气象站本身，包含了一个第三方的集合，可以增加和移除第三方接口，并且能够实时通知第三方更新</span><br><span class="hljs-comment"> * 类是核心</span><br><span class="hljs-comment"> * 1. 包含最新的天气情况信息 </span><br><span class="hljs-comment"> * 2. 含有 观察者集合，使用ArrayList管理</span><br><span class="hljs-comment"> * 3. 当数据有更新时，就主动的调用   ArrayList, 通知所有的（接入方）就看到最新的信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-comment">//温度 气压 湿度</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> temperatrue;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> pressure;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> humidity;<br><span class="hljs-comment">//观察者集合</span><br><span class="hljs-keyword">private</span> ArrayList&lt;Observer&gt; observers;<br><br><span class="hljs-comment">//加入新的第三方</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherData</span><span class="hljs-params">()</span> </span>&#123;<br>observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getTemperature</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> temperatrue;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getPressure</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> pressure;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getHumidity</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> humidity;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dataChange</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用 接入方的 update</span><br>notifyObservers(); <span class="hljs-comment">//通知所有观察者更新</span><br>&#125;<br><br><span class="hljs-comment">//当数据有更新时，就调用 setData</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature, <span class="hljs-keyword">float</span> pressure, <span class="hljs-keyword">float</span> humidity)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.temperatrue = temperature;<br><span class="hljs-keyword">this</span>.pressure = pressure;<br><span class="hljs-keyword">this</span>.humidity = humidity;<br><span class="hljs-comment">//调用dataChange， 将最新的信息 推送给 接入方 currentConditions</span><br>dataChange();<br>&#125;<br><br><span class="hljs-comment">//注册一个观察者</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer o)</span> </span>&#123;<br>observers.add(o);<br>&#125;<br><br><span class="hljs-comment">//移除一个观察者</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer o)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(observers.contains(o)) &#123;<br>observers.remove(o);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//遍历所有的观察者，并通知更新</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; observers.size(); i++) &#123;<br>observers.get(i).update(<span class="hljs-keyword">this</span>.temperatrue, <span class="hljs-keyword">this</span>.pressure, <span class="hljs-keyword">this</span>.humidity);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第三方网站 实现观察者接口 实现update方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CurrentConditions</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span> </span>&#123;<br><br><span class="hljs-comment">// 温度，气压，湿度</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> temperature;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> pressure;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> humidity;<br><br><span class="hljs-comment">// 更新 天气情况，是由 WeatherData 来调用，我使用推送模式</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature, <span class="hljs-keyword">float</span> pressure, <span class="hljs-keyword">float</span> humidity)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.temperature = temperature;<br><span class="hljs-keyword">this</span>.pressure = pressure;<br><span class="hljs-keyword">this</span>.humidity = humidity;<br>display();<br>&#125;<br><br><span class="hljs-comment">// 显示</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;***Today mTemperature: &quot;</span> + temperature + <span class="hljs-string">&quot;***&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;***Today mPressure: &quot;</span> + pressure + <span class="hljs-string">&quot;***&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;***Today mHumidity: &quot;</span> + humidity + <span class="hljs-string">&quot;***&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//新的第三方 只需要实现Observe接口的update方法，就能够拿到数据对自己进行处理</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-comment">//客户端</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建一个WeatherData</span><br>WeatherData weatherData = <span class="hljs-keyword">new</span> WeatherData();<br><br><span class="hljs-comment">//创建观察者</span><br>CurrentConditions currentConditions = <span class="hljs-keyword">new</span> CurrentConditions();<br>BaiduSite baiduSite = <span class="hljs-keyword">new</span> BaiduSite();<br><br><span class="hljs-comment">//注册到weatherData</span><br>weatherData.registerObserver(currentConditions);<br>weatherData.registerObserver(baiduSite);<br><br><span class="hljs-comment">//测试</span><br>System.out.println(<span class="hljs-string">&quot;通知各个注册的观察者, 看看信息&quot;</span>);<br>weatherData.setData(<span class="hljs-number">10f</span>, <span class="hljs-number">100f</span>, <span class="hljs-number">30.3f</span>);<br><br><br>weatherData.removeObserver(currentConditions);<br><span class="hljs-comment">//测试</span><br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;通知各个注册的观察者, 看看信息&quot;</span>);<br>weatherData.setData(<span class="hljs-number">10f</span>, <span class="hljs-number">100f</span>, <span class="hljs-number">30.3f</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="观察者模式的好处"><a href="#观察者模式的好处" class="headerlink" title="观察者模式的好处"></a>观察者模式的好处</h4><ul><li>观察者模式设计后，会以集合的方式来管理用户(Observer)，包括注册，移除和通知。</li><li>这样，我们增加观察者(可以理解为一个新的公告板) 就不需要去修改核心类<code>WeatherData</code>，不会修改代码，遵守了<code>OPC</code>原则。</li></ul><p>源码分析</p><blockquote><p>JDK中的Observable类就使用了观察者模式</p><p>Spring事件驱动模型就是观察者模式的一个经典应用</p><p>监听器就是观察者模式的一种实现</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-day04-transaction</title>
      <link href="/2021/12/08/spring-day04-Transactiona/"/>
      <url>/2021/12/08/spring-day04-Transactiona/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-day04"><a href="#spring-day04" class="headerlink" title="spring-day04"></a>spring-day04</h1><h2 id="第一章-声明式事务"><a href="#第一章-声明式事务" class="headerlink" title="第一章 声明式事务"></a>第一章 声明式事务</h2><h3 id="第一节-JDBCTemplate"><a href="#第一节-JDBCTemplate" class="headerlink" title="第一节 JDBCTemplate"></a>第一节 JDBCTemplate</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>为了在特定领域帮助我们简化代码，Spring 封装了很多 『Template』形式的模板类。例如：RedisTemplate、RestTemplate 等等，包括我们今天要学习的 JDBCTemplate。 </p><h4 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h4><h5 id="2-1-加入依赖"><a href="#2-1-加入依赖" class="headerlink" title="2.1 加入依赖"></a>2.1 加入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 测试相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入LomBok的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-数据源的属性文件jdbc-properties"><a href="#2-2-数据源的属性文件jdbc-properties" class="headerlink" title="2.2 数据源的属性文件jdbc.properties"></a>2.2 数据源的属性文件jdbc.properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">atguigu.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-meta">atguigu.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">atguigu.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">atguigu.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h5 id="2-3-Spring-配置文件"><a href="#2-3-Spring-配置文件" class="headerlink" title="2.3 Spring 配置文件"></a>2.3 Spring 配置文件</h5><h6 id="2-3-1-配置数据源"><a href="#2-3-1-配置数据源" class="headerlink" title="2.3.1 配置数据源"></a>2.3.1 配置数据源</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jdbc.properties属性文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-3-2-配置-JDBCTemplate"><a href="#2-3-2-配置-JDBCTemplate" class="headerlink" title="2.3.2 配置 JDBCTemplate"></a>2.3.2 配置 JDBCTemplate</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对JdbcTemplate进行IOC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入数据源对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-4-在测试类装配-JdbcTemplate"><a href="#2-4-在测试类装配-JdbcTemplate" class="headerlink" title="2.4 在测试类装配 JdbcTemplate"></a>2.4 在测试类装配 JdbcTemplate</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJdbcTemplate</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;    <br></code></pre></td></tr></table></figure><h5 id="2-5-JDBCTemplate的基本用法"><a href="#2-5-JDBCTemplate的基本用法" class="headerlink" title="2.5 JDBCTemplate的基本用法"></a>2.5 JDBCTemplate的基本用法</h5><h6 id="2-5-1-增删改操作"><a href="#2-5-1-增删改操作" class="headerlink" title="2.5.1 增删改操作"></a>2.5.1 增删改操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;<br>    String sql = <span class="hljs-string">&quot;insert into t_emp (emp_name,emp_salary) values (?,?)&quot;</span>;<br>    jdbcTemplate.update(sql,<span class="hljs-string">&quot;aobama&quot;</span>,<span class="hljs-number">3000d</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;<br>    String sql = <span class="hljs-string">&quot;update t_emp set emp_name=?,emp_salary=? where emp_id=?&quot;</span>;<br>    jdbcTemplate.update(sql,<span class="hljs-string">&quot;aolafu&quot;</span>,<span class="hljs-number">6000d</span>,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-5-2-查询：返回单个简单类型"><a href="#2-5-2-查询：返回单个简单类型" class="headerlink" title="2.5.2 查询：返回单个简单类型"></a>2.5.2 查询：返回单个简单类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectCount</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//查询员工的个数</span><br>    String sql = <span class="hljs-string">&quot;select count(emp_id) from t_emp&quot;</span>;<br>    Long count = jdbcTemplate.queryForObject(sql, Long.class);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-5-3-查询：返回实体类类型"><a href="#2-5-3-查询：返回实体类类型" class="headerlink" title="2.5.3 查询：返回实体类类型"></a>2.5.3 查询：返回实体类类型</h6><ol><li>封装实体类类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Double empSalary;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>借助 RowMapper 完成查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectOnRowToBean</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//查询某个员工信息封装到Employee对象中</span><br>    String sql = <span class="hljs-string">&quot;select emp_id empId,emp_name empName, emp_salary empSalary from t_emp where emp_id=?&quot;</span>;<br>    Employee employee = jdbcTemplate.queryForObject(sql,<span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class),<span class="hljs-number">1</span>);<br>    System.out.println(employee);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectRowsToBeanList</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//查询多个员工信息，封装到List&lt;Employee&gt;中</span><br>    String sql = <span class="hljs-string">&quot;select emp_id empId,emp_name empName, emp_salary empSalary from t_emp&quot;</span>;<br>    List&lt;Employee&gt; list = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class));<br><br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二节-声明式事务的概述"><a href="#第二节-声明式事务的概述" class="headerlink" title="第二节 声明式事务的概述"></a>第二节 声明式事务的概述</h3><h4 id="1-编程式事务"><a href="#1-编程式事务" class="headerlink" title="1. 编程式事务"></a>1. 编程式事务</h4><p>事务功能的相关操作全部通过自己编写代码来实现： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection conn = ...;<br>    <br><span class="hljs-keyword">try</span> &#123;<br>    <br>    <span class="hljs-comment">// 开启事务：关闭事务的自动提交</span><br>    conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>    <span class="hljs-comment">// 核心操作</span><br>    <br>    <span class="hljs-comment">// 提交事务</span><br>    conn.commit();<br>    <br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <br>    <span class="hljs-comment">// 回滚事务</span><br>    conn.rollBack();<br>    <br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//将连接的autoCommit还原成true</span><br>    conn.setAutoCommit(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-comment">// 释放数据库连接</span><br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h4 id="2-声明式事务"><a href="#2-声明式事务" class="headerlink" title="2. 声明式事务"></a>2. 声明式事务</h4><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li></ul><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h4 id="3-事务管理器"><a href="#3-事务管理器" class="headerlink" title="3. 事务管理器"></a>3. 事务管理器</h4><p>Spring中的声明式事务是通过事务管理器来进行事务管理的，所以在Spring中定义了事务管理器的顶级接口，针对各种不同的持久层框架，又定义了不同的事务管理器类来进行事务管理</p><h5 id="3-1-顶级接口"><a href="#3-1-顶级接口" class="headerlink" title="3.1 顶级接口"></a>3.1 顶级接口</h5><h6 id="3-1-1-Spring-5-2以前"><a href="#3-1-1-Spring-5-2以前" class="headerlink" title="3.1.1 Spring 5.2以前"></a>3.1.1 Spring 5.2以前</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PlatformTransactionManager</span> </span>&#123;<br>    <span class="hljs-function">TransactionStatus <span class="hljs-title">getTransaction</span><span class="hljs-params">(TransactionDefinition definition)</span> <span class="hljs-keyword">throws</span> TransactionException</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">(TransactionStatus status)</span> <span class="hljs-keyword">throws</span> TransactionException</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rollback</span><span class="hljs-params">(TransactionStatus status)</span> <span class="hljs-keyword">throws</span> TransactionException</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-2-从-Spring-5-2开始"><a href="#3-1-2-从-Spring-5-2开始" class="headerlink" title="3.1.2 从 Spring 5.2开始"></a>3.1.2 从 Spring 5.2开始</h6><p>PlatformTransactionManager 接口本身没有变化，它继承了 TransactionManager </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TransactionManager</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>TransactionManager接口中什么都没有，但是它还是有存在的意义——定义一个技术体系。</p></blockquote><h5 id="3-2-事务管理器的体系结构"><a href="#3-2-事务管理器的体系结构" class="headerlink" title="3.2 事务管理器的体系结构"></a>3.2 事务管理器的体系结构</h5><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_021.png"></p><p>我们现在要使用的事务管理器是org.springframework.jdbc.datasource.<strong>DataSourceTransactionManager</strong>，将来整合 Mybatis 用的也是这个类。</p><p>DataSourceTransactionManager类中的主要方法：</p><ul><li>doBegin()：开启事务</li><li>doSuspend()：挂起事务(暂停事务)</li><li>doResume()：恢复挂起的事务</li><li>doCommit()：提交事务</li><li>doRollback()：回滚事务</li></ul><blockquote><p>如果持久层使用Hibernate框架的话，则需要使用HibernateTransactionManager</p></blockquote><h3 id="第三节-基于注解的声明式事务"><a href="#第三节-基于注解的声明式事务" class="headerlink" title="第三节 基于注解的声明式事务"></a>第三节 基于注解的声明式事务</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><h5 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring 测试相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入LomBok的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-数据源的属性文件"><a href="#1-2-数据源的属性文件" class="headerlink" title="1.2 数据源的属性文件"></a>1.2 数据源的属性文件</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">atguigu.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-meta">atguigu.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">atguigu.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">atguigu.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h5 id="1-3-Spring-配置文件"><a href="#1-3-Spring-配置文件" class="headerlink" title="1.3 Spring 配置文件"></a>1.3 Spring 配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--包扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--引入jdbc.properties属性文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置JdbcTemplate的IOC--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-4-数据建模"><a href="#1-4-数据建模" class="headerlink" title="1.4 数据建模"></a>1.4 数据建模</h5><h6 id="1-4-1-物理建模"><a href="#1-4-1-物理建模" class="headerlink" title="1.4.1 物理建模"></a>1.4.1 物理建模</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_account(<br>account_id INT PRIMARY KEY AUTO_INCREMENT,<br>account_name VARCHAR(20),<br>money DOUBLE<br>);<br><br>INSERT INTO t_account VALUES (NULL,&#x27;zs&#x27;,1000);<br><br>INSERT INTO t_account VALUES (NULL,&#x27;ls&#x27;,1000);<br></code></pre></td></tr></table></figure><h6 id="1-4-2-逻辑建模"><a href="#1-4-2-逻辑建模" class="headerlink" title="1.4.2 逻辑建模"></a>1.4.2 逻辑建模</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer accountId;<br>    <span class="hljs-keyword">private</span> String accountName;<br>    <span class="hljs-keyword">private</span> Double money;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-5-创建持久层组件"><a href="#1-5-创建持久层组件" class="headerlink" title="1.5 创建持久层组件"></a>1.5 创建持久层组件</h5><h6 id="1-5-1-AccountDao接口"><a href="#1-5-1-AccountDao接口" class="headerlink" title="1.5.1 AccountDao接口"></a>1.5.1 AccountDao接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据账户的id修改账户的金额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> accountId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateAccountMoney</span><span class="hljs-params">(Integer accountId,Double money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-5-2-AccountDaoImpl实现类"><a href="#1-5-2-AccountDaoImpl实现类" class="headerlink" title="1.5.2 AccountDaoImpl实现类"></a>1.5.2 AccountDaoImpl实现类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.AccountDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateAccountMoney</span><span class="hljs-params">(Integer accountId, Double money)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update t_account set money=money+? where account_id=?&quot;</span>;<br>        jdbcTemplate.update(sql,money,accountId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-6-创建业务层组件"><a href="#1-6-创建业务层组件" class="headerlink" title="1.6 创建业务层组件"></a>1.6 创建业务层组件</h5><h6 id="1-6-1-AccountService接口"><a href="#1-6-1-AccountService接口" class="headerlink" title="1.6.1 AccountService接口"></a>1.6.1 AccountService接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转账方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fromId 转出账户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> toId 转入账户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money 转账金额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Integer fromId,Integer toId,Double money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-6-2-AccountServiceImpl实现类"><a href="#1-6-2-AccountServiceImpl实现类" class="headerlink" title="1.6.2 AccountServiceImpl实现类"></a>1.6.2 AccountServiceImpl实现类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Integer fromId, Integer toId, Double money)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 转出账户扣款</span><br>        accountDao.updateAccountMoney(fromId,-money);<br><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//2. 转入账户收款</span><br>        accountDao.updateAccountMoney(toId,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-7-测试类"><a href="#1-7-测试类" class="headerlink" title="1.7 测试类"></a>1.7 测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTransfer</span><span class="hljs-params">()</span></span>&#123;<br>        accountService.transfer(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">500d</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-进行基于注解的声明式事务的配置"><a href="#2-进行基于注解的声明式事务的配置" class="headerlink" title="2. 进行基于注解的声明式事务的配置"></a>2. 进行基于注解的声明式事务的配置</h4><h5 id="2-1-配置事务管理器"><a href="#2-1-配置事务管理器" class="headerlink" title="2.1 配置事务管理器"></a>2.1 配置事务管理器</h5><p>在spring的配置文件中配置事务管理器对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对事务管理者做IOC配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-开启基于注解的声明式事务功能"><a href="#2-2-开启基于注解的声明式事务功能" class="headerlink" title="2.2 开启基于注解的声明式事务功能"></a>2.2 开启基于注解的声明式事务功能</h5><p>在spring的配置文件中开启基于注解的声明式事务功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        要开启注解方式声明式事务的支持</span><br><span class="hljs-comment">        transaction-manager属性:表示使用哪个事务管理器对象来管理事务</span><br><span class="hljs-comment">                               如果你的事务管理器的id是transactionManager的话，可以省略该属性</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>注意：导入名称空间时有好几个重复的，我们需要的是 <strong>tx 结尾</strong>的那个。 </p><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_022.png"></p><h5 id="2-3-在需要事务的方法上使用注解"><a href="#2-3-在需要事务的方法上使用注解" class="headerlink" title="2.3 在需要事务的方法上使用注解"></a>2.3 在需要事务的方法上使用注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Integer fromId, Integer toId, Double money)</span> </span>&#123;<br>    <span class="hljs-comment">//1. 转出账户扣款</span><br>    accountDao.updateAccountMoney(fromId,-money);<br><br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//2. 转入账户收款</span><br>    accountDao.updateAccountMoney(toId,money);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-执行测试"><a href="#2-4-执行测试" class="headerlink" title="2.4 执行测试"></a>2.4 执行测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTransfer</span><span class="hljs-params">()</span></span>&#123;<br>        accountService.transfer(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">500d</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-从日志内容角度查看事务效果"><a href="#3-从日志内容角度查看事务效果" class="headerlink" title="3. 从日志内容角度查看事务效果"></a>3. 从日志内容角度查看事务效果</h4><h5 id="3-1-加入依赖"><a href="#3-1-加入依赖" class="headerlink" title="3.1 加入依赖"></a>3.1 加入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加入日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-加入logback的配置文件"><a href="#3-2-加入logback的配置文件" class="headerlink" title="3.2 加入logback的配置文件"></a>3.2 加入logback的配置文件</h5><p>文件名：logback.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> /&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-3-观察日志打印"><a href="#3-3-观察日志打印" class="headerlink" title="3.3 观察日志打印"></a>3.3 观察日志打印</h5><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_031.png"></p><h4 id="4-debug查看事务管理器中的关键方法"><a href="#4-debug查看事务管理器中的关键方法" class="headerlink" title="4. debug查看事务管理器中的关键方法"></a>4. debug查看事务管理器中的关键方法</h4><p>需要查看的类：org.springframework.jdbc.datasource.DataSourceTransactionManager </p><h5 id="4-1-开启事务的方法"><a href="#4-1-开启事务的方法" class="headerlink" title="4.1 开启事务的方法"></a>4.1 开启事务的方法</h5><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_023.png"></p><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_024.png"></p><h5 id="4-2-提交事务的方法"><a href="#4-2-提交事务的方法" class="headerlink" title="4.2 提交事务的方法"></a>4.2 提交事务的方法</h5><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_025.png"></p><h5 id="4-3-回滚事务的方法"><a href="#4-3-回滚事务的方法" class="headerlink" title="4.3 回滚事务的方法"></a>4.3 回滚事务的方法</h5><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_026.png"></p><h3 id="第四节-事务属性"><a href="#第四节-事务属性" class="headerlink" title="第四节 事务属性"></a>第四节 事务属性</h3><h4 id="1-只读属性"><a href="#1-只读属性" class="headerlink" title="1. 只读属性"></a>1. 只读属性</h4><h5 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h5><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。但是如果你的方法中执行写操作，那么就会报错</p><h5 id="1-2-设置方式"><a href="#1-2-设置方式" class="headerlink" title="1.2 设置方式"></a>1.2 设置方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(read-only=true)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Integer fromId, Integer toId, Double money)</span> </span>&#123;<br>    <span class="hljs-comment">//1. 转出账户扣款</span><br>    accountDao.updateAccountMoney(fromId,-money);<br>    <span class="hljs-comment">//int num = 10/0;</span><br>    <span class="hljs-comment">//2. 转入账户收款</span><br>    accountDao.updateAccountMoney(toId,money);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-如果在设置了只读的事务中进行写操作"><a href="#1-3-如果在设置了只读的事务中进行写操作" class="headerlink" title="1.3 如果在设置了只读的事务中进行写操作"></a>1.3 如果在设置了只读的事务中进行写操作</h5><p>会抛出下面异常：</p><blockquote><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p></blockquote><h5 id="1-4-如果将-Transactional注解放在类上"><a href="#1-4-如果将-Transactional注解放在类上" class="headerlink" title="1.4  如果将@Transactional注解放在类上"></a>1.4  如果将@Transactional注解放在类上</h5><h6 id="1-4-1-生效原则"><a href="#1-4-1-生效原则" class="headerlink" title="1.4.1 生效原则"></a>1.4.1 生效原则</h6><p>如果一个类中每一个方法上都使用了@Transactional注解，那么就可以将@Transactional注解提取到类上。反过来说：@Transactional注解在类级别标记，会影响到类中的每一个方法。同时，类级别标记的@Transactional注解中设置的事务属性也会延续影响到方法执行时的事务属性。除非在方法上又设置了@Transactional注解。</p><p>对一个方法来说，离它最近的@Transactional注解中的事务属性设置生效。</p><h6 id="1-4-2-用法举例"><a href="#1-4-2-用法举例" class="headerlink" title="1.4.2 用法举例"></a>1.4.2 用法举例</h6><p>在类级别@Transactional注解中设置只读，这样类中所有的查询方法都不需要设置@Transactional注解了。因为对查询操作来说</p><p>，其他属性通常不需要设置，所以使用公共设置即可。</p><p>然后在这个基础上，对增删改方法设置@Transactional注解 readOnly 属性为 false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * read-only属性表示事务是否只读:默认值是false，</span><br><span class="hljs-comment"> 如果设置为true那么当前事务中只能做数据库的读操作，不能做写操作</span><br><span class="hljs-comment"> *          该属性的作用:可以对只读的数据库操作做一些优化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br>    <span class="hljs-meta">@Transactional(readOnly = false)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Integer fromId, Integer toId, Double money)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 转出账户扣款</span><br>        accountDao.updateAccountMoney(fromId,-money);<br><br>        <span class="hljs-comment">//int num = 10/0;</span><br>        <span class="hljs-comment">//2. 转入账户收款</span><br>        accountDao.updateAccountMoney(toId,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>PS：Spring 环境下很多场合都有类似设定，一个注解如果标记了类的每一个方法那么通常就可以提取到类级别。但是，如果不是类中的所有方法都需要用到事务，则绝不允许将@Transaction注解放在类上</p></blockquote><h4 id="2-超时属性"><a href="#2-超时属性" class="headerlink" title="2. 超时属性"></a>2. 超时属性</h4><h5 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h5><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><h5 id="2-2-设置方式"><a href="#2-2-设置方式" class="headerlink" title="2.2 设置方式"></a>2.2 设置方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = false, timeout = 3)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateTwice</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        // 修改员工姓名的一组参数</span></span><br><span class="hljs-params"><span class="hljs-function">        Integer empId4EditName, String newName,</span></span><br><span class="hljs-params"><span class="hljs-function">        // 修改员工工资的一组参数</span></span><br><span class="hljs-params"><span class="hljs-function">        Integer empId4EditSalary, Double newSalary</span></span><br><span class="hljs-params"><span class="hljs-function">        )</span> </span>&#123;<br>    <span class="hljs-comment">// 为了测试事务是否生效，执行两个数据库操作，看它们是否会在某一个失败时一起回滚</span><br>    empDao.updateEmpNameById(empId4EditName, newName);<br>    empDao.updateEmpSalaryById(empId4EditSalary, newSalary);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-模拟超时"><a href="#2-3-模拟超时" class="headerlink" title="2.3 模拟超时"></a>2.3 模拟超时</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateEmpSalaryById</span><span class="hljs-params">(Integer empId, Double salary)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">// 为了看到操作失败后的效果人为将 SQL 语句破坏</span><br>    String sql = <span class="hljs-string">&quot;update t_emp set emp_salary=? where emp_id=?&quot;</span>;<br>    jdbcTemplate.update(sql, salary, empId);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>PS：注意：sleep操作如果放在执行 SQL 语句后面那就不起作用。</p></blockquote><h5 id="2-4-执行效果"><a href="#2-4-执行效果" class="headerlink" title="2.4  执行效果"></a>2.4  执行效果</h5><p>执行过程中日志和抛出异常的情况：</p><blockquote><p>[16:25:41.706] [DEBUG] [main] [org.springframework.jdbc.datasource.DataSourceTransactionManager] [Initiating transaction rollback] [16:25:41.706] [DEBUG] [main] [org.springframework.jdbc.datasource.DataSourceTransactionManager] [Rolling back JDBC transaction on Connection [com.mysql.jdbc.JDBC4Connection@53b7f657]] [16:25:41.709] [DEBUG] [main] [org.springframework.jdbc.datasource.DataSourceTransactionManager] [Releasing JDBC Connection [com.mysql.jdbc.JDBC4Connection@53b7f657] after transaction]</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2021</p></blockquote><h4 id="3-回滚和不回滚的异常属性"><a href="#3-回滚和不回滚的异常属性" class="headerlink" title="3. 回滚和不回滚的异常属性"></a>3. 回滚和不回滚的异常属性</h4><h5 id="3-1-默认情况"><a href="#3-1-默认情况" class="headerlink" title="3.1 默认情况"></a>3.1 默认情况</h5><p>默认只针对运行时异常回滚，编译时异常不回滚。情景模拟代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Integer fromId, Integer toId, Double money)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException</span>&#123;<br>    <span class="hljs-comment">//1. 转出账户扣款</span><br>    accountDao.updateAccountMoney(fromId,-money);<br>    <span class="hljs-comment">//什么是运行时异常:不需要在编译时处理的异常</span><br>    <span class="hljs-comment">//什么是编译时异常:需要在编译时就进行处理的异常</span><br><span class="hljs-comment">//默认情况是遇到运行时异常才回滚:</span><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driveraaaaaa&quot;</span>);<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//2. 转入账户收款</span><br>    accountDao.updateAccountMoney(toId,money);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-设置回滚的异常"><a href="#3-2-设置回滚的异常" class="headerlink" title="3.2 设置回滚的异常"></a>3.2 设置回滚的异常</h5><ul><li>rollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br></code></pre></td></tr></table></figure><h5 id="3-3-设置不回滚的异常"><a href="#3-3-设置不回滚的异常" class="headerlink" title="3.3 设置不回滚的异常"></a>3.3 设置不回滚的异常</h5><p>在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(</span><br><span class="hljs-meta">    noRollbackFor = FileNotFoundException.class</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><h5 id="3-4-如果回滚和不回滚异常同时设置"><a href="#3-4-如果回滚和不回滚异常同时设置" class="headerlink" title="3.4 如果回滚和不回滚异常同时设置"></a>3.4 如果回滚和不回滚异常同时设置</h5><h6 id="3-4-1-当两者范围不同"><a href="#3-4-1-当两者范围不同" class="headerlink" title="3.4.1 当两者范围不同"></a>3.4.1 当两者范围不同</h6><p>不管是哪个设置范围大，都是在大范围内在排除小范围的设定。例如：</p><ul><li>rollbackFor = Exception.class</li><li>noRollbackFor = FileNotFoundException.class</li></ul><p>意思是除了 FileNotFoundException 之外，其他所有 Exception 范围的异常都回滚；但是碰到 FileNotFoundException 不回滚。</p><h6 id="3-4-2-当两者范围相同-傻子才会这样去设置"><a href="#3-4-2-当两者范围相同-傻子才会这样去设置" class="headerlink" title="3.4.2 当两者范围相同(傻子才会这样去设置)"></a>3.4.2 当两者范围相同(傻子才会这样去设置)</h6><ul><li>noRollbackFor = FileNotFoundException.class</li><li>rollbackFor = FileNotFoundException.class</li></ul><p>此时 Spring 采纳了 rollbackFor 属性的设定：遇到 FileNotFoundException 异常会回滚。</p><h4 id="4-事务隔离级别属性"><a href="#4-事务隔离级别属性" class="headerlink" title="4. 事务隔离级别属性"></a>4. 事务隔离级别属性</h4><h5 id="4-1-回顾事务的隔离级别"><a href="#4-1-回顾事务的隔离级别" class="headerlink" title="4.1 回顾事务的隔离级别"></a>4.1 回顾事务的隔离级别</h5><table><thead><tr><th><strong>级别</strong></th><th><strong>名字</strong></th><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th><th><strong>数据库默认隔离级别</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td>读未提交</td><td>read uncommitted</td><td>是</td><td>是</td><td>是</td><td>一般不使用</td></tr><tr><td><strong>2</strong></td><td>读已提交</td><td>read committed</td><td>否</td><td>是</td><td>是</td><td>Oracle</td></tr><tr><td><strong>3</strong></td><td>可重复读</td><td>repeatable read</td><td>否</td><td>否</td><td>是</td><td>MySQL</td></tr><tr><td><strong>4</strong></td><td>串行化</td><td>serializable</td><td>否</td><td>否</td><td>否</td><td>最高的隔离级别</td></tr></tbody></table><h5 id="4-2-设置方式"><a href="#4-2-设置方式" class="headerlink" title="4.2 设置方式"></a>4.2 设置方式</h5><p>在 @Transactional 注解中使用 isolation 属性设置事务的隔离级别。 取值使用 org.springframework.transaction.annotation.Isolation 枚举类提供的数值。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><br></code></pre></td></tr></table></figure><p>我们一般不需要去设置事务的隔离级别，绝大多数情况下使用默认的隔离级别就行</p><h4 id="5-事务传播行为属性"><a href="#5-事务传播行为属性" class="headerlink" title="5. 事务传播行为属性"></a>5. 事务传播行为属性</h4><h5 id="5-1-事务传播行为要研究的问题"><a href="#5-1-事务传播行为要研究的问题" class="headerlink" title="5.1 事务传播行为要研究的问题"></a>5.1 事务传播行为要研究的问题</h5><p>事务的传播行为要研究的是是当两个方法嵌套执行的时候，外层方法的事务能否传播到内层方法以及怎么传播到外层方法</p><h5 id="5-2-propagation属性"><a href="#5-2-propagation属性" class="headerlink" title="5.2 propagation属性"></a>5.2 propagation属性</h5><h6 id="5-2-1-默认值"><a href="#5-2-1-默认值" class="headerlink" title="5.2.1 默认值"></a>5.2.1 默认值</h6><p>@Transactional 注解通过 propagation 属性设置事务的传播行为。它的默认值是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Propagation <span class="hljs-title">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED</span>;<br></code></pre></td></tr></table></figure><h6 id="5-2-2-可选值说明"><a href="#5-2-2-可选值说明" class="headerlink" title="5.2.2 可选值说明"></a>5.2.2 可选值说明</h6><p>propagation 属性的可选值由 org.springframework.transaction.annotation.Propagation 枚举类提供：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED 默认值</td><td>当前方法必须工作在事务中 如果当前线程上有已经开启的事务可用，那么就在这个事务中运行 如果当前线程上没有已经开启的事务，那么就自己开启新事务，在新事务中运行 所以当前方法有可能和其他方法共用事务 在共用事务的情况下：当前方法会因为其他方法回滚而受连累</td></tr><tr><td><strong>REQUIRES_NEW</strong> 建议使用</td><td>当前方法必须工作在事务中 不管当前线程上是否有已经开启的事务，都要开启新事务 在新事务中运行 不会和其他方法共用事务，避免被其他方法连累。如果外层已经有事务，就先将它挂起，内层方法新建实物，内层方法新建实物执行完之后再恢复外层事务</td></tr><tr><td>SUPPORTS(支持)</td><td>如果外层方法有事务，内层方法则会参与进外层事务一起执行，如果外层方法没有事务，那么内层方法则是以非事务方式运行</td></tr><tr><td>NOT_SUPPORTED</td><td>如果外层方法有事务，则先将外层方法事务挂起，内层以非事务方法执行。执行完之后再恢复外层事务(不支持事务)</td></tr><tr><td>MANDATORY(强制性的)</td><td>如果外层方法有事务，内层方法则会参与外层事务一起执行，如果外层方法没有事务，则抛出异常，强制从外层方法必须有事务</td></tr><tr><td>NEVER</td><td>只能以非事务方式运行，如果外层方法有事务 直接抛出异常</td></tr><tr><td>NESTED</td><td>新建一个嵌套事务，在嵌套事务中执行，设置了一个回滚点。有点类似REQUIRED</td></tr></tbody></table><h5 id="5-3-测试事务的传播行为"><a href="#5-3-测试事务的传播行为" class="headerlink" title="5.3 测试事务的传播行为"></a>5.3 测试事务的传播行为</h5><h6 id="5-3-1-在业务层中声明两个内层方法"><a href="#5-3-1-在业务层中声明两个内层方法" class="headerlink" title="5.3.1 在业务层中声明两个内层方法"></a>5.3.1 在业务层中声明两个内层方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateAccountNameInner</span><span class="hljs-params">(Integer accountId, String accountName)</span></span>&#123;<br>    accountDao.updateAccountName(accountId,accountName);<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateAccountMoney</span><span class="hljs-params">(Integer accountId, Double money)</span></span>&#123;<br>    accountDao.updateAccountMoney(accountId,money);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-3-2-创建TopService"><a href="#5-3-2-创建TopService" class="headerlink" title="5.3.2 创建TopService"></a>5.3.2 创建TopService</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> com.atguigu.service.TopService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TopService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topTxMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        accountService.updateAccountMoney(<span class="hljs-number">1</span>,<span class="hljs-number">2000d</span>);<br>        accountService.updateAccountNameInner(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-3-3-junit测试方法"><a href="#5-3-3-junit测试方法" class="headerlink" title="5.3.3 junit测试方法"></a>5.3.3 junit测试方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> com.atguigu.service.TopService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TopService topService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPropagation</span><span class="hljs-params">()</span></span>&#123;<br>        topService.topTxMethod();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-3-4-测试-REQUIRED-模式"><a href="#5-3-4-测试-REQUIRED-模式" class="headerlink" title="5.3.4 测试 REQUIRED 模式"></a>5.3.4 测试 REQUIRED 模式</h6><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_027.png"></p><p>效果：内层方法A、内层方法B所做的修改都没有生效，总事务回滚了。 </p><h6 id="5-3-5-测试-REQUIRES-NEW-模式"><a href="#5-3-5-测试-REQUIRES-NEW-模式" class="headerlink" title="5.3.5 测试 REQUIRES_NEW 模式"></a>5.3.5 测试 REQUIRES_NEW 模式</h6><p>修改 EmpService 中内层方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateEmpNameInner</span><span class="hljs-params">(Integer empId, String empName)</span> </span>&#123;<br>    <br>    empDao.updateEmpNameById(empId, empName);<br>&#125;<br>    <br><span class="hljs-meta">@Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateEmpSalaryInner</span><span class="hljs-params">(Integer empId, Double empSalary)</span> </span>&#123;<br>    <br>    empDao.updateEmpSalaryById(empId, empSalary);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_028.png"></p><p>效果：内层方法A的修改生效了、内层方法B所做的修改都没有生效，总事务回滚了。</p><h6 id="5-3-6-实际开发情景"><a href="#5-3-6-实际开发情景" class="headerlink" title="5.3.6 实际开发情景"></a>5.3.6 实际开发情景</h6><p>Service方法应用了通知</p><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_029.png"></p><p>过滤器或拦截器等类似组件</p><p><img src="http://www.slx.blue/2021/12/08/spring-day04-Transactiona/tu_030.png"></p><p>我们在事务传播行为这里，使用 REQUIRES_NEW 属性，也可以说是让不同事务方法从事务的使用上<strong>解耦合</strong>，不要互相影响。 </p><h3 id="第五节-基于XML配置声明式事务-了解"><a href="#第五节-基于XML配置声明式事务-了解" class="headerlink" title="第五节 基于XML配置声明式事务(了解)"></a>第五节 基于XML配置声明式事务(了解)</h3><h4 id="1-加入依赖"><a href="#1-加入依赖" class="headerlink" title="1. 加入依赖"></a>1. 加入依赖</h4><p>相比于基于注解的声明式事务，基于 XML 的声明式事务需要一个额外的依赖： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-迁移代码"><a href="#2-迁移代码" class="headerlink" title="2. 迁移代码"></a>2. 迁移代码</h4><p>将上一个基于注解的 module 中的代码转移到新module。去掉 @Transactional 注解。 </p><h4 id="3-修改-Spring-配置文件"><a href="#3-修改-Spring-配置文件" class="headerlink" title="3. 修改 Spring 配置文件"></a>3. 修改 Spring 配置文件</h4><p>去掉 tx:annotation-driven 标签，然后加入下面的配置： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用配置文件方式配置声明式事务:</span><br><span class="hljs-comment">        配置文件方式进行声明式事务的配置是写在&lt;tx:advice&gt;标签中，</span><br><span class="hljs-comment">        该标签的transaction-manager表示使用哪个事务管理器对象来进行事务管理，默认的事务管理器的id是transactionManager</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;adv1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            tx:attributes表示声明各个方法上使用的事务的属性</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                tx:method表示要使用事务的方法，name属性表示方法名，其它属性表示事务的属性</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transfer&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--真正配置事务作用在哪些方法上，要通过aop配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切入点:表示描述哪些方法要使用事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt1&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(public void com.atguigu.service.impl.AccountServiceImpl.transfer(Integer,Integer,Double))&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定事务作用于切入点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;adv1&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h4><p>即使需要事务功能的目标方法已经被切入点表达式涵盖到了，但是如果没有给它配置事务属性，那么这个方法就还是没有事务。所以事务属性必须配置。 </p><h2 id="第三章-Spring5的新特性"><a href="#第三章-Spring5的新特性" class="headerlink" title="第三章 Spring5的新特性"></a>第三章 Spring5的新特性</h2><h3 id="第一节-JSR305标准相关注解"><a href="#第一节-JSR305标准相关注解" class="headerlink" title="第一节 JSR305标准相关注解"></a>第一节 JSR305标准相关注解</h3><h4 id="1-JSR的概述"><a href="#1-JSR的概述" class="headerlink" title="1. JSR的概述"></a>1. JSR的概述</h4><h5 id="1-1-JCP"><a href="#1-1-JCP" class="headerlink" title="1.1 JCP"></a>1.1 JCP</h5><p>JCP（Java Community Process) 是一个由SUN公司发起的，开放的国际组织。主要由Java开发者以及被授权者组成，负责Java技术规范维护，Java技术发展和更新。</p><p>JCP官网地址：<a href="https://jcp.org/en/home/index">https://jcp.org/en/home/index</a></p><h5 id="1-2-JSR"><a href="#1-2-JSR" class="headerlink" title="1.2 JSR"></a>1.2 JSR</h5><p>JSR 的全称是：Java Specification Request，意思是 Java 规范提案。谁向谁提案呢？任何人都可以向 JCP (Java Community Process) 提出新增一个标准化技术规范的正式请求。JSR已成为Java界的一个重要标准。登录<a href="https://jcp.org/en/home/index"> JCP 官网</a>可以查看<a href="https://jcp.org/en/jsr/all">所有 JSR 标准</a>。 </p><h4 id="2-JSR-305的规范"><a href="#2-JSR-305的规范" class="headerlink" title="2. JSR 305的规范"></a>2. JSR 305的规范</h4><p>JSR 305: Annotations for Software Defect Detection</p><p>This JSR will work to develop standard annotations (such as @NonNull) that can be applied to Java programs to assist tools that detect software defects.</p><p>主要功能：使用注解（例如@NonNull等等）协助开发者侦测软件缺陷。</p><p>Spring 从 5.0 版本开始支持了 JSR 305 规范中涉及到的相关注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.lang;<br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> javax.annotation.Nonnull;<br><span class="hljs-keyword">import</span> javax.annotation.meta.TypeQualifierNickname;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A common Spring annotation to declare that annotated elements cannot be &#123;<span class="hljs-doctag">@code</span> null&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Leverages JSR-305 meta-annotations to indicate nullability in Java to common</span><br><span class="hljs-comment"> * tools with JSR-305 support and used by Kotlin to infer nullability of Spring API.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Should be used at parameter, return value, and field level. Method overrides should</span><br><span class="hljs-comment"> * repeat parent &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@NonNull</span>&#125; annotations unless they behave differently.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Use &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@NonNullApi</span>&#125; (scope = parameters + return values) and/or &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@NonNullFields</span>&#125;</span><br><span class="hljs-comment"> * (scope = fields) to set the default behavior to non-nullable in order to avoid annotating</span><br><span class="hljs-comment"> * your whole codebase with &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@NonNull</span>&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Sebastien Deleuze</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 5.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> NonNullApi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> NonNullFields</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> Nullable</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Nonnull</span><br><span class="hljs-meta">@TypeQualifierNickname</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NonNull &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-相关注解"><a href="#3-相关注解" class="headerlink" title="3. 相关注解"></a>3. 相关注解</h4><table><thead><tr><th>注解名称</th><th>含义</th><th>可标记位置</th></tr></thead><tbody><tr><td>@Nullable</td><td>可以为空</td><td>@Target({ElementType.<strong>METHOD</strong>, ElementType.<strong>PARAMETER</strong>, ElementType.<strong>FIELD</strong>})</td></tr><tr><td>@NonNull</td><td>不应为空</td><td>@Target({ElementType.<strong>METHOD</strong>, ElementType.<strong>PARAMETER</strong>, ElementType.<strong>FIELD</strong>})</td></tr><tr><td>@NonNullFields</td><td>在特定包下的字段不应为空</td><td>@Target(ElementType.<strong>PACKAGE</strong>) @TypeQualifierDefault(ElementType.<strong>FIELD</strong>)</td></tr><tr><td>@NonNullApi</td><td>参数和方法返回值不应为空</td><td>@Target(ElementType.<strong>PACKAGE</strong>) @TypeQualifierDefault({ElementType.<strong>METHOD</strong>, ElementType.<strong>PARAMETER</strong>})</td></tr></tbody></table><h3 id="第二节-整合junit5"><a href="#第二节-整合junit5" class="headerlink" title="第二节 整合junit5"></a>第二节 整合junit5</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1. 导入依赖"></a>1. 导入依赖</h4><p>在原有环境基础上增加如下依赖： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-创建测试类"><a href="#2-创建测试类" class="headerlink" title="2. 创建测试类"></a>2. 创建测试类</h4><ul><li>@ExtendWith(SpringExtension.class) 表示使用 Spring 提供的扩展功能。</li><li>@ContextConfiguration(value = {“classpath:spring-context.xml”}) 还是用来指定 Spring 配置文件位置，和整合 junit4 一样。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.config.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;<br><br><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTransfer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        accountService.transfer(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">500d</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-使用复合注解"><a href="#3-使用复合注解" class="headerlink" title="3. 使用复合注解"></a>3. 使用复合注解</h4><p>@SpringJUnitConfig 注解综合了前面两个注解的功能，此时指定 Spring 配置文件位置即可。但是注意此时需要使用 locations 属性，不是 value 属性了。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.config.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-meta">@SpringJUnitConfig(AtguiguSpringConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTransfer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        accountService.transfer(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">500d</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式-迭代器模式</title>
      <link href="/2021/12/08/java-iterator/"/>
      <url>/2021/12/08/java-iterator/</url>
      
        <content type="html"><![CDATA[<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>传统模式案例：一个学校有多个学院，每个学院下面又有各种专业，但是每个学院可能存储的数据不一样，可能是集合，可能是数组，可能是map等等等，如何做到用一个统一的接口遍历全部对象， 而不暴露内部细节，简化用户的使用。</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍:"></a>基本介绍:</h4><ol><li>迭代器模式(Iterator Pattern) 是常用的设计模式 ，属于行为型模式</li><li>如果我们的集合元素是用不同的方式实现的，有数组，还有<code>java</code>的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多种便利方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</li><li>迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示。即：不暴露其内部结构。</li></ol><p>用例图：</p><p><img src="http://www.slx.blue/2021/12/08/java-iterator/iterator01.png" alt="iterator01"></p><p>类图说明：</p><ul><li>Iterator ： 迭代器接口，是系统提供，含义 <code>hasNext</code>， next  ， remove)</li><li><code>ConcreateIterator</code>：具体的迭代器类，管理迭代。</li><li>Aggregate ：一个统一的聚合接口，将 客户端 和 具体聚合 解耦。</li><li><code>ConcreateAggreage</code>：具体的聚合 持有对象集合，并提供方法返回一个迭代器</li><li>Client：通过Iterator和Aggregate 依赖子类</li></ul><blockquote><p>编写一个学校院系结构，在一个页面中展示出学校院系组成，一个学校有多个学院，一个学院有多个系</p></blockquote><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//College接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">College</span> </span>&#123;<br><span class="hljs-comment">//名字</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//增加系的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDepartment</span><span class="hljs-params">(String name, String desc)</span></span>;<br><br><span class="hljs-comment">//返回一个迭代器,遍历</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator  <span class="hljs-title">createIterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用来存储数据的统一模型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String desc;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Department</span><span class="hljs-params">(String name, String desc)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.desc = desc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> name;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<span class="hljs-keyword">this</span>.name = name;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDesc</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> desc;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDesc</span><span class="hljs-params">(String desc)</span> </span>&#123;<span class="hljs-keyword">this</span>.desc = desc;&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//计算机学院具体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComputerCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">College</span> </span>&#123;<br><br><span class="hljs-comment">//模拟每个学院存储数据的方式集合不一样</span><br>Department[] departments;<br><span class="hljs-keyword">int</span> numOfDepartment = <span class="hljs-number">0</span> ;<span class="hljs-comment">// 保存当前数组的对象个数</span><br><br><br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ComputerCollege</span><span class="hljs-params">()</span> </span>&#123;<br>departments = <span class="hljs-keyword">new</span> Department[<span class="hljs-number">5</span>];<br>addDepartment(<span class="hljs-string">&quot;Java专业&quot;</span>, <span class="hljs-string">&quot; Java专业 &quot;</span>);<br>addDepartment(<span class="hljs-string">&quot;PHP专业&quot;</span>, <span class="hljs-string">&quot; PHP专业 &quot;</span>);<br>addDepartment(<span class="hljs-string">&quot;大数据专业&quot;</span>, <span class="hljs-string">&quot; 大数据专业 &quot;</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;计算机学院&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDepartment</span><span class="hljs-params">(String name, String desc)</span> </span>&#123;<br>Department department = <span class="hljs-keyword">new</span> Department(name, desc);<br>departments[numOfDepartment] = department;<br>numOfDepartment += <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator <span class="hljs-title">createIterator</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ComputerCollegeIterator(departments);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//计算机学院迭代器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComputerCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span> </span>&#123;<br><span class="hljs-comment">//不同的迭代器实现不同的遍历方法</span><br><br><span class="hljs-comment">//这里我们需要Department 是以怎样的方式存放=&gt;数组</span><br>Department[] departments;<br><span class="hljs-keyword">int</span> position = <span class="hljs-number">0</span>; <span class="hljs-comment">//遍历的位置</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ComputerCollegeIterator</span><span class="hljs-params">(Department[] departments)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.departments = departments;<br>&#125;<br><br><span class="hljs-comment">//判断是否还有下一个元素</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(position &gt;= departments.length || departments[position] == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>Department department = departments[position];<br>position += <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> department;<br>&#125;<br><br><span class="hljs-comment">//删除的方法，默认空实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//信息工程学院具体实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfoCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">College</span> </span>&#123;<br><br><span class="hljs-comment">//模拟每个学院存储数据的方式集合不一样</span><br>List&lt;Department&gt; departmentList;<br><br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InfoCollege</span><span class="hljs-params">()</span> </span>&#123;<br>departmentList = <span class="hljs-keyword">new</span> ArrayList&lt;Department&gt;();<br>addDepartment(<span class="hljs-string">&quot;信息安全专业&quot;</span>, <span class="hljs-string">&quot; 信息安全专业 &quot;</span>);<br>addDepartment(<span class="hljs-string">&quot;网络安全专业&quot;</span>, <span class="hljs-string">&quot; 网络安全专业 &quot;</span>);<br>addDepartment(<span class="hljs-string">&quot;服务器安全专业&quot;</span>, <span class="hljs-string">&quot; 服务器安全专业 &quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;信息工程学院&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDepartment</span><span class="hljs-params">(String name, String desc)</span> </span>&#123;<br>Department department = <span class="hljs-keyword">new</span> Department(name, desc);<br>departmentList.add(department);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator <span class="hljs-title">createIterator</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> InfoCollegeIterator(departmentList);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//信息工程学院迭代器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfoCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span> </span>&#123;<br><span class="hljs-comment">//不同的迭代器实现不同的遍历方法</span><br><br>List&lt;Department&gt; departmentList; <span class="hljs-comment">// 信息工程学院是以List方式存放系</span><br><span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<span class="hljs-comment">//索引</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InfoCollegeIterator</span><span class="hljs-params">(List&lt;Department&gt; departmentList)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.departmentList = departmentList;<br>&#125;<br><br><span class="hljs-comment">//判断list中还有没有下一个元素</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(index &gt;= departmentList.size() - <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>index += <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> departmentList.get(index);<br>&#125;<br><br><span class="hljs-comment">//空实现remove</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//统一实现打印遍历迭代</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutPutImpl</span> </span>&#123;<br><br><span class="hljs-comment">//学院集合</span><br> <span class="hljs-keyword">private</span> List&lt;College&gt; collegeList;<br><br><span class="hljs-comment">//有参构造实现聚合</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OutPutImpl</span><span class="hljs-params">(List&lt;College&gt; collegeList)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.collegeList = collegeList;<br>&#125;<br><br><span class="hljs-comment">//遍历所有学院,然后调用printDepartment 输出各个学院的系</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printCollege</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//从collegeList 取出所有学院, Java 中的 List 已经实现Iterator</span><br>Iterator&lt;College&gt; iterator = collegeList.iterator();<br><br><span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br><span class="hljs-comment">//取出一个学院</span><br>College college = iterator.next();<br>System.out.println(<span class="hljs-string">&quot;=== &quot;</span>+college.getName() +<span class="hljs-string">&quot;===== &quot;</span> );<br><span class="hljs-comment">//取出学院的迭代器执行迭代方法</span><br>printDepartment(college.createIterator()); <span class="hljs-comment">//得到对应迭代器</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出 学院输出 系</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDepartment</span><span class="hljs-params">(Iterator iterator)</span> </span>&#123;<br><span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>Department d = (Department)iterator.next();<br>System.out.println(d.getName());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端方法public class Client &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建学校(学院集合)</span><br>List&lt;College&gt; collegeList = <span class="hljs-keyword">new</span> ArrayList&lt;College&gt;();<br><br><span class="hljs-comment">//创建计算机学院和大数据学院</span><br>ComputerCollege computerCollege = <span class="hljs-keyword">new</span> ComputerCollege();<br>InfoCollege infoCollege = <span class="hljs-keyword">new</span> InfoCollege();<br><br><span class="hljs-comment">//添加计算机学院和大数据学院</span><br>collegeList.add(computerCollege);<br>collegeList.add(infoCollege);<br><span class="hljs-comment">//统一放到打印实现类实现迭代器遍历</span><br>OutPutImpl outPutImpl = <span class="hljs-keyword">new</span> OutPutImpl(collegeList);<br>outPutImpl.printCollege();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h4><blockquote><p><code>JDK</code>中的<code>ArrayList</code>集合中就使用到了迭代器模式</p><p>List就是聚合接口 <code>ArrayList</code>就是聚合接口实现类 并且实现了一个特有的迭代器 Iteraror</p></blockquote><p><img src="http://www.slx.blue/2021/12/08/java-iterator/iterator02.png" alt="List"></p><h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ol><li>优点<ul><li>提供了一个统一的方法遍历对象，客户不再考虑聚合的类型，使用一种方法就可以遍历对象了。</li><li>隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成</li><li>提供了一种设计思想，就是一个类应该只有一个引起变化的原因(单一职责原则)。在聚合类中，我们吧迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来集合改变的话，只影响到集合对象。而如果便利方式改变的话，只影响到了迭代器。</li><li>当腰展示一组相似对象，或者遍历一组相同对象同时使用，适合使用迭代器模式</li></ul></li><li>缺点<ul><li>每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-day03-AOP</title>
      <link href="/2021/12/07/spring-day03-AOP/"/>
      <url>/2021/12/07/spring-day03-AOP/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-day03"><a href="#spring-day03" class="headerlink" title="spring-day03"></a>spring-day03</h1><h2 id="第一章-AOP面向切面编程"><a href="#第一章-AOP面向切面编程" class="headerlink" title="第一章 AOP面向切面编程"></a>第一章 AOP面向切面编程</h2><h3 id="第一节-AOP的概述"><a href="#第一节-AOP的概述" class="headerlink" title="第一节 AOP的概述"></a>第一节 AOP的概述</h3><h4 id="1-为什么需要AOP"><a href="#1-为什么需要AOP" class="headerlink" title="1. 为什么需要AOP"></a>1. 为什么需要AOP</h4><h5 id="1-1-情景设定"><a href="#1-1-情景设定" class="headerlink" title="1.1 情景设定"></a>1.1 情景设定</h5><h6 id="1-1-1-声明一个计算器接口"><a href="#1-1-1-声明一个计算器接口" class="headerlink" title="1.1.1 声明一个计算器接口"></a>1.1.1 声明一个计算器接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-1-2-给接口声明一个纯净版实现类"><a href="#1-1-2-给接口声明一个纯净版实现类" class="headerlink" title="1.1.2 给接口声明一个纯净版实现类"></a>1.1.2 给接口声明一个纯净版实现类</h6><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_001.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.proxy.imp;<br>    <br><span class="hljs-keyword">import</span> com.atguigu.proxy.api.Calculator;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorPureImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <br>        <span class="hljs-keyword">int</span> result = i + j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <br>        <span class="hljs-keyword">int</span> result = i - j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <br>        <span class="hljs-keyword">int</span> result = i * j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <br>        <span class="hljs-keyword">int</span> result = i / j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-1-3-需求"><a href="#1-1-3-需求" class="headerlink" title="1.1.3 需求"></a>1.1.3 需求</h6><p>在计算器的每个方法执行前后加入日志打印:</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_002.png"></p><h6 id="1-1-4-实现方案探讨"><a href="#1-1-4-实现方案探讨" class="headerlink" title="1.1.4 实现方案探讨"></a>1.1.4 实现方案探讨</h6><p>方案一: 在每个方法的前后都加上日志打印的代码</p><p>方案二: 创建一个工具类，将日志打印的代码写在工具类中，然后在每个方法的前后直接调用工具类中的方法打印日志</p><p>方案三: 创建一个父类，在父类的方法中打印日志，子类重写父类的方法(对目前功能不适用)</p><p><strong>方案四: 动态代理</strong></p><p><strong>方案五: AOP</strong></p><h4 id="2-代理模式"><a href="#2-代理模式" class="headerlink" title="2. 代理模式"></a>2. 代理模式</h4><h5 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h5><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。 </p><p>未经过代理的情况:</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_003.png"></p><p>使用了代理模式的情况:</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_004.png"></p><h5 id="2-2-相关术语"><a href="#2-2-相关术语" class="headerlink" title="2.2 相关术语"></a>2.2 相关术语</h5><ol><li>代理: 又称之为代理者，用于将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法 </li><li>目标: 又称之为被代理者，用于执行核心逻辑，并且将代理者的非核心逻辑代码<strong>套用</strong>在目标类、对象、方法上</li></ol><h5 id="2-3-静态代理"><a href="#2-3-静态代理" class="headerlink" title="2.3 静态代理"></a>2.3 静态代理</h5><h6 id="2-3-1-创建静态代理类："><a href="#2-3-1-创建静态代理类：" class="headerlink" title="2.3.1 创建静态代理类："></a>2.3.1 创建静态代理类：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>    <span class="hljs-comment">// 将被代理的目标对象声明为成员变量</span><br>    <span class="hljs-keyword">private</span> Calculator target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CalculatorStaticProxy</span><span class="hljs-params">(Calculator target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 附加功能由代理类中的代理方法来实现</span><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br><br>        <span class="hljs-comment">// 通过目标对象来实现核心业务逻辑</span><br>        <span class="hljs-keyword">int</span> addResult = target.add(i, j);<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);<br><br>        <span class="hljs-keyword">return</span> addResult;<br>    &#125;<br>    ……<br></code></pre></td></tr></table></figure><h6 id="2-3-2-问题思考"><a href="#2-3-2-问题思考" class="headerlink" title="2.3.2 问题思考"></a>2.3.2 问题思考</h6><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p><h5 id="2-4-动态代理"><a href="#2-4-动态代理" class="headerlink" title="2.4 动态代理"></a>2.4 动态代理</h5><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_005.png"></p><h6 id="2-4-1-创建生产代理对象的工厂类"><a href="#2-4-1-创建生产代理对象的工厂类" class="headerlink" title="2.4.1 创建生产代理对象的工厂类"></a>2.4.1 创建生产代理对象的工厂类</h6><p>JDK本身就支持动态代理，这是反射技术的一部分。下面我们还是创建一个代理类（生产代理对象的工厂类）： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.factory;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogDynamicProxyFactory</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> T target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LogDynamicProxyFactory</span><span class="hljs-params">(T target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//使用JDK的动态代理技术</span><br>        <span class="hljs-comment">//1. 获取被代理者的字节码对象</span><br>        Class&lt;?&gt; clazz = target.getClass();<br>        <span class="hljs-comment">//2. 使用JDK中的Proxy.newProxyInstance(classLoader, interfaces, new InvocationHandler()方法创建动态代理对象</span><br>        <span class="hljs-comment">// 该方法的返回值就是动态代理对象</span><br>        <span class="hljs-comment">//2.1 类加载器对象</span><br>        ClassLoader classLoader = clazz.getClassLoader();<br>        <span class="hljs-comment">//2.2 需要代理的接口:如果明确要代理什么接口，那么就可以直接写new Class[]&#123;要代理的接口.class&#125;</span><br>        <span class="hljs-comment">//如果不明确要代理什么接口，那么就获取被代理者实现的所有接口: 被代理者的字节码对象.getInterfaces();</span><br>        Class&lt;?&gt;[] interfaces = clazz.getInterfaces();<br>        <span class="hljs-comment">//2.3 InvocationHandler接口的对象: 使用匿名内部类</span><br>        T t = (T) Proxy.newProxyInstance(classLoader, interfaces, <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                <span class="hljs-comment">//invoke()方法:该方法会在代理对象调用任意方法的时候执行</span><br>                <span class="hljs-comment">//所以我们就在这个方法中编写代理逻辑</span><br>                <span class="hljs-comment">//参数一:proxy对象表示代理对象本身</span><br>                <span class="hljs-comment">//参数二:method表示代理对象所调用的方法本身</span><br>                <span class="hljs-comment">//参数三:args表示代理对像所调用的方法中传入的参数</span><br><br>                <span class="hljs-comment">//编写代理逻辑:我的想法是在执行被代理对象的add()、sub()、mul()、div()这四个方法的前后添加日志打印</span><br>                <span class="hljs-comment">//判断方法：是否是这四个方法</span><br>                String proxyMethodName = method.getName();<br>                <span class="hljs-comment">//如果是: 则添加前后日志打印</span><br>                <span class="hljs-keyword">if</span> (proxyMethodName.equals(<span class="hljs-string">&quot;add&quot;</span>) || proxyMethodName.equals(<span class="hljs-string">&quot;sub&quot;</span>) || proxyMethodName.equals(<span class="hljs-string">&quot;mul&quot;</span>) || proxyMethodName.equals(<span class="hljs-string">&quot;div&quot;</span>)) &#123;<br>                    <span class="hljs-comment">//核心逻辑之前打印日志</span><br>                    System.out.println(<span class="hljs-string">&quot;[日志] &quot;</span>+proxyMethodName+<span class="hljs-string">&quot;方法开始了，参数是：&quot;</span> + args[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;,&quot;</span> + args[<span class="hljs-number">1</span>]);<br>                    <span class="hljs-comment">//执行被代理者的当前方法</span><br>                    Object result = method.invoke(target, args);<br>                    <span class="hljs-comment">//核心逻辑之后打印日志</span><br>                    System.out.println(<span class="hljs-string">&quot;[日志] &quot;</span>+proxyMethodName+<span class="hljs-string">&quot; 方法结束了，结果是：&quot;</span> + result);<br>                    <span class="hljs-comment">//返回执行结果</span><br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>                <span class="hljs-comment">//如果不是: 就按照被代理者原本的方法执行</span><br>                <span class="hljs-keyword">return</span> method.invoke(target,args);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-4-2-测试"><a href="#2-4-2-测试" class="headerlink" title="2.4.2 测试"></a>2.4.2 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDynamicProxy</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建被代理者</span><br>    Calculator calculator = <span class="hljs-keyword">new</span> CalculatorPureImpl();<br>    <span class="hljs-comment">//1. 创建动态代理工厂类的对象</span><br>    LogDynamicProxyFactory&lt;Calculator&gt; proxyFactory = <span class="hljs-keyword">new</span> LogDynamicProxyFactory&lt;Calculator&gt;(calculator);<br>    <span class="hljs-comment">//2. 使用工厂对象创建动态代理对象</span><br>    Calculator calculatorProxy = proxyFactory.getProxy();<br>    <span class="hljs-comment">//3. 使用代理对象调用方法</span><br>    System.out.println(calculatorProxy.sub(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-AOP的相关概念"><a href="#3-AOP的相关概念" class="headerlink" title="3. AOP的相关概念"></a>3. AOP的相关概念</h4><h5 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h5><p>AOP：Aspect Oriented Programming面向切面编程 </p><h5 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h5><ol><li>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</li><li>代码增强：把抽取出来的特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</li></ol><h5 id="3-3-AOP的核心思路"><a href="#3-3-AOP的核心思路" class="headerlink" title="3.3 AOP的核心思路"></a>3.3 AOP的核心思路</h5><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_006.png"></p><h5 id="3-4-AOP的相关术语"><a href="#3-4-AOP的相关术语" class="headerlink" title="3.4 AOP的相关术语"></a>3.4 AOP的相关术语</h5><h6 id="3-4-1-横切关注点"><a href="#3-4-1-横切关注点" class="headerlink" title="3.4.1 横切关注点"></a>3.4.1 横切关注点</h6><p>横切关注点是从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_007.png"></p><h6 id="3-4-2-通知"><a href="#3-4-2-通知" class="headerlink" title="3.4.2 通知"></a>3.4.2 通知</h6><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_008.png"></p><h6 id="3-4-3-切面"><a href="#3-4-3-切面" class="headerlink" title="3.4.3 切面"></a>3.4.3 切面</h6><p>封装通知方法的类。 </p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_009.png"></p><h6 id="3-4-4-目标"><a href="#3-4-4-目标" class="headerlink" title="3.4.4 目标"></a>3.4.4 目标</h6><p>被代理的目标对象。 </p><h6 id="3-4-5-代理"><a href="#3-4-5-代理" class="headerlink" title="3.4.5 代理"></a>3.4.5 代理</h6><p>向目标对象应用通知之后创建的代理对象。</p><h6 id="3-4-6-连接点"><a href="#3-4-6-连接点" class="headerlink" title="3.4.6 连接点"></a>3.4.6 连接点</h6><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。连接点其实就是各个方法中可以被增强或修改的点</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_010.png"></p><h6 id="3-4-7-切入点"><a href="#3-4-7-切入点" class="headerlink" title="3.4.7 切入点"></a>3.4.7 切入点</h6><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。而切入点指的则是方法中真正要去配置增强或者配置修改的地方</p><h3 id="第二节-基于注解方式配置AOP"><a href="#第二节-基于注解方式配置AOP" class="headerlink" title="第二节 基于注解方式配置AOP"></a>第二节 基于注解方式配置AOP</h3><h4 id="1-基于注解的AOP用到的技术"><a href="#1-基于注解的AOP用到的技术" class="headerlink" title="1. 基于注解的AOP用到的技术"></a>1. 基于注解的AOP用到的技术</h4><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_011.png" style="zoom:80%;"><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>。</li><li>cglib：通过<strong>继承被代理的目标类</strong>实现代理，所以不需要目标类实现接口。</li><li>AspectJ：本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><h4 id="2-实现基于注解的AOP"><a href="#2-实现基于注解的AOP" class="headerlink" title="2. 实现基于注解的AOP"></a>2. 实现基于注解的AOP</h4><h5 id="2-1-加入依赖"><a href="#2-1-加入依赖" class="headerlink" title="2.1 加入依赖"></a>2.1 加入依赖</h5><p>在IOC所需依赖基础上再加入下面依赖即可： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring整合Junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-准备被代理的目标资源"><a href="#2-2-准备被代理的目标资源" class="headerlink" title="2.2 准备被代理的目标资源"></a>2.2 准备被代理的目标资源</h5><h6 id="2-2-1-接口"><a href="#2-2-1-接口" class="headerlink" title="2.2.1 接口"></a>2.2.1 接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2-接口的实现类"><a href="#2-2-2-接口的实现类" class="headerlink" title="2.2.2 接口的实现类"></a>2.2.2 接口的实现类</h6><p>在Spring环境下工作，所有的一切都必须放在IOC容器中。现在接口的实现类是AOP要代理的目标类，所以它也必须放入IOC容器。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorPureImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = i + j;<br>        <span class="hljs-comment">//int num = 10 / 0;</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = i - j;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> result = i * j;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> result = i / j;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-3-创建切面类"><a href="#2-2-3-创建切面类" class="headerlink" title="2.2.3 创建切面类"></a>2.2.3 创建切面类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 切面:</span><br><span class="hljs-comment"> *  1. 必须的添加Aspect注解</span><br><span class="hljs-comment"> *  2. 切面类必须进行IOC</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 通知:</span><br><span class="hljs-comment"> * 1. 确定通知类型:Before、AfterReturning、AfterThrowing、After、Around</span><br><span class="hljs-comment"> *    1.1 Before:前置通知，它是执行在目标方法之前</span><br><span class="hljs-comment"> *    1.2 AfterReturning: 返回通知，它是执行在目标方法return之后(当然如果目标方法没有返回值的话就是在它正常结束之后)</span><br><span class="hljs-comment"> *    1.3 AfterThrowing: 异常通知，它是执行在目标方法异常结束之后</span><br><span class="hljs-comment"> *    1.4 After: 后置通知,它是执行在目标方法结束之后(无论你是异常结束还是正常结束都会执行)</span><br><span class="hljs-comment"> *    1.5 Around: 环绕通知,它可以在切入点的前、后、出现异常之后、finally中都执行通知，它可以用来统计各个方法的执行时间</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. 确定通知要做用的位置(切入点):用切入点表达式描述切入点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 切入点: 使用切入点表达式来声明通知需要作用的位置</span><br><span class="hljs-comment"> * 1. 重用切入点:</span><br><span class="hljs-comment"> *    1.1 声明切入点: 编写一个public void 方法，该方法的方法体为空，在方法上添加Pointcut注解用于声明切入点</span><br><span class="hljs-comment"> *    1.2 引用切入点: 在需要使用这个切入点的通知注解上引用</span><br><span class="hljs-comment"> *        1.2.1 如果切入点和通知在同一个类中，通过 方法名()引用</span><br><span class="hljs-comment"> *        1.2.2 如果切入点和通知不在同一个类中，通过 类的全限定名.方法名() 引用</span><br><span class="hljs-comment"> * 2. 怎么编写切入点表达式:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;com.atguigu.aspect.AtguiguPointcut.pt1()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br>        <span class="hljs-comment">//在前置通知中获取目标/切入点方法的名字以及参数</span><br>        <span class="hljs-comment">//joinPoint就是目标/切入点:我们就可以通过JoinPoint获取切入点的信息</span><br>        <span class="hljs-comment">//拿到目标方法的参数</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-comment">//拿到目标方法的签名信息</span><br>        Signature signature = joinPoint.getSignature();<br>        <span class="hljs-comment">//从目标方法的签名信息中获取方法名</span><br>        String methodName = signature.getName();<br>        System.out.println(<span class="hljs-string">&quot;[日志] &quot;</span>+methodName+<span class="hljs-string">&quot; 方法开始了，参数是：&quot;</span> + args[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;,&quot;</span> + args[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;com.atguigu.aspect.AtguiguPointcut.pt1().pt1()&quot;,returning = &quot;result&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogAfterReturning</span><span class="hljs-params">(JoinPoint joinPoint,<span class="hljs-keyword">int</span> result)</span></span>&#123;<br>        String methodName = joinPoint.getSignature().getName();<br>        <span class="hljs-comment">//怎么在返回通知中获取到切入点的返回值:</span><br>        <span class="hljs-comment">//1. 在通知方法中声明一个和返回值同类型的参数来接收目标方法的返回值</span><br>        <span class="hljs-comment">//2. 在AfterReturning注解中使用returning属性来指定由哪个参数接收返回值</span><br>        System.out.println(<span class="hljs-string">&quot;[日志] &quot;</span>+methodName+<span class="hljs-string">&quot; 方法结束了，结果是：&quot;</span> + result);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;com.atguigu.aspect.AtguiguPointcut.pt1().pt1()&quot;,throwing = &quot;throwable&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogAfterThrowing</span><span class="hljs-params">(JoinPoint joinPoint,Throwable throwable)</span></span>&#123;<br>        String methodName = joinPoint.getSignature().getName();<br>        <span class="hljs-comment">//怎么在异常通知中获取到异常信息:</span><br>        <span class="hljs-comment">//1. 在通知方法中声明一个Throwable类型的参数，用于接收异常信息</span><br>        <span class="hljs-comment">//2. 在AfterThrowing注解中添加throwing属性指定由哪个参数接收异常信息</span><br>        System.out.println(<span class="hljs-string">&quot;[日志] &quot;</span>+methodName+<span class="hljs-string">&quot; 方法出现了异常,异常信息是:&quot;</span>+throwable.getStackTrace());<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;com.atguigu.aspect.AtguiguPointcut.pt1().pt1()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogAfter</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br>        String methodName = joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;[日志] &quot;</span>+methodName+<span class="hljs-string">&quot; 方法结束了&quot;</span>);<br>    &#125;<br><br>   <span class="hljs-comment">/* @Around(&quot;com.atguigu.aspect.AtguiguPointcut.pt1()&quot;)</span><br><span class="hljs-comment">    public Object printLogAround(ProceedingJoinPoint proceedingJoinPoint)&#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            //ProceedingJoinPoint:表示目标方法</span><br><span class="hljs-comment">            //在环绕通知中能够拿到切入点，所以就能够有它自己调用切入点</span><br><span class="hljs-comment">            //我们自己调用切入点的时候就可以改变传给切入点的参数</span><br><span class="hljs-comment">            System.out.println(&quot;环绕通知中执行切入点之前...&quot;);</span><br><span class="hljs-comment">            Object[] args = new Object[]&#123;4,5&#125;;</span><br><span class="hljs-comment">            Object result = proceedingJoinPoint.proceed(args);</span><br><span class="hljs-comment">            System.out.println(&quot;环绕通知中执行切入点之后...&quot;);</span><br><span class="hljs-comment">            //因为我们能够自己拿到切入点调用之后的结果，所以我们可以改变这个结果再将结果返回出去</span><br><span class="hljs-comment">            result = 10000;</span><br><span class="hljs-comment">            return 10000;</span><br><span class="hljs-comment">        &#125; catch (Throwable throwable) &#123;</span><br><span class="hljs-comment">            throwable.printStackTrace();</span><br><span class="hljs-comment">            //表示执行切入点的时候出现了异常</span><br><span class="hljs-comment">            System.out.println(&quot;出现了异常，环绕通知中处理异常...&quot;);</span><br><span class="hljs-comment">            return 0;</span><br><span class="hljs-comment">        &#125;finally &#123;</span><br><span class="hljs-comment">            System.out.println(&quot;环绕通知中finally.....&quot;);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>   <span class="hljs-meta">@Around(&quot;com.atguigu.aspect.AtguiguPointcut.pt1()&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">printLogAround</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;<br>       <span class="hljs-comment">//在目标方法执行之前获取毫秒数</span><br>       <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>       <span class="hljs-comment">//执行目标方法</span><br>       <span class="hljs-keyword">try</span> &#123;<br>           Object result = proceedingJoinPoint.proceed();<br>           <span class="hljs-keyword">return</span> result;<br>       &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>           throwable.printStackTrace();<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwable.getMessage());<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//在目标方法执行结束后统计时长</span><br>           <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>           System.out.println(endTime - startTime);<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-4-创建Spring的配置文件"><a href="#2-2-4-创建Spring的配置文件" class="headerlink" title="2.2.4 创建Spring的配置文件"></a>2.2.4 创建Spring的配置文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--包扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--允许注解AOP--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-2-5-测试"><a href="#2-2-5-测试" class="headerlink" title="2.2.5 测试"></a>2.2.5 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.Calculator;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAop</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Calculator calculator;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//调用CalculatorPureImpl对象的add()方法</span><br>        System.out.println(<span class="hljs-string">&quot;返回值是:&quot;</span>+calculator.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印效果如下：</p><blockquote><p>[AOP前置通知] 方法开始了 方法内部 result = 12 [AOP返回通知] </p><p>方法成功返回了 [AOP后置通知] 方法最终结束了 方法外部 add = 12</p></blockquote><h5 id="2-3-通知执行顺序"><a href="#2-3-通知执行顺序" class="headerlink" title="2.3 通知执行顺序"></a>2.3 通知执行顺序</h5><ul><li>Spring版本5.3.x以前：<ul><li>前置通知</li><li>目标操作</li><li>后置通知</li><li>返回通知或异常通知</li></ul></li><li>Spring版本5.3.x以后：<ul><li>前置通知</li><li>目标操作</li><li>返回通知或异常通知</li><li>后置通知</li></ul></li></ul><h4 id="3-在通知内部获取细节信息"><a href="#3-在通知内部获取细节信息" class="headerlink" title="3. 在通知内部获取细节信息"></a>3. 在通知内部获取细节信息</h4><h5 id="3-1-JoinPoint接口"><a href="#3-1-JoinPoint接口" class="headerlink" title="3.1 JoinPoint接口"></a>3.1 JoinPoint接口</h5><p>org.aspectj.lang.JoinPoint</p><ul><li>要点1：JoinPoint接口通过getSignature()方法获取目标方法的签名</li><li>要点2：通过目标方法签名对象获取方法名</li><li>要点3：通过JoinPoint对象获取外界调用目标方法时传入的实参列表组成的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @Before注解标记前置通知方法</span><br><span class="hljs-comment">// value属性：切入点表达式，告诉Spring当前通知方法要套用到哪个目标方法上</span><br><span class="hljs-comment">// 在前置通知方法形参位置声明一个JoinPoint类型的参数，Spring就会将这个对象传入</span><br><span class="hljs-comment">// 根据JoinPoint对象就可以获取目标方法名称、实际参数列表</span><br><span class="hljs-meta">@Before(value = &quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogBeforeCore</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.通过JoinPoint对象获取目标方法签名对象</span><br>    <span class="hljs-comment">// 方法的签名：一个方法的全部声明信息</span><br>    Signature signature = joinPoint.getSignature();<br>    <br>    <span class="hljs-comment">// 2.通过方法的签名对象获取目标方法的详细信息</span><br>    String methodName = signature.getName();<br>    System.out.println(<span class="hljs-string">&quot;methodName = &quot;</span> + methodName);<br>    <br>    <span class="hljs-keyword">int</span> modifiers = signature.getModifiers();<br>    System.out.println(<span class="hljs-string">&quot;modifiers = &quot;</span> + modifiers);<br>    <br>    String declaringTypeName = signature.getDeclaringTypeName();<br>    System.out.println(<span class="hljs-string">&quot;declaringTypeName = &quot;</span> + declaringTypeName);<br>    <br>    <span class="hljs-comment">// 3.通过JoinPoint对象获取外界调用目标方法时传入的实参列表</span><br>    Object[] args = joinPoint.getArgs();<br>    <br>    <span class="hljs-comment">// 4.由于数组直接打印看不到具体数据，所以转换为List集合</span><br>    List&lt;Object&gt; argList = Arrays.asList(args);<br>    <br>    System.out.println(<span class="hljs-string">&quot;[AOP前置通知] &quot;</span> + methodName + <span class="hljs-string">&quot;方法开始了，参数列表：&quot;</span> + argList);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要获取方法签名、传入的实参等信息时，可以在通知方法声明JoinPoint类型的形参。 </p><h5 id="3-2-获取目标方法的方法返回值"><a href="#3-2-获取目标方法的方法返回值" class="headerlink" title="3.2 获取目标方法的方法返回值"></a>3.2 获取目标方法的方法返回值</h5><p>只有在AfterReturning返回通知中才能够获取目标方法的返回值</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_012.png"></p><p>通过@AfterReturning注解的returning属性获取目标方法的返回值 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @AfterReturning注解标记返回通知方法</span><br><span class="hljs-comment">// 在返回通知中获取目标方法返回值分两步：</span><br><span class="hljs-comment">// 第一步：在@AfterReturning注解中通过returning属性设置一个名称</span><br><span class="hljs-comment">// 第二步：使用returning属性设置的名称在通知方法中声明一个对应的形参</span><br><span class="hljs-meta">@AfterReturning(</span><br><span class="hljs-meta">        value = &quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int))&quot;,</span><br><span class="hljs-meta">        returning = &quot;targetMethodReturnValue&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogAfterCoreSuccess</span><span class="hljs-params">(JoinPoint joinPoint, Object targetMethodReturnValue)</span> </span>&#123;<br>    <br>    String methodName = joinPoint.getSignature().getName();<br>    <br>    System.out.println(<span class="hljs-string">&quot;[AOP返回通知] &quot;</span>+methodName+<span class="hljs-string">&quot;方法成功结束了，返回值是：&quot;</span> + targetMethodReturnValue);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-获取目标方法抛出的异常"><a href="#3-3-获取目标方法抛出的异常" class="headerlink" title="3.3 获取目标方法抛出的异常"></a>3.3 获取目标方法抛出的异常</h5><p>只有在 AfterThrowing 异常通知中才能获取到目标方法抛出的异常</p><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_013.png"></p><p>通过@AfterThrowing注解的throwing属性获取目标方法抛出的异常对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @AfterThrowing注解标记异常通知方法</span><br><span class="hljs-comment">// 在异常通知中获取目标方法抛出的异常分两步：</span><br><span class="hljs-comment">// 第一步：在@AfterThrowing注解中声明一个throwing属性设定形参名称</span><br><span class="hljs-comment">// 第二步：使用throwing属性指定的名称在通知方法声明形参，Spring会将目标方法抛出的异常对象从这里传给我们</span><br><span class="hljs-meta">@AfterThrowing(</span><br><span class="hljs-meta">        value = &quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int))&quot;,</span><br><span class="hljs-meta">        throwing = &quot;targetMethodException&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogAfterCoreException</span><span class="hljs-params">(JoinPoint joinPoint, Throwable targetMethodException)</span> </span>&#123;<br>    <br>    String methodName = joinPoint.getSignature().getName();<br>    <br>    System.out.println(<span class="hljs-string">&quot;[AOP异常通知] &quot;</span>+methodName+<span class="hljs-string">&quot;方法抛异常了，异常类型是：&quot;</span> + targetMethodException.getClass().getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>打印效果局部如下：</p><blockquote><p>[AOP异常通知] div方法抛异常了，异常类型是：java.lang.ArithmeticException</p><p>java.lang.ArithmeticException: / by zero</p><p>at com.atguigu.aop.imp.CalculatorPureImpl.div(CalculatorPureImpl.java:42) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)</p></blockquote><h4 id="4-切入点"><a href="#4-切入点" class="headerlink" title="4. 切入点"></a>4. 切入点</h4><h5 id="4-1-重用切入点"><a href="#4-1-重用切入点" class="headerlink" title="4.1 重用切入点"></a>4.1 重用切入点</h5><h6 id="4-1-1-声明切入点"><a href="#4-1-1-声明切入点" class="headerlink" title="4.1.1 声明切入点"></a>4.1.1 声明切入点</h6><p>在一处声明切入点表达式之后，其他有需要的地方引用这个切入点表达式。易于维护，一处修改，处处生效。声明方式如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(int com.atguigu.component.CalculatorPureImpl.*(int,int))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calculatorPointCut</span><span class="hljs-params">()</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-1-2-同一个类内部引用切入点"><a href="#4-1-2-同一个类内部引用切入点" class="headerlink" title="4.1.2 同一个类内部引用切入点"></a>4.1.2 同一个类内部引用切入点</h6><p>通过方法名引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;calculatorPointCut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogBeforeCore</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br></code></pre></td></tr></table></figure><h6 id="4-1-3-在其它类中引用切入点"><a href="#4-1-3-在其它类中引用切入点" class="headerlink" title="4.1.3 在其它类中引用切入点"></a>4.1.3 在其它类中引用切入点</h6><p>通过全限定名引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;com.atguigu.pointcut.AtguiguPointCut.calculatorPointCut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLogBeforeCore</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h6 id="4-1-4-对项目中的所有切入点进行统一管理"><a href="#4-1-4-对项目中的所有切入点进行统一管理" class="headerlink" title="4.1.4 对项目中的所有切入点进行统一管理"></a>4.1.4 对项目中的所有切入点进行统一管理</h6><p>而作为存放切入点表达式的类，可以把整个项目中所有切入点表达式全部集中过来，便于统一管理： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pointcut;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguPointCut</span> </span>&#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(int com.atguigu.component.CalculatorPureImpl.*(int,int))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calculatorPointCut</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-切入点表达式语法"><a href="#4-2-切入点表达式语法" class="headerlink" title="4.2 切入点表达式语法"></a>4.2 切入点表达式语法</h5><h6 id="4-2-1-切入点表达式的作用"><a href="#4-2-1-切入点表达式的作用" class="headerlink" title="4.2.1 切入点表达式的作用"></a>4.2.1 切入点表达式的作用</h6><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_014.png"><br>切入点表达式的作用是用于描述将代理逻辑套用在哪些目标方法上</p><h6 id="4-2-2-语法细节"><a href="#4-2-2-语法细节" class="headerlink" title="4.2.2 语法细节"></a>4.2.2 语法细节</h6><ul><li>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</li><li>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。<ul><li>例如：*.Hello匹配com.Hello，不匹配com.atguigu.Hello</li></ul></li><li>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</li><li>在类名的部分，类名部分整体用*号代替，表示类名任意</li><li>在类名的部分，可以使用*号代替类名的一部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">*Service<br></code></pre></td></tr></table></figure><p>上面例子表示匹配所有名称以Service结尾的类或接口 </p><ul><li>在方法名部分，可以使用*号表示方法名任意</li><li>在方法名部分，可以使用*号代替方法名的一部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">*Operation<br></code></pre></td></tr></table></figure><p>上面例子表示匹配所有方法名以Operation结尾的方法 </p><ul><li>在方法参数列表部分，使用(..)表示参数列表任意</li><li>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</li><li>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的<ul><li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li></ul></li><li>在方法返回值部分，如果想要明确指定一个返回值类型，那么权限修饰符不能使用 *</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> *..*Service.*(.., <span class="hljs-keyword">int</span>))<br></code></pre></td></tr></table></figure><p>上面例子是对的，下面例子是错的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* <span class="hljs-keyword">int</span> *..*Service.*(.., <span class="hljs-keyword">int</span>))<br></code></pre></td></tr></table></figure><p>但是public *表示权限修饰符明确，返回值任意是可以的。</p><ul><li>对于execution()表达式整体可以使用三个逻辑运算符号<ul><li>execution() || execution()表示满足两个execution()中的任何一个即可</li><li>execution() &amp;&amp; execution()表示两个execution()表达式必须都满足</li><li>!execution()表示不满足表达式的其他方法</li></ul></li></ul><h6 id="4-2-3-总结"><a href="#4-2-3-总结" class="headerlink" title="4.2.3 总结"></a>4.2.3 总结</h6><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_015.png"></p><h4 id="5-环绕通知"><a href="#5-环绕通知" class="headerlink" title="5. 环绕通知"></a>5. 环绕通知</h4><p>环绕通知对应整个try…catch…finally结构，可以在目标方法的各个部位进行套用代理逻辑，它能够真正介入并改变目标方法的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;com.atguigu.pointcut.AtguiguPointCut.calculatorPointCut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启事务....&quot;</span>);<br>        <span class="hljs-comment">//环绕通知是可以介入到目标方法执行之前、返回值之前、出现异常之后、finally中等等各个部位执行</span><br><br>        <span class="hljs-comment">//环绕通知可以在目标方法执行之前做一些事情: 就相当于前置通知</span><br>        <span class="hljs-comment">//获取目标方法的参数</span><br>        Object[] args = proceedingJoinPoint.getArgs();<br>        <span class="hljs-comment">//改变目标方法的参数: 例如要做一些统一的参数的处理逻辑</span><br>        <span class="hljs-comment">//args[0] = 2;</span><br>        <span class="hljs-comment">//args[1] = 4;</span><br><br>        <span class="hljs-comment">//这句代码就是执行目标方法:也就是在这里开始你就能介入目标方法</span><br>        Object result = proceedingJoinPoint.proceed(args);<br>        <span class="hljs-comment">//改变目标方法的返回值:</span><br>        <span class="hljs-comment">//环绕通知可以在目标方法执行成功之后，做一些事情: 就相当于返回通知</span><br>        <span class="hljs-comment">//return 1000;</span><br><br>        System.out.println(<span class="hljs-string">&quot;提交事务...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>        throwable.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;回滚事务...&quot;</span>);<br>        <span class="hljs-comment">//环绕通知可以在目标方法执行出现异常之后，做一些事情: 就相当于异常通知</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwable.getMessage());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//环绕通知可以在目标方法执行成功或者出现异常之后，做一些事情: 就相当于后置通知</span><br>        System.out.println(<span class="hljs-string">&quot;将连接恢复默认状态，归还连接...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-切面的优先级-了解"><a href="#6-切面的优先级-了解" class="headerlink" title="6. 切面的优先级(了解)"></a>6. 切面的优先级(了解)</h4><h5 id="6-1-优先级的规则"><a href="#6-1-优先级的规则" class="headerlink" title="6.1 优先级的规则"></a>6.1 优先级的规则</h5><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_016.png" style="zoom:67%;"><h5 id="6-2-实际意义"><a href="#6-2-实际意义" class="headerlink" title="6.2 实际意义"></a>6.2 实际意义</h5><p>实际开发时，如果有多个切面嵌套的情况，要慎重考虑。例如：如果事务切面优先级高，那么在缓存中命中数据的情况下，事务切面的操作都浪费了。 </p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_017.png" style="zoom:67%;"><p>此时应该将缓存切面的优先级提高，在事务操作之前先检查缓存中是否存在目标数据。 </p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_018.png" style="zoom:67%;"><h4 id="7-CGLIB的动态代理"><a href="#7-CGLIB的动态代理" class="headerlink" title="7. CGLIB的动态代理"></a>7. CGLIB的动态代理</h4><h5 id="7-1-动态代理的分类"><a href="#7-1-动态代理的分类" class="headerlink" title="7.1 动态代理的分类"></a>7.1 动态代理的分类</h5><p>动态代理分成两种:</p><p>第一种是JDK内置的动态代理，这种动态代理需要被代理者实现接口，如果被代理者没有实现接口，那么则无法使用JDK的动态代理</p><p>第二种是CGLIB的动态代理，在被代理类没有实现任何接口的情况下，Spring会自动使用cglib技术实现代理。</p><h5 id="7-2-Debug查看"><a href="#7-2-Debug查看" class="headerlink" title="7.2 Debug查看"></a>7.2 Debug查看</h5><h6 id="7-2-1-没有实现接口情况"><a href="#7-2-1-没有实现接口情况" class="headerlink" title="7.2.1 没有实现接口情况"></a>7.2.1 没有实现接口情况</h6><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_019.png"></p><h6 id="7-2-2-有实现接口的情况"><a href="#7-2-2-有实现接口的情况" class="headerlink" title="7.2.2 有实现接口的情况"></a>7.2.2 有实现接口的情况</h6><p><img src="http://www.slx.blue/2021/12/07/spring-day03-AOP/tu_020.png"></p><h5 id="7-3-Spring中到底使用哪种动态代理"><a href="#7-3-Spring中到底使用哪种动态代理" class="headerlink" title="7.3 Spring中到底使用哪种动态代理"></a>7.3 Spring中到底使用哪种动态代理</h5><p>如果要创建代理对象的类实现了接口，那么就使用JDK的动态代理；如果要创建代理对象的类没有实现接口，那么就使用CGLIB的动态代理</p><h3 id="第三节-基于XML方式配置AOP"><a href="#第三节-基于XML方式配置AOP" class="headerlink" title="第三节 基于XML方式配置AOP"></a>第三节 基于XML方式配置AOP</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><h5 id="1-1-加入依赖"><a href="#1-1-加入依赖" class="headerlink" title="1.1 加入依赖"></a>1.1 加入依赖</h5><p>和基于注解的AOP时一样。</p><h5 id="1-2-准备代码"><a href="#1-2-准备代码" class="headerlink" title="1.2 准备代码"></a>1.2 准备代码</h5><p>把基于注解的Module复制一份，修改Module名，并导入到工程中，然后去除所有AOP注解。</p><h4 id="2-配置Spring配置文件"><a href="#2-配置Spring配置文件" class="headerlink" title="2. 配置Spring配置文件"></a>2. 配置Spring配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--包扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用xml方式配置AOP:</span><br><span class="hljs-comment">            1. 切面: 封装非核心逻辑的那个类，非核心逻辑就是封装在切面的方法中</span><br><span class="hljs-comment">            2. 通知: 将非核心逻辑套在核心逻辑上进行执行</span><br><span class="hljs-comment">            3. 切入点: 核心逻辑</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            1. 切面: ref属性就是指定作为切面的那个对象的id，order属性表示切面的优先级</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logAspect&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--2. 通知--&gt;</span><br>            <span class="hljs-comment">&lt;!--配置前置通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLogBeforeCore&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;calculatorPoint&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--配置返回通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLogAfterReturning&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;calculatorPoint&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;result&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--配置异常通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLogAfterThrowing&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;calculatorPoint&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;throwable&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--配置后置通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLogFinallyEnd&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;calculatorPoint&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--配置环绕通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;printLogAround&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;calculatorPoint&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--3. 切入点--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;calculatorPoint&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atguigu.component.CalculatorPureImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.Calculator;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAop</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Calculator calculator;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//调用CalculatorPureImpl对象的add()方法</span><br>        System.out.println(<span class="hljs-string">&quot;调用完目标方法之后获取返回值是:&quot;</span>+calculator.sub(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-AOP总结"><a href="#第四节-AOP总结" class="headerlink" title="第四节 AOP总结"></a>第四节 AOP总结</h3><p>目标:</p><ol><li><p>将目标方法中的非核心业务抽取出来制作成通知</p></li><li><p>在调用目标方法的核心业务的时候，自动将非核心业务套在核心业务上执行</p></li></ol><p>实现目标:</p><ol><li><p>具备一双慧眼:能识别出来哪里可以抽取</p></li><li><p>准备一个切面类:<br>  2.1 IOC<br>  2.2 让它成为切面类</p></li><li><p>将抽取出来的代码封装成方法，方法放在切面类中</p></li><li><p>放切面类中的方法成为通知</p><ol><li>前置通知: Before</li><li>返回通知:AfterReturning</li><li>异常通知:AfterThrowing</li><li>后置通知:After</li><li>环绕通知Around</li></ol></li><li><p>指定通知的作用位置(切入点): 就是引用切入点</p><ol><li>如果切入点和和通知在同一个类中：根据方法名引用</li><li>如果切入点跟通知不在同一个类中: 根据类的全限定名.方法名来引用</li></ol></li><li><p>声明切入点以及切入点的语法</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式-代理模式</title>
      <link href="/2021/12/06/java-Proxy/"/>
      <url>/2021/12/06/java-Proxy/</url>
      
        <content type="html"><![CDATA[<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li>代理模式：为一个对象提供一个替身，以控制对这个对象的访问(被代理的对象)。即通过代理对象访问目标对象，这样的好处是可以再目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</li><li>被代理的对象可以是远程对象、创建开销大的对象或者需要安全控制的对象</li><li>代理模式有三种不同的形式，主要有三种 <ul><li><strong>静态</strong>代理 </li><li><strong>动态</strong>代理(<code>JDK</code>代理，接口代理) </li><li><code>Cglib</code>代理(可以再内存动态的创建对象，而不需要实现接口，属于<strong>动态代理</strong>的范畴)</li></ul></li></ol><h4 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h4><p>静态代理在使用时，需要定义接口或者父类(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类</p><p>用例图：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/JavaDesignMode/Proxy/staticProxy.png" alt="image"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 授课的方法</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 老师授课中  。。。。。&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理对象,静态代理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeacherDao</span></span>&#123;<br><br><span class="hljs-keyword">private</span> ITeacherDao target; <span class="hljs-comment">// 目标对象，通过接口来聚合</span><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TeacherDaoProxy</span><span class="hljs-params">(ITeacherDao target)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.target = target;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;开始代理  完成某些操作。。。。。 &quot;</span>);<span class="hljs-comment">//方法</span><br>target.teach();<br>System.out.println(<span class="hljs-string">&quot;提交。。。。。&quot;</span>);<span class="hljs-comment">//方法</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建目标对象(被代理对象)</span><br>TeacherDao teacherDao = <span class="hljs-keyword">new</span> TeacherDao();<br><br><span class="hljs-comment">//创建代理对象, 同时将被代理对象传递给代理对象</span><br>TeacherDaoProxy teacherDaoProxy = <span class="hljs-keyword">new</span> TeacherDaoProxy(teacherDao);<br><br><span class="hljs-comment">//通过代理对象，调用到被代理对象的方法</span><br><span class="hljs-comment">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法 </span><br>teacherDaoProxy.teach();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代理优缺点：</p><ol><li>优点‘：在不修改目标对象的功能前提下，能通过代理对象对目标功能进行扩展</li><li>缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类</li><li>一旦接口增加方法，目标对象与代理对象都要维护</li></ol><h4 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a>2.动态代理</h4><p>基本介绍</p><ol><li>代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</li><li>代理对象的生成，是利用<code>JDK</code>的<code>API</code>，动态的在内存中构建代理对象</li><li>动态代理也叫：<code>JDK</code>代理，接口代理</li></ol><p><code>JDK</code>中生成代理对象的<code>API</code></p><ol><li><p>代理类所在包：<code>java.lang.reflect.Proxy</code></p></li><li><p><code>JDK</code>实现代理类只需要使用<code>newProxyInstance</code>方法，但是该方法需要接收三个参数，完整方法为</p></li></ol><blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">Object</span> newProxyInstance(<br>&gt;ClassLoader loader,<br>&gt;<span class="hljs-keyword">Class</span>&lt;?&gt;[] interfaces,<br>&gt;InvocationHandler h)<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/JavaDesignMode/Proxy/dynamic.png" alt="dynamic"></p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 授课方法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 老师授课中.... &quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello &quot;</span> + name);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">//目标对象 , Object</span><br>    <span class="hljs-keyword">private</span> T target;<br><br>    <span class="hljs-comment">//构造器传入 ， 对target 进行初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(T target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//给目标对象 生成一个代理对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//说明</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  public static Object newProxyInstance(ClassLoader loader,</span><br><span class="hljs-comment">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-comment">                                          InvocationHandler h)</span><br><span class="hljs-comment">                                          </span><br><span class="hljs-comment">            //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定</span><br><span class="hljs-comment">            //2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型</span><br><span class="hljs-comment">            //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法,</span><br><span class="hljs-comment">            // 会把当前执行的目标对象方法作为参数传入</span><br><span class="hljs-comment"> */</span><br>        <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(),  <span class="hljs-comment">//构建代理对象的类加载器 反射</span><br>                target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         Method method, </span></span><br><span class="hljs-params"><span class="hljs-function">                                         Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                        <span class="hljs-comment">//invoke方法的作用是执行具体的代理逻辑 </span><br>                        <span class="hljs-comment">//也就是代理对象调用任意方法都会执行invoke</span><br>                        <span class="hljs-comment">//参数一 proxy: 代理对象本身</span><br>                        <span class="hljs-comment">//参数二 method : 代理对象调用的方法</span><br>                        <span class="hljs-comment">//参数三 args : 代理对象调用方法时传入的参数</span><br>                        <span class="hljs-comment">//返回值表示代理对象调用方法所受到的返回值</span><br>                        <span class="hljs-comment">//此时创建的代理对象可以代理任意借口 如果想只代理对应方法</span><br>                        String name = method.getName();<br>                        <span class="hljs-comment">//可以获取代理对象的方法名做if判断 进行核心逻辑判断 是否要代理</span><br>                        <span class="hljs-keyword">if</span> (!name.equals(<span class="hljs-string">&quot;&quot;</span>))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;执行了对应方法&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;方法执行前 代理开始了 &quot;</span>);<br>                            <span class="hljs-comment">//反射机制调用目标对象的方法</span><br>                            Object returnVal = method.invoke(target, args);<br>                            System.out.println(<span class="hljs-string">&quot;方法执行后 代理又开始了&quot;</span>);<br>                            <span class="hljs-keyword">return</span> returnVal;<br>                        &#125;<br>                        <span class="hljs-comment">//方法不需要代理</span><br>                        <span class="hljs-keyword">return</span> method.invoke(target,args);<br>                    &#125;<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建目标对象</span><br>ITeacherDao target = <span class="hljs-keyword">new</span> TeacherDao();<br><br><span class="hljs-comment">//给目标对象，创建代理对象, 可以转成 ITeacherDao</span><br><span class="hljs-comment">//ProxyFactory&lt;ITeacherDao&gt; factory = new ProxyFactory&lt;&gt;(target);</span><br><span class="hljs-comment">//ITeacherDao proxyInstanceDao = factory.getProxyInstance();</span><br><br>ITeacherDao proxyInstance = <br>            <span class="hljs-keyword">new</span> ProxyFactory&lt;ITeacherDao&gt;(target).getProxyInstance();<span class="hljs-comment">//直接获取代理对象</span><br><br><span class="hljs-comment">// proxyInstance=class com.sun.proxy.$Proxy0 内存中动态生成了代理对象</span><br>System.out.println(<span class="hljs-string">&quot;proxyInstance=&quot;</span> + proxyInstance.getClass());<br><br><span class="hljs-comment">//通过代理对象，调用目标对象的方法</span><br><span class="hljs-comment">//proxyInstance.teach();</span><br>proxyInstance.sayHello(<span class="hljs-string">&quot; 龙龙龙 &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Cglib代理"><a href="#3-Cglib代理" class="headerlink" title="3.Cglib代理"></a>3.Cglib代理</h4><p>基本介绍：</p><ol><li><p>静态代理和<code>JDK</code>代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实<br>现任何的接口,这个时候可使用目标对象子类来实现代理-这就是<code>Cglib</code>代理</p></li><li><p>Cglib代理也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将Cglib代<br>理归属到动态代理。</p></li><li><p><code>Cglib</code>是一个强大的高性能的代码生成包,它可以在运行期扩展<code>java</code>类与实现<code>java</code>接口.它广泛的被许多<code>AOP</code>的<br>框架使用,例如Spring <code>AOP</code>，实现方法拦截</p></li><li><p>在<code>AOP</code>编程中如何选择代理模式:</p><ul><li>目标对象需要实现接口，用<code>JDK</code>代理</li><li>目标对象不需要实现接口，用<code>Cglib</code>代理</li></ul></li><li><p><code>Cglib</code>包的底层是通过使用字节码处理框架<code>ASM</code>来转换字节码并生成新的类</p></li></ol><p>设计类图：</p><p><img src="https://lllong.oss-cn-shenzhen.aliyuncs.com/JavaDesignMode/Proxy/cglib.png" alt="dynamic"></p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//被代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDao</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 老师授课中  ， 我是cglib代理，不需要实现接口 &quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br><br><span class="hljs-comment">//维护一个目标对象</span><br><span class="hljs-keyword">private</span> Object target;<br><br><span class="hljs-comment">//构造器，传入一个被代理的对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(Object target)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.target = target;<br>&#125;<br><br><span class="hljs-comment">//返回一个代理对象:  是 target 对象的代理对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//1. 创建一个工具类</span><br>Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br><span class="hljs-comment">//2. 设置父类</span><br>enhancer.setSuperclass(target.getClass());<br><span class="hljs-comment">//3. 设置回调函数</span><br>enhancer.setCallback(<span class="hljs-keyword">this</span>);<br><span class="hljs-comment">//4. 创建子类对象，即代理对象</span><br><span class="hljs-keyword">return</span> enhancer.create();<br>&#125;<br><br><span class="hljs-comment">//重写  intercept 方法，会调用目标对象的方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object arg0,</span></span><br><span class="hljs-params"><span class="hljs-function">                            Method method, </span></span><br><span class="hljs-params"><span class="hljs-function">                            Object[] args, </span></span><br><span class="hljs-params"><span class="hljs-function">                            MethodProxy arg3)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Cglib代理模式 ~~ 开始&quot;</span>);<br>Object returnVal = method.invoke(target, args);<br>System.out.println(<span class="hljs-string">&quot;Cglib代理模式 ~~ 提交&quot;</span>);<br><span class="hljs-keyword">return</span> returnVal;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建目标对象</span><br>TeacherDao target = <span class="hljs-keyword">new</span> TeacherDao();<br><span class="hljs-comment">//获取到代理对象，并且将目标对象传递给代理对象</span><br>TeacherDao proxyInstance = (TeacherDao)<span class="hljs-keyword">new</span> ProxyFactory(target).getProxyInstance();<br><br><span class="hljs-comment">//执行代理对象的方法，触发intecept 方法，从而实现 对目标对象的调用</span><br>String res = proxyInstance.teach();<br>System.out.println(<span class="hljs-string">&quot;res=&quot;</span> + res);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-其他变体"><a href="#4-其他变体" class="headerlink" title="4.其他变体"></a>4.其他变体</h4><p>几种常见的代理模式介绍一几种变体</p><ol><li>防火墙代理：内网通过代理穿透防火墙，实现对公网的访问。</li><li>缓存代理：比如 当请求图片文件等资源时，先到缓存代理取，如果取到资源则ok,如果取不到资源，再到公网或者数据库取，然后缓存。</li><li>远程代理：远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。</li><li>同步代理:主要使用在多线程编程中，完成多线程间同步工作</li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式-单例模式</title>
      <link href="/2021/12/06/java-singleton/"/>
      <url>/2021/12/06/java-singleton/</url>
      
        <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式有八种方式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode">饿汉式<span class="hljs-comment">(静态常量实例化)</span><br>饿汉式<span class="hljs-comment">(静态代码块实例化)</span><br>懒汉式<span class="hljs-comment">(线程不安全)</span><br>懒汉式<span class="hljs-comment">(线程安全同步方法)</span><br>懒汉式<span class="hljs-comment">(同步代码块 ，写法错误)</span> 并不能实现线程安全<br>双重检查<br>静态内部类<br>枚举<br></code></pre></td></tr></table></figure><h4 id="饿汉式-静态常量"><a href="#饿汉式-静态常量" class="headerlink" title="饿汉式(静态常量)"></a>饿汉式(静态常量)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>      <br>    &#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    写法较为简单，在类转载的时候就完成了实例化，避免了线程同步的问题。</span><br><span class="hljs-comment">    缺点是在类装载的时候就完成实例化，没有达到懒加载的效果(Lazy Loading)。</span><br><span class="hljs-comment">    如果从始至终从未使用过这个实例，则会造成内存浪费，</span><br><span class="hljs-comment">    这种基于类加载机制避免了多线程同步的问题，不过instance在类装载的时候就完成实例化，</span><br><span class="hljs-comment">    在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，</span><br><span class="hljs-comment">    因此不能确定有其他的方式导致类装载，这个时候初始化instance就没有达到懒加载的效果</span><br><span class="hljs-comment">    这种单例模式可以用，有可能造成内存浪费</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance ;<br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment">//和静态常量类似，在静态代码块完成实例化。 优缺点也和饿汉式静态常量一样</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态方法，当使用这个方法的时候才实例化</span><br>    <span class="hljs-comment">//懒汉式(线程不安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.起到了懒加载的效果，但是只能在多线程下才能使用</span><br><span class="hljs-comment">    2.如果在多线程下 会导致线程不安全 一个线程进入if语句还没执行完 另一个线程也进来了 就会产生多个实例</span><br><span class="hljs-comment">    3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a>懒汉式(线程安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个静态方法，加入同步处理的代码，解决了线程安全问题</span><br>    <span class="hljs-comment">//懒汉式(线程安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//synchronized(Singleton.class)&#123; </span><br>            <span class="hljs-comment">//锁放在这里 并不能实现线程安全 因为线程进了if语句 迟早会执行 </span><br>                   instance = <span class="hljs-keyword">new</span> Singleton();<br>            <span class="hljs-comment">//&#125;    </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.解决了线程不安全问题</span><br><span class="hljs-comment">    2.效率太低了，每个线程想获得类的实例的时候 执行getInstance()方法都要进行同步。</span><br><span class="hljs-comment">    而其实这个方法只执行一次实例化就够了，后面想要获得该实例应该是直接return，方法进行同步效率太低</span><br><span class="hljs-comment">    3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="双重检查-推荐"><a href="#双重检查-推荐" class="headerlink" title="双重检查(推荐)"></a>双重检查(推荐)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//双重检查</span><br>        <span class="hljs-comment">//提供一个静态的共有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span><br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.双重检查 判断了两次singleton == null 就可以保证线程安全</span><br><span class="hljs-comment">    2.实例化代码只用执行一次 后面再次访问 的时候 如果不为空 就可以直接返回实例化对象 避免了方法反复同步</span><br><span class="hljs-comment">    3.线程安全：实现了懒加载，效率较高</span><br><span class="hljs-comment">    在实际开发中 推荐使用这种单例设计模式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-comment">//　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，</span><br>    <span class="hljs-comment">//当有其他线程需要读取时，它会去内存中读取新值。 保证了 可见性。</span><br>    <span class="hljs-comment">// 满足并发编程安全的三大特性 原子性 可见性 有序性</span><br>    <span class="hljs-comment">//构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//写一个静态内部类，该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;    <br>    <br>    <span class="hljs-comment">//提供一个静态方法，直接返回SingletonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结:</span><br><span class="hljs-comment">    1.这种方式采用的类装载机制来保证初始化实例只有一个线程</span><br><span class="hljs-comment">    2.静态内部类方式在Singleton类被加载的时候并不会立即实例化，而是在需要实例化的时候，</span><br><span class="hljs-comment">    调用getInstacne方法，才会装在SingleInstance类，从而完成Singeleton的实例化</span><br><span class="hljs-comment">    3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，</span><br><span class="hljs-comment">    在类进行初始化的时候，别的线程是无法进入的。</span><br><span class="hljs-comment">    4.避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</span><br><span class="hljs-comment">    在工作中推荐使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Singleton</span></span>&#123;<br>   INSTANCE;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOK</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;ok~~~&quot;</span>);<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        小结</span><br><span class="hljs-comment">        1.这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，</span><br><span class="hljs-comment">        而且还能防止反序列化重新创建新的对象。</span><br><span class="hljs-comment">        2.这种方式是Effective Jaca坐着Josh Bloch提倡的方式</span><br><span class="hljs-comment">        推荐使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>单例模式注意事项和细节说明：</p><p>1)单例模式保证了系统内存中 该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可提高系统的性能<br>2）当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是直接使用new<br>3）单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或者耗费资源过多（即重量级对象），但又经常用到的对象，工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">如果确定实例一定会使用 饿汉式是可以使用的 只是有可能会造成内存浪费 <br>比如java的Runtime中就用了饿汉式 <br>推荐使用： 双重检查、静态内部类、枚举<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式-七大原则</title>
      <link href="/2021/12/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2021/12/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h1><p>设计原则核心思想:</p><ol><li><p>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码放在一起。</p></li><li><p> 针对接口编程，而不是针对实现编程。</p></li><li><p>为了交互对象之间的松耦合设计努力  </p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">设计模式常见的七大原则：<br>1)单一职责原则<br>2)接口隔离原则<br>3)依赖倒置原则<br>4)里式替换原则<br>5)开闭原则<br>6)迪米特原则<br>7)合成复用原则<br></code></pre></td></tr></table></figure><ol><li><p>代码重用性</p></li><li><p>可读性</p></li><li><p>可扩展性</p></li><li><p>可靠性</p></li><li><p>高内聚低耦合</p></li></ol><h2 id="单一隔离"><a href="#单一隔离" class="headerlink" title="单一隔离"></a>单一隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">原则上 一个类应该尽量做一件事 一个类继承一个接口 <br>如果实现类两个职责 当职责一进行修改的时候 很可能回对职责二造成影响<br>但是一个类继承一个接口会导致开销过大<br>在接口方法比较少的情况下可以 通过向下兼容 实现方法的单一职责<br></code></pre></td></tr></table></figure><h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">如果一个接口方法过多，实现该接口就会需要去实现很多不需要实现的方法。<br>这个时候我们就应该把接口进行拆分，去实现需要实现的接口即可。<br></code></pre></td></tr></table></figure><h2 id="依赖倒转-倒置"><a href="#依赖倒转-倒置" class="headerlink" title="依赖倒转(倒置)"></a>依赖倒转(倒置)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">接口和抽象类的价值在于 设计<br>高层模块不应该依赖于底层模块<br>抽象不应该依赖细节，细节应该依赖抽象<br>面向接口编程<br>传递的三种方式<br><span class="hljs-number">1.</span>构造器传递<br><span class="hljs-number">2.</span><span class="hljs-keyword">set</span>接口传递<br><span class="hljs-number">3.</span>接口传递<br>使用接口或者抽象类的目的是制定好规范。而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成<br>多了一个缓冲利于程序的扩展和优化<br><br></code></pre></td></tr></table></figure><h2 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">问题：在编程中如何正确的实现继承   尽量满足里式替换原则 <br>子类尽量不要重写父类的方法<br>做到透明使用 <br>如果子类想使用父类的方法 ，但是有可能会不小心重写了父类的方法 倒是一系列应用 带来了程序的入侵性<br>所以可以 子类和父类都继承一个新的<span class="hljs-keyword">base</span>类，<span class="hljs-keyword">base</span>类实现了更为基础的代码和方法<br>这样子类可以放心的重写方法<br>达到的效果是 所有应用基类的类应该尽量做到透明使用<br><br></code></pre></td></tr></table></figure><p>​    </p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran">开闭原则是编程中 最基础最重要的原则<br><br>一个软件实体类 模块和函数应该对外扩展开放(对提供方) 对修改关闭(对使用方)  用抽象构建，用实现扩展细节<br>当我们增加一个功能时候 应该增加代码而不是修改代码 尽量不去修改原有的代码 <br>当软件需要变化时 尽量通过扩展软件实体的行为来实现变化 而不是通过修改已有的代码来实现变化<br><br>编程中遵循其他原则以及使用设计模式的目的就是遵循开闭原则<br><br>改进思路分析 把创建的<span class="hljs-built_in">Shape</span>类做成抽象类或者接口，并提供一个抽象的draw方法或者接口，让子类去实现即可。<br>这样有新的图形种类时候 只需要让新的图形去继承<span class="hljs-built_in">Shape</span> 并且实现draw方法即可，这样使用方的代码就不需要修改<br><br>满足了开闭原则<br></code></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">一个对象应该对其他的对象保持最少的了解<br>类与类之间的关系越密切，耦合度越大<br><br>一个类里面 除了传递参数依赖类 应该尽量避免出现其他的陌生类，降低耦合度 这样代码修改起来容易<br></code></pre></td></tr></table></figure><h2 id="合成服用原则"><a href="#合成服用原则" class="headerlink" title="合成服用原则"></a>合成服用原则</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">原则是尽量使用合成/聚合 而不是使用继承<br><br>B要想使用<span class="hljs-keyword">A</span>的方法，可以继承于<span class="hljs-keyword">A</span> 但是这样会导致关系太强 耦合度太高<br>组合： 让B 里面注入一个<span class="hljs-keyword">A</span> <br>聚合:  让B里面 set 一个<span class="hljs-keyword">A</span> 或者构造器<br>依赖： 在B里面把<span class="hljs-keyword">A</span>传进来 称之为B依赖<span class="hljs-keyword">A</span> 方法<br></code></pre></td></tr></table></figure><h1 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">设计模式分为三种类型，共23种<br>1、创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式<br>2、适配器模式：桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式<br>3、行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、<br>备忘录模式、解释器模式、状态模式、策略模式、责任链模式<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-day02-annotation</title>
      <link href="/2021/12/06/spring-day02/"/>
      <url>/2021/12/06/spring-day02/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-day02"><a href="#spring-day02" class="headerlink" title="spring-day02"></a>spring-day02</h1><h2 id="第一章-基于注解管理bean"><a href="#第一章-基于注解管理bean" class="headerlink" title="第一章 基于注解管理bean"></a>第一章 基于注解管理bean</h2><h3 id="第一节-IOC的相关注解及包扫描"><a href="#第一节-IOC的相关注解及包扫描" class="headerlink" title="第一节 IOC的相关注解及包扫描"></a>第一节 IOC的相关注解及包扫描</h3><h4 id="1-注解的优势"><a href="#1-注解的优势" class="headerlink" title="1. 注解的优势"></a>1. 注解的优势</h4><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。使用注解开发比使用XML更加简洁明了</p><h4 id="2-包扫描"><a href="#2-包扫描" class="headerlink" title="2. 包扫描"></a>2. 包扫描</h4><p>使用注解进行Bean管理必须要在xml配置文件中进行包扫描，这样的话spring-framework才能够解析你在Bean上所添加的注解，包扫描包含下面列举的四种情况:</p><h5 id="2-1-最基本的扫描方式-常用"><a href="#2-1-最基本的扫描方式-常用" class="headerlink" title="2.1 最基本的扫描方式[常用]"></a>2.1 最基本的扫描方式[常用]</h5><p>扫描指定包下的所有类以及其子包下的所有类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置自动扫描的包 --&gt;</span><br><span class="hljs-comment">&lt;!-- 最基本的扫描方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-指定匹配模式"><a href="#2-2-指定匹配模式" class="headerlink" title="2.2 指定匹配模式"></a>2.2 指定匹配模式</h5><p>根据具体的匹配规则，扫描某个包下的某些类，需要注意规则匹配是匹配的直接在这个包下的类，不能是子包下的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 情况二：在指定扫描包的基础上指定匹配模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">resource-pattern</span>=<span class="hljs-string">&quot;Soldier*.class&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-指定要排除的组件"><a href="#2-3-指定要排除的组件" class="headerlink" title="2.3 指定要排除的组件"></a>2.3 指定要排除的组件</h5><p>扫描某个包下的所有类，但是排除掉一些注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 情况三：指定不扫描的组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-4-仅扫描指定组件"><a href="#2-4-仅扫描指定组件" class="headerlink" title="2.4 仅扫描指定组件"></a>2.4 仅扫描指定组件</h5><p>扫描某个包下的所有类，但是只扫描某种注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span><br><span class="hljs-comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span><br><span class="hljs-comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-常用的进行IOC的注解"><a href="#3-常用的进行IOC的注解" class="headerlink" title="3. 常用的进行IOC的注解"></a>3. 常用的进行IOC的注解</h4><p>我们在类上添加注解，可以实现将该类的对象配置到spring的IOC容器中，常用的注解有如下四种:</p><h5 id="3-1-Component注解"><a href="#3-1-Component注解" class="headerlink" title="3.1 Component注解"></a>3.1 Component注解</h5><p>该注解主要用在普通类上，即除了三层结构之外的其它类的对象如果需要配置到spring的IOC容器中，那么则需要在类上添加Component注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonComponent</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-Controller注解"><a href="#3-2-Controller注解" class="headerlink" title="3.2 Controller注解"></a>3.2 Controller注解</h5><p>该注解主要用在控制层的类上，控制器处于三层结构中的表现层，在JavaWeb阶段表现层使用的是Servlet，而在学习了spring-framework之后，表现层我们使用Controller代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-Service注解"><a href="#3-3-Service注解" class="headerlink" title="3.3 Service注解"></a>3.3 Service注解</h5><p>该注解主要用在三层结构中的业务层的实现类上，用于将业务层的对象配置到spring的IOC容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ISoldierService</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-4-Repository注解"><a href="#3-4-Repository注解" class="headerlink" title="3.4 Repository注解"></a>3.4 Repository注解</h5><p>该注解主要用在三层结构中的持久层的实现类上，用于将持久层的对象配置到spring的IOC容器中，但是以后我们整合了Mybatis，这里就变成了Mapper接口，而Mapper接口是由Mybatis和Spring的整合包负责扫描的。由于Mybatis整合包想要把Mapper接口背后的代理类加入Spring的IOC容器需要结合Mybatis对Mapper配置文件的解析，所以这个事情是Mybatis和Spring的整合包来完成，将来由Mybatis负责扫描，也不需要使用Repository注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ISoldierDao</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然我们学习的上述四个注解都实现IOC，但是其实他们四个在本质上是没有区别的。通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p><p><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_001.png"></p><h4 id="4-给Bean设置name"><a href="#4-给Bean设置name" class="headerlink" title="4. 给Bean设置name"></a>4. 给Bean设置name</h4><p>在我们使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。 </p><h5 id="4-1-默认情况"><a href="#4-1-默认情况" class="headerlink" title="4.1 默认情况"></a>4.1 默认情况</h5><p>类名首字母小写就是bean的id。例如：SoldierController类对应的bean的id就是soldierController。 </p><h5 id="4-2-使用value属性指定"><a href="#4-2-使用value属性指定" class="headerlink" title="4.2 使用value属性指定"></a>4.2 使用value属性指定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller(value = &quot;tianDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>当注解中只设置一个属性时，value属性的属性名可以省略： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller(&quot;tianDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-怎么选择"><a href="#5-怎么选择" class="headerlink" title="5. 怎么选择"></a>5. 怎么选择</h4><ol><li>如果这个类是你自己写的类，表示你可以在它上面加注解，所以可以使用注解方式进行IOC</li><li>如果这个类不是你自己写的类，而是第三方依赖中的类，表示你不能在它上面加注解，那么就只能用配置文件方式进行IOC</li></ol><h3 id="第二节-依赖注入相关的注解"><a href="#第二节-依赖注入相关的注解" class="headerlink" title="第二节 依赖注入相关的注解"></a>第二节 依赖注入相关的注解</h3><h4 id="2-1-注入简单类型的属性"><a href="#2-1-注入简单类型的属性" class="headerlink" title="2.1 注入简单类型的属性"></a>2.1 注入简单类型的属性</h4><p>Value注解是用于给IOC容器中的Bean注入简单类型的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;smallDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierService</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;aobama&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-读取properties中的数据并且进行注入"><a href="#2-2-读取properties中的数据并且进行注入" class="headerlink" title="2.2 读取properties中的数据并且进行注入"></a>2.2 读取properties中的数据并且进行注入</h4><h5 id="2-2-1-准备properties配置文件"><a href="#2-2-1-准备properties配置文件" class="headerlink" title="2.2.1 准备properties配置文件"></a>2.2.1 准备properties配置文件</h5><p>happyInfo.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">happy.componentName</span>=<span class="hljs-string">aoalfu</span><br></code></pre></td></tr></table></figure><h5 id="2-2-2-使用PropertySource注解读取配置文件数据"><a href="#2-2-2-使用PropertySource注解读取配置文件数据" class="headerlink" title="2.2.2 使用PropertySource注解读取配置文件数据"></a>2.2.2 使用PropertySource注解读取配置文件数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当注解中只有一个属性需要赋值，并且这个属性的名字叫&quot;value&quot;的时候，可以省略&quot;value = &quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;happyComponent&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:happyInfo.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;happy.componentName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> componentName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-注入Bean类型属性"><a href="#2-3-注入Bean类型属性" class="headerlink" title="2.3 注入Bean类型属性"></a>2.3 注入Bean类型属性</h4><h5 id="2-3-1-设定情景"><a href="#2-3-1-设定情景" class="headerlink" title="2.3.1 设定情景"></a>2.3.1 设定情景</h5><ul><li>UserController需要UserService</li><li>UserService需要UserDao</li><li>UserDao需要HappyComponent</li><li>HappyComponent需要componentName</li></ul><p>同时在各个组件中声明要调用的方法。 </p><h5 id="2-3-2-在各个组件中声明成员变量和方法"><a href="#2-3-2-在各个组件中声明成员变量和方法" class="headerlink" title="2.3.2 在各个组件中声明成员变量和方法"></a>2.3.2 在各个组件中声明成员变量和方法</h5><h6 id="2-3-2-1-UserController"><a href="#2-3-2-1-UserController" class="headerlink" title="2.3.2.1 UserController"></a>2.3.2.1 UserController</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为了规范代码，提高代码的可读性，三层结构中不同层次的类使用不同的IOC注解</span><br><span class="hljs-comment"> * 1. Controller注解使用在表现层</span><br><span class="hljs-comment"> * 2. Service注解使用在业务层</span><br><span class="hljs-comment"> * 3. Repository注解使用在持久层</span><br><span class="hljs-comment"> * 4. Component注解使用在三层结构之外的类上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 依赖注入的注解:</span><br><span class="hljs-comment"> * 1. Autowired注解: 表示自动装配,它只能用于注入Bean类型的对象</span><br><span class="hljs-comment"> * 2. Value注解: 注入简单类型的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller(&quot;userController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打印:&quot;</span> + userService.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-2-UserServiceImpl"><a href="#2-3-2-2-UserServiceImpl" class="headerlink" title="2.3.2.2 UserServiceImpl"></a>2.3.2.2 UserServiceImpl</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service.impl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userDao.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-3-UserDaoImpl"><a href="#2-3-2-3-UserDaoImpl" class="headerlink" title="2.3.2.3 UserDaoImpl"></a>2.3.2.3 UserDaoImpl</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao.impl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HappyComponent happyComponent;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//按道理来说要执行SQL语句到数据查询数据</span><br>        <span class="hljs-comment">//但是今天通过依赖注入，模拟从数据库查询到name</span><br>        <span class="hljs-keyword">return</span> happyComponent.getComponentName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-4-HappyComponent"><a href="#2-3-2-4-HappyComponent" class="headerlink" title="2.3.2.4 HappyComponent"></a>2.3.2.4 HappyComponent</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当注解中只有一个属性需要赋值，并且这个属性的名字叫&quot;value&quot;的时候，可以省略&quot;value = &quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;happyComponent&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> componentName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-3-使用Autowired注解进行注入"><a href="#2-3-3-使用Autowired注解进行注入" class="headerlink" title="2.3.3 使用Autowired注解进行注入"></a>2.3.3 使用Autowired注解进行注入</h5><h6 id="2-3-3-1-Autowired注解可以使用的位置"><a href="#2-3-3-1-Autowired注解可以使用的位置" class="headerlink" title="2.3.3.1 Autowired注解可以使用的位置"></a>2.3.3.1 Autowired注解可以使用的位置</h6><ol><li><p>用在成员变量上(最常用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打印:&quot;</span> + userService.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用在构造器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用在方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">((UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用在参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-3-2-Autowired工作流程"><a href="#2-3-3-2-Autowired工作流程" class="headerlink" title="2.3.3.2 Autowired工作流程"></a>2.3.3.2 Autowired工作流程</h6><p><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_002.png"></p></li></ol><p>首先根据所需要的组件类型到IOC容器中查找</p><ul><li>能够找到唯一的bean：直接执行装配</li><li>如果完全找不到匹配这个类型的bean：装配失败</li><li>和所需类型匹配的bean不止一个<ul><li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配<ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li><li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配<ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li></ul></li></ul><h5 id="2-3-4-使用Resource注解进行注入"><a href="#2-3-4-使用Resource注解进行注入" class="headerlink" title="2.3.4 使用Resource注解进行注入"></a>2.3.4 使用Resource注解进行注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> SoldierService soldierService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        soldierService.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-5-Autowired注解和Resource注解的区别"><a href="#2-3-5-Autowired注解和Resource注解的区别" class="headerlink" title="2.3.5 Autowired注解和Resource注解的区别"></a>2.3.5 Autowired注解和Resource注解的区别</h5><p>@Autowired功能虽说非常强大，但是也有些不足之处。比如：比如它跟spring强耦合了，如果换成了JFinal等其他框架，功能就会失效。而@Resource是JSR-250提供的，它是Java标准，绝大部分框架都支持。</p><p>除此之外，有些场景使用@Autowired无法满足的要求，改成@Resource却能解决问题。接下来，我们重点看看@Autowired和@Resource的区别。</p><ul><li>@Autowired默认按byType自动装配，而@Resource默认byName自动装配。</li><li>@Autowired只包含一个参数：required，表示是否开启自动注入，默认是true。而@Resource包含七个参数，其中最重要的两个参数是：name 和 type。</li><li>@Autowired如果要使用byName，需要使用@Qualifier一起配合。而@Resource如果指定了name，则用byName自动装配，如果指定了type，则用byType自动装配。</li><li>@Autowired能够用在：构造器、方法、参数、成员变量和注解上，而@Resource能用在：类、成员变量和方法上。</li><li>@Autowired是spring定义的注解，而@Resource是JSR-250定义的注解。</li></ul><p>此外，它们的装配顺序不同。 </p><p>Autowired的装配顺序:</p><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_003.png" style="zoom:67%;"><p>Resource的装配顺序:</p><ol><li>如果同时指定了name和type： </li></ol><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_004.png" style="zoom:50%;"><ol start="2"><li> 如果指定了name： </li></ol><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_005.png" style="zoom:50%;"><ol start="3"><li>如果指定了type: </li></ol><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_006.png" style="zoom:50%;"><ol start="4"><li> 如果既没有指定name，也没有指定type： </li></ol><img src="http://www.slx.blue/2021/12/06/spring-day02/tu_007.png" style="zoom:67%;"><h3 id="第三节-纯注解开发"><a href="#第三节-纯注解开发" class="headerlink" title="第三节 纯注解开发"></a>第三节 纯注解开发</h3><p>体验纯注解开发，是为了给将来学习SpringBoot打基础。因为在SpringBoot中，就是完全舍弃XML配置文件，全面使用注解来完成主要的配置。 </p><h4 id="1-使用配置类取代配置文件"><a href="#1-使用配置类取代配置文件" class="headerlink" title="1. 使用配置类取代配置文件"></a>1. 使用配置类取代配置文件</h4><h5 id="1-1-创建配置类"><a href="#1-1-创建配置类" class="headerlink" title="1.1 创建配置类"></a>1.1 创建配置类</h5><p>使用@Configuration注解将一个普通的类标记为Spring的配置类。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-在配置类中配置包扫描"><a href="#1-2-在配置类中配置包扫描" class="headerlink" title="1.2 在配置类中配置包扫描"></a>1.2 在配置类中配置包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@ComponentScan</span>注解进行包扫描</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-在配置类中配置bean"><a href="#1-3-在配置类中配置bean" class="headerlink" title="1.3 在配置类中配置bean"></a>1.3 在配置类中配置bean</h5><p>对Bean进行IOC的时候，如果是自己编写的类，则可以直接通过IOC注解进行配置，如果是<strong>非自己写的类</strong>:例如JDK中或者第三方框架中的类，我们可以通过配置文件进行IOC；但是在纯注解中没有了配置文件，所以我们需要使用@Bean注解进行IOC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@ComponentScan</span>注解进行包扫描</span><br><span class="hljs-comment"> * 3. 使用<span class="hljs-doctag">@Bean</span>注解配置第三方的类的IOC</span><br><span class="hljs-comment"> * 4. 从properties文件中读取数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbcInfo.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span></span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-根据配置类创建IOC容器对象"><a href="#1-4-根据配置类创建IOC容器对象" class="headerlink" title="1.4 根据配置类创建IOC容器对象"></a>1.4 根据配置类创建IOC容器对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AnnotationConfigApplicationContext根据配置类创建IOC容器对象</span><br>ApplicationContext iocContainerAnnotation = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfiguration.class);<br></code></pre></td></tr></table></figure><h5 id="1-5-测试"><a href="#1-5-测试" class="headerlink" title="1.5 测试"></a>1.5 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.configuration.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationOnly</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1. 创建核心容器对象:AnnotationConfigApplicationContext核心容器是加载配置类的核心容器</span><br>        ApplicationContext act = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(AtguiguSpringConfiguration.class);<br>        <span class="hljs-comment">//2. 从核心容器对象中获取UserController对象</span><br>        UserController userController = (UserController) act.getBean(<span class="hljs-string">&quot;userController&quot;</span>);<br>        <span class="hljs-comment">//3. 调用UserController对象printConnection()方法</span><br>        userController.printConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-Spring整合junit4"><a href="#第四节-Spring整合junit4" class="headerlink" title="第四节 Spring整合junit4"></a>第四节 Spring整合junit4</h3><h4 id="1-Spring整合Junit4的好处"><a href="#1-Spring整合Junit4的好处" class="headerlink" title="1. Spring整合Junit4的好处"></a>1. Spring整合Junit4的好处</h4><ul><li>好处1：不需要自己创建IOC容器对象了</li><li>好处2：任何需要的bean都可以在测试类中直接享受自动装配</li></ul><h4 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h4><h5 id="2-1-加入依赖"><a href="#2-1-加入依赖" class="headerlink" title="2.1 加入依赖"></a>2.1 加入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   引入Spring整合Junit的依赖</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-创建测试类"><a href="#2-2-创建测试类" class="headerlink" title="2.2 创建测试类"></a>2.2 创建测试类</h5><p>如果是使用的配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.configuration.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> * 目标:在单元测试类中注入要测试的对象,这样就不需要自己创建核心容器了，也不需要自己调用getBean()方法从核心容器中获取对象了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现方案:使用Spring整合Junit单元测试</span><br><span class="hljs-comment"> * 实现步骤:</span><br><span class="hljs-comment"> * 1. 引入spring整合Junit的依赖</span><br><span class="hljs-comment"> * 2. 让单元测试类依赖SpringJUnit4ClassRunner来运行:在测试类上添加  <span class="hljs-doctag">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-comment"> * 3. 加载配置文件或者配置类: 在测试类上添加<span class="hljs-doctag">@ContextConfiguration</span>(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationOnly</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserController userController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//3. 调用UserController对象printConnection()方法</span><br>        userController.printConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是使用的配置文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringAnnotation</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserController userController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//3. 调用UserController对象printConnection()方法</span><br>        userController.printConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五节-内容总结"><a href="#第五节-内容总结" class="headerlink" title="第五节 内容总结"></a>第五节 内容总结</h3><ol><li>包扫描: 指定要进行组件扫描的包</li><li>IOC 注解:<ol><li>Component注解: 三层结构之外的其他类使用</li><li>Controller注解: 表现层的类使用</li><li>Service注解: 业务层的类使用</li><li>Repository注解: 持久层的类使用</li></ol></li><li>依赖注入注解：<ol><li>注入Bean:<ol><li>Autowired注解，它是byType进行自动注入，如果要byName必须结合Qualifier注解一起使用</li><li>Resource注解，它默认是byName进行自动注入</li></ol></li><li>注入简单类型: Value注解，以及使用PropertySource注解引入外部的properties文件</li></ol></li><li>注解方式和配置文件方式进行IOC和依赖注入的选择问题:<ol><li>如果是自己写的类就使用注解方式</li><li>如果是第三方jar中的类就使用配置文件方式</li></ol></li><li>Spring整合Junit：<ol><li>目的：简化单元测试</li><li>实现步骤:<ol><li>引入spring-test的依赖</li><li>Junit的依赖版本必须是4.12及以上</li><li>给单元测试类添加@Runwith(SpringJUnit4ClassRunner.class)</li><li>给单元测试类添加@ContextConfiguration(locations=”配置文件的路径”或者是classes=配置类.class)</li><li>直接注入你想使用的IOC容器中的对象就可以直接使用了</li></ol></li></ol></li><li>Spring的纯注解开发<ol><li>目的: 为了以后学习SpringBoot做准备，我们项目如果是使用Spring做开发的话是不会用纯注解的</li><li>步骤:<ol><li>配置类上要添加@Configuration注解标示为配置类</li><li>配置类上要添加@ComponentScan指定要扫描的包</li><li>如果要对第三方的类进行IOC配置<ol><li>在配置类中创建一个方法<ol><li>修饰符public</li><li>返回值是要进行IOC的对象的类型</li><li>方法体中编写创建IOC对象的代码</li><li>如果要给这个方法注入一个IOC容器中存在的对象，直接在方法的参数中声明就行了</li></ol></li><li>给该方法添加@Bean注解</li></ol></li><li>如果是使用纯注解开发，整合Junit的时候，@ContextConfiguration(classes=配置类.class)</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符集和编码问题</title>
      <link href="/2021/12/06/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/06/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="一、为什么需要字符集"><a href="#一、为什么需要字符集" class="headerlink" title="一、为什么需要字符集"></a>一、为什么需要字符集</h3><p>我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特(byte)流。简单来说字符集就规定了某个文字对应的二进制数值存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。正因为字符和字节之间有着这种固定的对应关系，所以我们的文件在以相同的字符集传递的情况之下才不会出现乱码。</p><h3 id="二、为什么有各种各样的字符集标准"><a href="#二、为什么有各种各样的字符集标准" class="headerlink" title="二、为什么有各种各样的字符集标准"></a>二、为什么有各种各样的字符集标准</h3><p>很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。于是，就产生了那么多具有相同效果但又不相互兼容的标准了。</p><p>最早是美国人使用电脑，所以最初的字符集是ASCII,使用7位bit表示一个字符，总共能表示128种字符。后来，随着欧洲各个国家的计算机普及，人们发现ASCI码I对应的128个字符不能够满足需求了，因为欧洲各个国家都有一些特殊的字符。所以ASCII进行了扩容，使用8位bit表示一个字符，总共就能表示256种字符。</p><p>而当中国开始普及计算机后，发现256中字符根本没办法满足咱们中国人的日常需求，中华文化上下五千年，汉字的数量多了去了，一个字节根本没法对应一个字符。所以只能继续扩容，两个字节对应一个字符，所以后续的GB2312、GBK等等字符集就都被提出来了。</p><p>正因为世界上有各种各样的国家、民族需要使用计算机，各个国家地区都会根据自己的文化特色创造出相对应的字符集标准。</p><h3 id="三、同一个字在多种字符集下对应的16进制和二进制对比"><a href="#三、同一个字在多种字符集下对应的16进制和二进制对比" class="headerlink" title="三、同一个字在多种字符集下对应的16进制和二进制对比"></a>三、同一个字在多种字符集下对应的16进制和二进制对比</h3><table><thead><tr><th>字符集</th><th>16进制编码</th><th>对应的二进制数据</th></tr></thead><tbody><tr><td>UTF-8</td><td>0xE5B18C</td><td>1110 0101 1011 0001 1000 1100</td></tr><tr><td>UTF-16</td><td>0x5C4C</td><td>1011 1000 1001 1000</td></tr><tr><td>GBK</td><td>0x8CC5</td><td>1000 1100 1100 0101</td></tr></tbody></table><p>上述是同一个字在三种字符集下所对应的16进制和2进制数据，我们可以发现同样的一个字，在不同的字符集下对应的16进制和2进制数据完全不同。这个字就是我们平常用来形容一个人特别厉害的一个字——–”屌”!</p><h3 id="四、为什么会发生乱码？"><a href="#四、为什么会发生乱码？" class="headerlink" title="四、为什么会发生乱码？"></a>四、为什么会发生乱码？</h3><p>简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了bless（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是受伤（解码过程）。这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。</p><p>在UTF-8字符编码下（一个汉字对应三个字节），”很屌”这两个字对应的16进制字符串</p><table><thead><tr><th>字符</th><th>UTF-8编码后的十六进制</th><th>UTF-8编码后对应的二进制</th></tr></thead><tbody><tr><td>很</td><td>E5BE88</td><td>1110 0101   1011 1110    1000 1000</td></tr><tr><td>屌</td><td>E5B18C</td><td>1110 0101    1011 0001     1000 1100</td></tr></tbody></table><p>于是我们得到了<code>E5BE88E5B18C</code>这么一串数值。而显示时我们用GBK解码进行展示（一个汉字对应两个字节），通过查表我们获得以下信息：</p><table><thead><tr><th>两个字节的十六进制数值</th><th>GBK解码后对应的字符</th></tr></thead><tbody><tr><td>E5BE</td><td>寰</td></tr><tr><td>88E5</td><td>堝</td></tr><tr><td>B18C</td><td>睂</td></tr></tbody></table><p>以上就是”很屌”这两个字在UTF-8字符集下进行编码，然后在GBK下进行解码，就变成了”寰堝睂”。不仅字符变得不认识了，甚至连字数都发生了变化。有没有觉得很屌的样子？</p><h3 id="五、如何将乱码后的字符串还原成它本来的样子"><a href="#五、如何将乱码后的字符串还原成它本来的样子" class="headerlink" title="五、如何将乱码后的字符串还原成它本来的样子"></a>五、如何将乱码后的字符串还原成它本来的样子</h3><p>要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。</p><h4 id="第1步-编码"><a href="#第1步-编码" class="headerlink" title="第1步 编码"></a>第1步 编码</h4><p>假设我们在页面上看到<code>寰堝睂</code>这样的乱码，而又得知我们的服务器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。</p><h4 id="第二步-解码"><a href="#第二步-解码" class="headerlink" title="第二步 解码"></a>第二步 解码</h4><p>由于乱码之前的编码字符集是UTF-8，所以我们再使用UTF-8将二进制字节数组解码成字符串，这时候我们就能够得到这串字符串原本的样子<code>很屌</code></p><p>###六、几个常见名词的介绍</p><h4 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h4><p>一开始最多只能表示128个字符，经过拓展后最多能表示256个字符。</p><h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案，相当于一个最大的字库。Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符。</p><p>既然Unicode包含全世界所有的文字和字符的话，那么为什么全世界不统一使用Unicode字库表来进行编码和解码呢?而非要弄出这么多各种各样的字符集出来呢?</p><p>因为如果全世界都统一使用Unicode的话，一个字符就要对应三个字节，对于美国人和欧洲人来说，他们使用ASCII的话每个字符只需要对应一个字节。这样所造成的后果就是，本来美国人使用ASCII的时候一个U盘能存放1500篇文章，而改成使用Unicode之后U盘只能存放500篇文章了。所以全世界统一使用Unicode字库表并不现实。</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8是一个当今接受度最广的字符集编码,但是它只涵盖了Unicode字库中的一小部分，Unicode的编号从<code>0000</code>开始一直到<code>10FFFF</code>共分为16个Plane，每个Plane中有65536个字符。而UTF-8则只实现了第一个Plane，所以这也造成了它在某些场景下对于特殊字符的处理困难。</p><h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>Unicode：包容万国，优点是字符-&gt;数字的转换速度快，缺点是占用空间大。</p><p>UTF-8：精准，对不同的字符用不同的长度表示，优点是节省空间，缺点是：字符-&gt;数字的转换速度慢，因为每次都需要计算出字符需要多长的Bytes才能够准确表示。</p><p>所以一般在内存中使用的编码是unicode，用空间换时间，为了快。因为程序都需要加载到内存才能运行，因而内存应该是尽可能的保证快。但硬盘中或者网络传输用utf-8，网络I/O延迟或磁盘I/O延迟要远大与utf-8的转换延迟，而且I/O应该是尽可能地节省带宽，保证数据传输的稳定性。因为数据的传输，追求的是稳定，高效，数据量越小数据传输就越靠谱，于是都转成utf－8格式的，而不是unicode。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-day01-XML</title>
      <link href="/2021/12/04/spring-day01/"/>
      <url>/2021/12/04/spring-day01/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-day01"><a href="#spring-day01" class="headerlink" title="spring-day01"></a>spring-day01</h1><h2 id="第一章-Spring的简介"><a href="#第一章-Spring的简介" class="headerlink" title="第一章 Spring的简介"></a>第一章 Spring的简介</h2><h3 id="第一节-Spring公司简介"><a href="#第一节-Spring公司简介" class="headerlink" title="第一节 Spring公司简介"></a>第一节 Spring公司简介</h3><p>该公司的创建者Rod Johnson被称之为Spring之父，他领导的Spring研发团队下有众多的优秀开发者，Spring公司旗下有非常多的优秀框架。例如:Spring FrameWork、Spring Boot、Spring Cloud、Spring Data、Spring Security等等，几乎涉及了Java开发的每一个领域。 官网地址：<a href="https://spring.io/">https://spring.io/</a> </p><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_001.png"></p><h3 id="第二节-Spring-Framework的介绍"><a href="#第二节-Spring-Framework的介绍" class="headerlink" title="第二节 Spring Framework的介绍"></a>第二节 Spring Framework的介绍</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>Spring Framework是Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架</p><h4 id="2-特征"><a href="#2-特征" class="headerlink" title="2. 特征"></a>2. 特征</h4><ul><li>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型(domain)可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</li><li>控制反转：IOC——Inversion of Control，反转资源获取方向。把自己创建资源变成环境将资源准备好，我们享受资源注入。</li><li>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。</li><li>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</li><li>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</li></ul><h4 id="2-Spring-Framework五大功能模块"><a href="#2-Spring-Framework五大功能模块" class="headerlink" title="2. Spring Framework五大功能模块"></a>2. Spring Framework五大功能模块</h4><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_002.png"></p><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>Test</td><td>提供了对 junit 或 TestNG 测试框架的整合。</td></tr><tr><td>Data Access/Integration</td><td>提供了对数据访问/集成的功能。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><h2 id="第二章-IOC容器概念"><a href="#第二章-IOC容器概念" class="headerlink" title="第二章 IOC容器概念"></a>第二章 IOC容器概念</h2><h3 id="第一节-容器的概念"><a href="#第一节-容器的概念" class="headerlink" title="第一节 容器的概念"></a>第一节 容器的概念</h3><h4 id="1-普通容器"><a href="#1-普通容器" class="headerlink" title="1. 普通容器"></a>1. 普通容器</h4><p>普通容器只是负责存储数据(对象)，例如我们在JavaSE中学习的数组、List、Map等等，可以让我们使用它存储数据、获取数据，不具备其它复杂的功能</p><h4 id="2-复杂容器"><a href="#2-复杂容器" class="headerlink" title="2. 复杂容器"></a>2. 复杂容器</h4><p>复杂容器不仅要负责存储对象，还需要具备创建对象、调用对象方法、管理对象生命周期、并且在一定情况下负责销毁对象。例如我们之前学习的Tomcat就是一个复杂容器，它能够负责创建Servlet、Filter、Listener等等对象，并且管理他们的生命周期，在生命周期的不同阶段调用他们的不同方法。而我们后续要学习的IOC容器也是一个复杂容器</p><h3 id="第二节-IOC的概念"><a href="#第二节-IOC的概念" class="headerlink" title="第二节 IOC的概念"></a>第二节 IOC的概念</h3><h4 id="1-传统方式创建对象"><a href="#1-传统方式创建对象" class="headerlink" title="1. 传统方式创建对象"></a>1. 传统方式创建对象</h4><p>传统方式创建对象的方式是: 需要哪个类的对象，就直接在项目中new哪个类的对象，这样就会导致各个类之间的耦合度非常高</p><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_003.png"></p><h4 id="2-IOC方式创建对象"><a href="#2-IOC方式创建对象" class="headerlink" title="2. IOC方式创建对象"></a>2. IOC方式创建对象</h4><p>IOC(inversion of control)的中文解释是“控制反转”，对象的使用者不是创建者.  作用是将对象的创建反转给spring框架来创建和管理。控制反转怎么去理解呢。 其实它反转的是什么呢，是对象的创建工作。 举个例子:平常我们在servlet或者service里面创建对象，都是使用new 的方式来直接创建对象，现在有了spring之后，我们就再也不new对象了，而是把对象创建的工作交给spring容器去维护。我们只需要告诉spring容器我们需要什么对象即可</p><p>IOC的作用：削减计算机程序的耦合(解除我们代码中的依赖关系)。</p><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_004.png"></p><h3 id="第三节-IOC容器在Spring中的实现"><a href="#第三节-IOC容器在Spring中的实现" class="headerlink" title="第三节 IOC容器在Spring中的实现"></a>第三节 IOC容器在Spring中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式:</p><h4 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h4><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 框架本身，供Spring框架内部功能使用，不建议开发人员使用。</p><h4 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h4><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 框架的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。 </p><blockquote><p>以后在 Spring 环境下看到一个类或接口的名称中包含 ApplicationContext，那基本就可以断定，这个类或接口与 IOC 容器有关。</p></blockquote><h4 id="3-ApplicationContext的主要实现类"><a href="#3-ApplicationContext的主要实现类" class="headerlink" title="3. ApplicationContext的主要实现类"></a>3. ApplicationContext的主要实现类</h4><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td><strong>ClassPathXmlApplicationContext</strong></td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td><strong>AnnotationConfigApplicationContext</strong></td><td>可以实现基于Java的配置类加载Spring的应用上下文，创建IOC容器对象</td></tr><tr><td><strong>WebApplicationContext</strong></td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引用存入 ServletContext 域中。</td></tr></tbody></table><h2 id="第三章-Spring-IOC"><a href="#第三章-Spring-IOC" class="headerlink" title="第三章 Spring IOC"></a>第三章 Spring IOC</h2><h3 id="第一节-快速入门"><a href="#第一节-快速入门" class="headerlink" title="第一节 快速入门"></a>第一节 快速入门</h3><h4 id="1-目标"><a href="#1-目标" class="headerlink" title="1. 目标"></a>1. 目标</h4><p>1.1 让Spring IOC容器创建类的对象</p><p>1.2 从Spring IOC容器中获取对象</p><h4 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h4><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_006.png"></p><h4 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h4><h5 id="3-1-Maven依赖"><a href="#3-1-Maven依赖" class="headerlink" title="3.1 Maven依赖"></a>3.1 Maven依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-创建类"><a href="#3-2-创建类" class="headerlink" title="3.2 创建类"></a>3.2 创建类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;component do work ...&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-创建Spring-配置文件并且配置组件"><a href="#3-3-创建Spring-配置文件并且配置组件" class="headerlink" title="3.3 创建Spring 配置文件并且配置组件"></a>3.3 创建Spring 配置文件并且配置组件</h5><p>配置文件的存放路径建议放在resources根路径下，配置文件名字随意</p><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_007.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        每一个实现类就对应一个bean标签</span><br><span class="hljs-comment">            id属性: 对象的唯一标识，根据这个唯一标识，就可以从核心容器中获取对象</span><br><span class="hljs-comment">            class属性: 对象所属的实现类的全限定名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.HappyComponent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件是什么</li><li>id属性：bean的唯一标识</li><li>class属性：组件类的全类名</li></ul><h5 id="3-4-从核心容器中获取对象"><a href="#3-4-从核心容器中获取对象" class="headerlink" title="3.4 从核心容器中获取对象"></a>3.4 从核心容器中获取对象</h5><h6 id="方式一：根据id获取"><a href="#方式一：根据id获取" class="headerlink" title="方式一：根据id获取"></a>方式一：根据id获取</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOCTest</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 创建 IOC 容器对象，为便于其他实验方法使用声明为成员变量</span><br>    <span class="hljs-keyword">private</span> ApplicationContext iocContainer = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment01</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>        <span class="hljs-comment">// 从 IOC 容器对象中获取bean，也就是组件对象</span><br>        HappyComponent happyComponent = (HappyComponent) iocContainer.getBean(<span class="hljs-string">&quot;happyComponent&quot;</span>);<br>        happyComponent.doWork();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="方式二：根据类型获取"><a href="#方式二：根据类型获取" class="headerlink" title="方式二：根据类型获取"></a>方式二：根据类型获取</h6><p>如果该类型在核心容器中只有一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment02</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    HappyComponent component = iocContainer.getBean(HappyComponent.class);<br>    <br>    component.doWork();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>如果该类型在核心容器中有多个对象：那么根据类型获取时会抛出异常，具体异常信息如下</p><blockquote><p>org.springframework.beans.factory.<strong>NoUniqueBeanDefinitionException</strong>: No qualifying bean of type ‘com.atguigu.ioc.component.HappyComponent’ available: expected single matching bean but found 2: happyComponent,happyComponent2</p></blockquote><h6 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h6><p>如果组件类实现了接口，根据接口类型可以获取 bean对象 吗？</p><blockquote><p>可以，前提是bean对象唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean对象不唯一</p></blockquote><h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。 </p><h3 id="第二节-依赖注入"><a href="#第二节-依赖注入" class="headerlink" title="第二节 依赖注入"></a>第二节 依赖注入</h3><p>依赖注入全称是 dependency Injection 翻译过来是依赖注入.其实就是如果spring核心容器管理的某一个类中存在属性，需要spring核心容器在创建该类实例的时候，顺便给这个对象里面的属性进行赋值。</p><h4 id="1-setter方法注入"><a href="#1-setter方法注入" class="headerlink" title="1. setter方法注入"></a>1. setter方法注入</h4><p>如果某个Bean对象的属性有对应的setter方法，那我们可以在配置文件中使用setter方法对属性进行依赖注入</p><h5 id="1-1-注入简单类型数据"><a href="#1-1-注入简单类型数据" class="headerlink" title="1.1 注入简单类型数据"></a>1.1 注入简单类型数据</h5><h6 id="1-1-1-给组件类添加一个简单类型属性"><a href="#1-1-1-给组件类添加一个简单类型属性" class="headerlink" title="1.1.1 给组件类添加一个简单类型属性"></a>1.1.1 给组件类添加一个简单类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;component do work ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-1-2-在配置时给属性指定值"><a href="#1-1-2-在配置时给属性指定值" class="headerlink" title="1.1.2 在配置时给属性指定值"></a>1.1.2 在配置时给属性指定值</h6><p>通过property标签配置的属性值会通过setXxx()方法注入，大家可以通过debug方式验证一下 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        依赖注入:给核心容器中的Bean对象的成员变量赋值</span><br><span class="hljs-comment">        setter方法进行依赖注入:</span><br><span class="hljs-comment">            在要进行依赖注入的bean标签中添加&lt;property&gt;子标签,该子标签的name属性就是要赋值的成员变量名</span><br><span class="hljs-comment">            前提是这个属性一定要有set方法,name属性的值应该是&quot;setXXX&quot;后面的&quot;XXX&quot;首字母改小写</span><br><span class="hljs-comment">            1. 注入简单类型数据: 那么我们使用property标签的value属性给简单类型的成员变量赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            2. 注入Bean类型数据: 那么我们使用property标签的ref属性给Bean类型的成员变量赋值，</span><br><span class="hljs-comment">                               ref属性的值就是要赋值的Bean类型的对象在核心容器中的id</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-1-3-测试代码"><a href="#1-1-3-测试代码" class="headerlink" title="1.1.3 测试代码"></a>1.1.3 测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetHappyComponent</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//2. 使用核心容器对象获取HappyComponent对象</span><br>    <span class="hljs-comment">//根据id获取:获取ioc容器中id为&quot;happyComponent&quot;的对象</span><br>    HappyComponent happyComponent1 = (HappyComponent) act.getBean(<span class="hljs-string">&quot;happyComponent&quot;</span>);<br>    <br>    <span class="hljs-comment">//3. 使用HappyComponent对象获取username属性</span><br>    System.out.println(happyComponent1.getUsername());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-注入Bean类型数据"><a href="#1-2-注入Bean类型数据" class="headerlink" title="1.2 注入Bean类型数据"></a>1.2 注入Bean类型数据</h5><h6 id="1-2-1-声明新的组件类UserServlet"><a href="#1-2-1-声明新的组件类UserServlet" class="headerlink" title="1.2.1 声明新的组件类UserServlet"></a>1.2.1 声明新的组件类UserServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.servlet</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:28</span><br><span class="hljs-comment"> * 1. IOC : 由核心容器创建Bean对象</span><br><span class="hljs-comment"> * 2. DI(依赖注入) : 给核心容器中的Bean对象的成员变量赋值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        userService.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-2-声明新的组件接口UserService和实现类UserServiceImpl"><a href="#1-2-2-声明新的组件接口UserService和实现类UserServiceImpl" class="headerlink" title="1.2.2 声明新的组件接口UserService和实现类UserServiceImpl"></a>1.2.2 声明新的组件接口UserService和实现类UserServiceImpl</h6><p>UserService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:33</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HappyComponent happyComponent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHappyComponent</span><span class="hljs-params">(HappyComponent happyComponent)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.happyComponent = happyComponent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,&quot;</span>+happyComponent.getUsername());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-3-在UserService对象中注入HappyComponent对象"><a href="#1-2-3-在UserService对象中注入HappyComponent对象" class="headerlink" title="1.2.3 在UserService对象中注入HappyComponent对象"></a>1.2.3 在UserService对象中注入HappyComponent对象</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用依赖注入给HappyComponent属性赋值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-2-4-在UserServlet对象中注入UserService对象"><a href="#1-2-4-在UserServlet对象中注入UserService对象" class="headerlink" title="1.2.4 在UserServlet对象中注入UserService对象"></a>1.2.4 在UserServlet对象中注入UserService对象</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        你想让ioc容器创建什么对象，就将那个类配置到bean标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用依赖注入给UserService属性赋值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个操作在 IDEA 中有提示： </p><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_009.png"></p><h6 id="1-2-5-测试"><a href="#1-2-5-测试" class="headerlink" title="1.2.5 测试"></a>1.2.5 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment">//调用UserServlet的sayHello()方法</span><br>    userServlet.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-6-易错点"><a href="#1-2-6-易错点" class="headerlink" title="1.2.6 易错点"></a>1.2.6 易错点</h6><blockquote><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.atguigu.ioc.component.HappyMachine’ for property ‘happyMachine’: no matching editors or conversion strategy found 意思是不能把String类型转换成我们要的HappyMachine类型 说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote><h5 id="1-3-注入内部Bean类型数据-了解"><a href="#1-3-注入内部Bean类型数据-了解" class="headerlink" title="1.3 注入内部Bean类型数据(了解)"></a>1.3 注入内部Bean类型数据(了解)</h5><h6 id="1-3-1-重新配置原组件"><a href="#1-3-1-重新配置原组件" class="headerlink" title="1.3.1 重新配置原组件"></a>1.3.1 重新配置原组件</h6><p>在bean里面配置的bean就是内部bean，内部bean只能在当前bean内部使用，在其他地方不能使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这个bean标签创建的HappyComponent对象只能用于给UserServiceImpl的happyComponent属性赋值,别的地方不能使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aobama&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-3-2-测试"><a href="#1-3-2-测试" class="headerlink" title="1.3.2 测试"></a>1.3.2 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment04</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//通过核心容器获取UserService的对象:我为什么要使用接口类型接收实现类的对象,为了解耦</span><br>    UserService userService = (UserService) act.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    userService.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-引入外部属性文件用于给Bean注入属性"><a href="#1-4-引入外部属性文件用于给Bean注入属性" class="headerlink" title="1.4 引入外部属性文件用于给Bean注入属性"></a>1.4 引入外部属性文件用于给Bean注入属性</h5><h6 id="1-4-1-添加Maven依赖"><a href="#1-4-1-添加Maven依赖" class="headerlink" title="1.4.1 添加Maven依赖"></a>1.4.1 添加Maven依赖</h6><p>这个依赖只是为了使用Druid连接池，而不是引入外部属性文件所必须的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-4-2-创建外部属性文件"><a href="#1-4-2-创建外部属性文件" class="headerlink" title="1.4.2 创建外部属性文件"></a>1.4.2 创建外部属性文件</h6><p><img src="http://www.slx.blue/2021/12/04/spring-day01/tu_010.png"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h6 id="1-4-3-在spring的配置文件中引入jdbc-properties文件"><a href="#1-4-3-在spring的配置文件中引入jdbc-properties文件" class="headerlink" title="1.4.3 在spring的配置文件中引入jdbc.properties文件"></a>1.4.3 在spring的配置文件中引入jdbc.properties文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-4-4-在spring的配置文件中使用引入的jdbc-properties文件中的数据"><a href="#1-4-4-在spring的配置文件中使用引入的jdbc-properties文件中的数据" class="headerlink" title="1.4.4 在spring的配置文件中使用引入的jdbc.properties文件中的数据"></a>1.4.4 在spring的配置文件中使用引入的jdbc.properties文件中的数据</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--[重要]给bean的属性赋值：引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="1-4-5-测试"><a href="#1-4-5-测试" class="headerlink" title="1.4.5 测试"></a>1.4.5 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment06</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    DataSource dataSource = iocContainer.getBean(DataSource.class);<br>    Connection connection = dataSource.getConnection();<br>    System.out.println(<span class="hljs-string">&quot;connection = &quot;</span> + connection);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-4-6-结论"><a href="#1-4-6-结论" class="headerlink" title="1.4.6 结论"></a>1.4.6 结论</h6><p>标签的value属性: 注入简单类型数据</p><p>标签的ref属性:用于引入IOC容器中的Bean对象的id，注入Bean对象类型的数据</p><h5 id="1-5-注入集合类型属性-了解"><a href="#1-5-注入集合类型属性-了解" class="headerlink" title="1.5 注入集合类型属性(了解)"></a>1.5 注入集合类型属性(了解)</h5><h6 id="1-5-1-给组件类添加集合类型属性"><a href="#1-5-1-给组件类添加集合类型属性" class="headerlink" title="1.5.1 给组件类添加集合类型属性"></a>1.5.1 给组件类添加集合类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;component do work ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-5-2-配置"><a href="#1-5-2-配置" class="headerlink" title="1.5.2 配置"></a>1.5.2 配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberList&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;list&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/list&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                使用set标签注入集合可以去重</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;set&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/set&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-6-注入Map类型属性-了解"><a href="#1-6-注入Map类型属性-了解" class="headerlink" title="1.6 注入Map类型属性(了解)"></a>1.6 注入Map类型属性(了解)</h5><h6 id="1-6-1-给组件类添加Map类型属性"><a href="#1-6-1-给组件类添加Map类型属性" class="headerlink" title="1.6.1 给组件类添加Map类型属性"></a>1.6.1 给组件类添加Map类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; managerMap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getManagerMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setManagerMap</span><span class="hljs-params">(Map&lt;String, String&gt; managerMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.managerMap = managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;component do work ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-6-2-配置"><a href="#1-6-2-配置" class="headerlink" title="1.6.2 配置"></a>1.6.2 配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入Map类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerMap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;map&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k1&quot; value=&quot;v1&quot; &gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k4&quot; value=&quot;v4&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">            &lt;/map&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k4&quot;</span>&gt;</span>v4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-7-注入Bean的集合类型-了解"><a href="#1-7-注入Bean的集合类型-了解" class="headerlink" title="1.7 注入Bean的集合类型(了解)"></a>1.7 注入Bean的集合类型(了解)</h5><h6 id="1-7-1-给组件添加Bean的集合类型属性"><a href="#1-7-1-给组件添加Bean的集合类型属性" class="headerlink" title="1.7.1 给组件添加Bean的集合类型属性"></a>1.7.1 给组件添加Bean的集合类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; managerMap;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserList</span><span class="hljs-params">(List&lt;User&gt; userList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userList = userList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getManagerMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setManagerMap</span><span class="hljs-params">(Map&lt;String, String&gt; managerMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.managerMap = managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;component do work ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  14:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-7-2-配置"><a href="#1-7-2-配置" class="headerlink" title="1.7.2 配置"></a>1.7.2 配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberList&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;list&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/list&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                使用set标签注入集合可以去重</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;set&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/set&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注入Map类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerMap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;map&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k1&quot; value=&quot;v1&quot; &gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k4&quot; value=&quot;v4&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">            &lt;/map&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k4&quot;</span>&gt;</span>v4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注入Bean的集合类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;深圳&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广州&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;王五&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-构造器注入-了解"><a href="#2-构造器注入-了解" class="headerlink" title="2. 构造器注入(了解)"></a>2. 构造器注入(了解)</h4><p>在前面我们通过<code>&lt;bean&gt;</code>标签配置Bean对象，其实是执行Bean类的无参构造函数创建的对象，当Bean类包含有参构造函数的时候，我们在配置文件中可以通过有参构造函数进行配置注入</p><h5 id="2-1-声明组件类"><a href="#2-1-声明组件类" class="headerlink" title="2.1 声明组件类"></a>2.1 声明组件类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyTeam</span> </span>&#123;<br>        <br>    <span class="hljs-keyword">private</span> String teamName;<br>    <span class="hljs-keyword">private</span> Integer memberCount;<br>    <span class="hljs-keyword">private</span> Double memberSalary;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTeamName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> teamName;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTeamName</span><span class="hljs-params">(String teamName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.teamName = teamName;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getMemberCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberCount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberCount</span><span class="hljs-params">(Integer memberCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberCount = memberCount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getMemberSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberSalary</span><span class="hljs-params">(Double memberSalary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberSalary = memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HappyTeam&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;teamName=&#x27;&quot;</span> + teamName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, memberCount=&quot;</span> + memberCount +<br>                <span class="hljs-string">&quot;, memberSalary=&quot;</span> + memberSalary +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HappyTeam</span><span class="hljs-params">(String teamName, Integer memberCount, Double memberSalary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.teamName = teamName;<br>        <span class="hljs-keyword">this</span>.memberCount = memberCount;<br>        <span class="hljs-keyword">this</span>.memberSalary = memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HappyTeam</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-配置构造器注入"><a href="#2-2-配置构造器注入" class="headerlink" title="2.2 配置构造器注入"></a>2.2 配置构造器注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 给bean的属性赋值：构造器注入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyTeam&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.HappyTeam&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;happyCorps&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000.55&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment08</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    HappyTeam happyTeam = iocContainer.getBean(HappyTeam.class);<br>    <br>    System.out.println(<span class="hljs-string">&quot;happyTeam = &quot;</span> + happyTeam);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-补充"><a href="#2-4-补充" class="headerlink" title="2.4 补充"></a>2.4 补充</h5><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><ul><li>index属性：指定参数所在位置的索引（从0开始）</li><li>name属性：指定参数名</li></ul><h4 id="3-特殊值处理-了解"><a href="#3-特殊值处理-了解" class="headerlink" title="3. 特殊值处理(了解)"></a>3. 特殊值处理(了解)</h4><h5 id="3-1-声明一个类用于测试"><a href="#3-1-声明一个类用于测试" class="headerlink" title="3.1 声明一个类用于测试"></a>3.1 声明一个类用于测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropValue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String commonValue;<br>    <span class="hljs-keyword">private</span> String expression;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCommonValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> commonValue;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommonValue</span><span class="hljs-params">(String commonValue)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.commonValue = commonValue;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getExpression</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> expression;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExpression</span><span class="hljs-params">(String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.expression = expression;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PropValue&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;commonValue=&#x27;&quot;</span> + commonValue + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, expression=&#x27;&quot;</span> + expression + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PropValue</span><span class="hljs-params">(String commonValue, String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.commonValue = commonValue;<br>        <span class="hljs-keyword">this</span>.expression = expression;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PropValue</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-null值"><a href="#3-2-null值" class="headerlink" title="3.2 null值"></a>3.2 null值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commonValue&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- null标签：将一个属性值明确设置为null --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-3-当value值中有特殊字符时"><a href="#3-3-当value值中有特殊字符时" class="headerlink" title="3.3 当value值中有特殊字符时"></a>3.3 当value值中有特殊字符时</h5><h6 id="3-3-1-使用XML实体字符-转义符-解决"><a href="#3-3-1-使用XML实体字符-转义符-解决" class="headerlink" title="3.3.1 使用XML实体字符(转义符)解决"></a>3.3.1 使用XML实体字符(转义符)解决</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propValue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.PropValue&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a <span class="hljs-symbol">&amp;lt;</span> b&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-3-2-使用CDATA解决"><a href="#3-3-2-使用CDATA解决" class="headerlink" title="3.3.2 使用CDATA解决"></a>3.3.2 使用CDATA解决</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propValue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.PropValue&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-p命名空间方式注入-了解"><a href="#4-p命名空间方式注入-了解" class="headerlink" title="4. p命名空间方式注入(了解)"></a>4. p命名空间方式注入(了解)</h4><h5 id="4-1-引入p命名空间的约束"><a href="#4-1-引入p命名空间的约束" class="headerlink" title="4.1 引入p命名空间的约束"></a>4.1 引入p命名空间的约束</h5><p>使用 p 名称空间需要导入相关的 XML 约束，在 IDEA 的协助下导入即可： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="4-2-使用p命名空间注入"><a href="#4-2-使用p命名空间注入" class="headerlink" title="4.2 使用p命名空间注入"></a>4.2 使用p命名空间注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注入简单类型数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥拉夫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><br><span class="hljs-comment">&lt;!--注入Bean类型数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span> <span class="hljs-attr">p:userService-ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">p:happyComponent-ref</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment">//调用UserServlet的sayHello()方法</span><br>    userServlet.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-自动装配"><a href="#5-自动装配" class="headerlink" title="5. 自动装配"></a>5. 自动装配</h4><p>所谓自动装配就是一个组件需要其他组件时，由 IOC 容器负责找到那个需要的组件，并装配进去。  </p><h5 id="5-1-配置"><a href="#5-1-配置" class="headerlink" title="5.1 配置"></a>5.1 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥拉夫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        你想让ioc容器创建什么对象，就将那个类配置到bean标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用依赖注入给UserService属性赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        自动装配:autowire属性表示自动装配，就是不需要你去管依赖注入，IOC容器会自动进行依赖注入。它的取值有如下两个</span><br><span class="hljs-comment">            1. byName:根据要注入的属性名和Bean对象的id的对应关系去注入</span><br><span class="hljs-comment">            2. byType:表示核心容器会自动在自身容器中查找一个该类型的对象，给成员变量赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br></code></pre></td></tr></table></figure><h5 id="5-2-测试"><a href="#5-2-测试" class="headerlink" title="5.2 测试"></a>5.2 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment">//调用UserServlet的sayHello()方法</span><br>    userServlet.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三节-Bean的作用域和生命周期"><a href="#第三节-Bean的作用域和生命周期" class="headerlink" title="第三节 Bean的作用域和生命周期"></a>第三节 Bean的作用域和生命周期</h3><h4 id="1-Bean的作用域"><a href="#1-Bean的作用域" class="headerlink" title="1. Bean的作用域"></a>1. Bean的作用域</h4><h5 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h5><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但几乎不用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><h5 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComment&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComment&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetBean</span><span class="hljs-params">()</span> </span>&#123;<br>    HappyComment happyComment01 = (HappyComment) act.getBean(<span class="hljs-string">&quot;happyComment&quot;</span>);<br>    HappyComment happyComment02 = (HappyComment) act.getBean(<span class="hljs-string">&quot;happyComment&quot;</span>);<br>    <br>    System.out.println(happyComment01 == happyComment02);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Bean的生命周期-了解"><a href="#2-Bean的生命周期-了解" class="headerlink" title="2. Bean的生命周期(了解)"></a>2. Bean的生命周期(了解)</h4><h5 id="2-1-bean的生命周期清单"><a href="#2-1-bean的生命周期清单" class="headerlink" title="2.1 bean的生命周期清单"></a>2.1 bean的生命周期清单</h5><ul><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性（依赖注入）</li><li>bean对象初始化之前操作（由bean的后置处理器前置方法负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器后置方法负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ul><h5 id="2-2-指定bean的初始化方法和销毁方法"><a href="#2-2-指定bean的初始化方法和销毁方法" class="headerlink" title="2.2 指定bean的初始化方法和销毁方法"></a>2.2 指定bean的初始化方法和销毁方法</h5><h6 id="2-2-1-创建两个方法作为初始化和销毁方法"><a href="#2-2-1-创建两个方法作为初始化和销毁方法" class="headerlink" title="2.2.1 创建两个方法作为初始化和销毁方法"></a>2.2.1 创建两个方法作为初始化和销毁方法</h6><p>用com.atguigu.component.HappyComponent类测试，在类中加俩方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:PACKAGE_NAME</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  16:02</span><br><span class="hljs-comment"> * 目标:让HappyComponent对象创建的时候，就执行initLifeCircle()方法，在HappyComponent对象销毁之前就执行destroyLifeCircle()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initLifeCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent对象创建了，我可以做一些初始化操作...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyLifeCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent对象销毁了，我可以做一些数据备份工作...&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2-配置bean时指定初始化和销毁方法"><a href="#2-2-2-配置bean时指定初始化和销毁方法" class="headerlink" title="2.2.2 配置bean时指定初始化和销毁方法"></a>2.2.2 配置bean时指定初始化和销毁方法</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        bean标签的scope属性表示这个Bean对象的范围:</span><br><span class="hljs-comment">            1. singleton(默认取值): 单例</span><br><span class="hljs-comment">            2. prototype: 多例</span><br><span class="hljs-comment">        bean标签的init-method属性是用于配置这个Bean对象的初始化方法,</span><br><span class="hljs-comment">        bean标签的destroy-method属性是用于配置这个Bean对象的销毁方法</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initLifeCircle&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyLifeCircle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-bean的后置处理器"><a href="#2-3-bean的后置处理器" class="headerlink" title="2.3 bean的后置处理器"></a>2.3 bean的后置处理器</h5><h6 id="2-3-1-创建后置处理器类"><a href="#2-3-1-创建后置处理器类" class="headerlink" title="2.3.1 创建后置处理器类"></a>2.3.1 创建后置处理器类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.process;<br>    <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br>    <br><span class="hljs-comment">// 声明一个自定义的bean后置处理器</span><br><span class="hljs-comment">// 注意：bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHappyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>    <br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>    <br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-把bean的后置处理器放入IOC容器"><a href="#2-3-2-把bean的后置处理器放入IOC容器" class="headerlink" title="2.3.2 把bean的后置处理器放入IOC容器"></a>2.3.2 把bean的后置处理器放入IOC容器</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myHappyBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.process.MyHappyBeanProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-3-3-执行效果示例"><a href="#2-3-3-执行效果示例" class="headerlink" title="2.3.3 执行效果示例"></a>2.3.3 执行效果示例</h6><blockquote><p>HappyComponent创建对象 </p><p>HappyComponent要设置属性了 </p><p>☆☆☆happyComponent = com.atguigu.ioc.component.HappyComponent@ca263c2 </p><p>HappyComponent初始化 </p><p>★★★happyComponent = com.atguigu.ioc.component.HappyComponent@ca263c2 HappyComponent销毁</p></blockquote><h3 id="第四节-FactoryBean机制-了解"><a href="#第四节-FactoryBean机制-了解" class="headerlink" title="第四节 FactoryBean机制(了解)"></a>第四节 FactoryBean机制(了解)</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2002-2020 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Interface to be implemented by objects used within a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125; which</span><br><span class="hljs-comment"> * are themselves factories for individual objects. If a bean implements this</span><br><span class="hljs-comment"> * interface, it is used as a factory for an object to expose, not directly as a</span><br><span class="hljs-comment"> * bean instance that will be exposed itself.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span><br><span class="hljs-comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span><br><span class="hljs-comment"> * references (&#123;<span class="hljs-doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span><br><span class="hljs-comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125;</span><br><span class="hljs-comment"> * interface allows for exposing more fine-grained behavioral metadata.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span><br><span class="hljs-comment"> * the AOP &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span><br><span class="hljs-comment"> * custom components as well; however, this is only common for infrastructure code.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span><br><span class="hljs-comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #getObjectType()&#125; &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span><br><span class="hljs-comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span><br><span class="hljs-comment"> * other beans, implement &#123;<span class="hljs-doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span><br><span class="hljs-comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span><br><span class="hljs-comment"> * a destroy method on an exposed bean object (such as &#123;<span class="hljs-doctag">@link</span> java.io.Closeable#close()&#125;</span><br><span class="hljs-comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span><br><span class="hljs-comment"> * synchronization of bean creation. There is usually no need for internal</span><br><span class="hljs-comment"> * synchronization other than for purposes of lazy initialization within the</span><br><span class="hljs-comment"> * FactoryBean itself (or the like).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rod Johnson</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 08.03.2003</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the bean type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.beans.factory.BeanFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The name of an attribute that can be</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span><br><span class="hljs-comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span><br><span class="hljs-comment">     * the factory bean class.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment">     */</span><br>    String OBJECT_TYPE_ATTRIBUTE = <span class="hljs-string">&quot;factoryBeanObjectType&quot;</span>;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return an instance (possibly shared or independent) of the object</span><br><span class="hljs-comment">     * managed by this factory.</span><br><span class="hljs-comment">     * &lt;p&gt;As with a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125;, this allows support for both the</span><br><span class="hljs-comment">     * Singleton and Prototype design pattern.</span><br><span class="hljs-comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span><br><span class="hljs-comment">     * the call (for example because it is involved in a circular reference),</span><br><span class="hljs-comment">     * throw a corresponding &#123;<span class="hljs-doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment">     * objects. The factory will consider this as normal value to be used; it</span><br><span class="hljs-comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span><br><span class="hljs-comment">     * FactoryBean implementations are encouraged to throw</span><br><span class="hljs-comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an instance of the bean (can be &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception in case of creation errors</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> FactoryBeanNotInitializedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function">T <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known in advance.</span><br><span class="hljs-comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span><br><span class="hljs-comment">     * instantiating objects, for example on autowiring.</span><br><span class="hljs-comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span><br><span class="hljs-comment">     * this method should try to avoid singleton creation as far as possible;</span><br><span class="hljs-comment">     * it should rather estimate the type in advance.</span><br><span class="hljs-comment">     * For prototypes, returning a meaningful type here is advisable too.</span><br><span class="hljs-comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span><br><span class="hljs-comment">     * been fully initialized. It must not rely on state created during</span><br><span class="hljs-comment">     * initialization; of course, it can still use such state if available.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span><br><span class="hljs-comment">     * this method properly, using the current state of the FactoryBean.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known at the time of the call</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> ListableBeanFactory#getBeansOfType</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getObjectType();<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Is the object managed by this factory a singleton? That is,</span><br><span class="hljs-comment">     * will &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; always return the same object</span><br><span class="hljs-comment">     * (a reference that can be cached)?</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span><br><span class="hljs-comment">     * the object returned from &#123;<span class="hljs-doctag">@code</span> getObject()&#125; might get cached</span><br><span class="hljs-comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="hljs-doctag">@code</span> true&#125;</span><br><span class="hljs-comment">     * unless the FactoryBean always exposes the same reference.</span><br><span class="hljs-comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span><br><span class="hljs-comment">     * be provided by the owning BeanFactory; usually, it has to be</span><br><span class="hljs-comment">     * defined as singleton there.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="hljs-doctag">@code</span> false&#125; does not</span><br><span class="hljs-comment">     * necessarily indicate that returned objects are independent instances.</span><br><span class="hljs-comment">     * An implementation of the extended &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125; interface</span><br><span class="hljs-comment">     * may explicitly indicate independent instances through its</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="hljs-doctag">@link</span> FactoryBean&#125;</span><br><span class="hljs-comment">     * implementations which do not implement this extended interface are</span><br><span class="hljs-comment">     * simply assumed to always return independent instances if the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;The default implementation returns &#123;<span class="hljs-doctag">@code</span> true&#125;, since a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> whether the exposed object is a singleton</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getObject()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> SmartFactoryBean#isPrototype()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-实现FactoryBean接口"><a href="#2-实现FactoryBean接口" class="headerlink" title="2. 实现FactoryBean接口"></a>2. 实现FactoryBean接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-31  09:03</span><br><span class="hljs-comment"> * 要使用FactoryBean机制就得写一个类实现FactoryBean接口,接口的泛型表示你想通过这个FactoryBean创建什么对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * FactoryBean机制:你在spring的配置文件中进行IOC配置的是HappyComponentFactoryBean类，但是真正创建出来存储在核心容器中的对象是</span><br><span class="hljs-comment"> *                HappyComponentFactoryBean对象调用getObject()方法所获取的对象(HappyComponent)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponentFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">HappyComponent</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setComponentName</span><span class="hljs-params">(String componentName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.componentName = componentName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HappyComponent <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HappyComponent happyComponent = <span class="hljs-keyword">new</span> HappyComponent();<br>        happyComponent.setComponentName(componentName);<br>        <span class="hljs-keyword">return</span> happyComponent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-配置bean"><a href="#3-配置bean" class="headerlink" title="3. 配置bean"></a>3. 配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponentFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;componentName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-测试获取bean"><a href="#4-测试获取bean" class="headerlink" title="4. 测试获取bean"></a>4. 测试获取bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFactoryBean</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetBean</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1. 创建核心容器</span><br>        ApplicationContext act = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-application.xml&quot;</span>);<br>        <span class="hljs-comment">//2.从核心容器中获取对象</span><br>        HappyComponent happyComponent = (HappyComponent) act.getBean(<span class="hljs-string">&quot;happyComponent&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA导入Spring源码</title>
      <link href="/2021/12/03/IDEA_Import_SpringCode/"/>
      <url>/2021/12/03/IDEA_Import_SpringCode/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA导入Spring源码"><a href="#IDEA导入Spring源码" class="headerlink" title="IDEA导入Spring源码"></a>IDEA导入Spring源码</h1><h2 id="1-下载spring源码"><a href="#1-下载spring源码" class="headerlink" title="1.下载spring源码"></a>1.下载spring源码</h2><p> Spring源码现在在由github托管,git地址</p><blockquote><p><a href="https://github.com/spring-projects/spring-framework/tree/5.1.x">https://github.com/spring-projects/spring-framework/tree/5.1.x</a></p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126191825760.png" alt="image-20211126191825760"></p></blockquote><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126191900085.png" alt="image-20211126191900085"></p><p>先把源码下载好，推荐5.0X或者5.1X</p><h2 id="2-下载gradle"><a href="#2-下载gradle" class="headerlink" title="2.下载gradle"></a>2.下载gradle</h2><p>安装配置gradle环境变量</p><ul><li>To build you will need Git and JDK 8 update 60 or later. Be sure that your JAVA_HOME environment variable points to the jdk1.8.0 folder extracted from the JDK download.</li></ul><p>所以安装前要确保javahome在jdk<strong>1.8.0.60</strong>以上版本 </p><p>在下载之前，先找到我们下载的源码，spring-framework\gradle\wrapper下面的gradle-wrapper.properties文件，</p><p>打开先瞅两眼！</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126194001815.png" alt="/image-20211126194001815"></p><p>打开后可以看到 默认是去gradle仓库下载指定版本的，</p><p>所以接下来我们下载的时候最好下载适配版本，不然很容易出现各种奇奇怪怪的错误。</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126194132893.png" alt="/image-20211126194132893"></p><p>gradle下载地址</p><blockquote><p><a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a></p></blockquote><p>配置gradle的环境变量</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126192740437.png" alt="/image-20211126192740437"></p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126192813164.png" alt="image-20211126192813164"></p><p>下面这个是gradle的仓库位置，自己选地方放就行了，注意二级目录是.gradle不能改。</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126192852129.png" alt="image-20211126192852129"></p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126193015207.png" alt="image-20211126193015207"></p><p>如果不改的话默认就会在C盘用户下面的创建一个.gradle</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126195925377.png" alt="image-20211126195925377"></p><p>最后把path添加上</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126193245885.png" alt="image-20211126193245885"></p><p>配好之后可以在cmd上输入 gradle -v检测是否配成功</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126193343526.png" alt="image-20211126193343526"></p><p>其实这一步不做也可以，主要是为了之后使用方便，如果是单纯的构建源码可以省略这步。</p><h2 id="3-构建源码"><a href="#3-构建源码" class="headerlink" title="3.构建源码"></a>3.构建源码</h2><p>我们先选中下载好的源码，直接open打开即可。</p><p>先打开IDEA的Settings  –&gt; Plugins 检查有没有下载好插件</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126193538024.png" alt="image-20211126193538024"></p><p>插件安装好之后 在Settings找到Gradle</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126193820036.png" alt="image-20211126193820036"></p><p>可以看到这里可以选择是用gradle-wrapper.properties指定的地址下载gradle，默认会先去你指定的仓库先找，找不到就去下载。也可以使用本地的gradle。建议使用本地gradle。</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126195251922.png" alt="image-20211126195251922"></p><p>配置好之后 我们找到build.gradle文件，配置上国内镜像 下载速度会快很多</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">allprojects</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">repositories</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27; &#125;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27;&#125;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126195730078.png" alt="image-20211126195730078"></p><p>然后等待构建完成即可</p><h2 id="4-常见错误"><a href="#4-常见错误" class="headerlink" title="4.常见错误"></a>4.常见错误</h2><p>这里列举一些遇到的坑</p><p>第一个</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126200402355.png" alt="image-20211126200402355"></p><p>报找不到这个插件，反正网上试了各种办法都不行，然后换了个idea就没这个错误了。。。这个错误用的是IDEA2019.3.1报的。然后我用2018.2.3和2021.1都没这个问题。感兴趣的自己钻研。。。。。。。</p><p>附上版本适配图</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126200816658.png" alt="image-20211126200816658"></p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126200826599.png" alt="image-20211126200826599"></p><p>第二个  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Unable to find method <span class="hljs-string">&#x27;org.gradle.api.artifacts.result.ComponentSelectionReason.getDescription()Ljava/lang/String;&#x27;</span>.<br>Possible causes <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> unexpected error include:&lt;ul&gt;&lt;li&gt;Gradle<span class="hljs-string">&#x27;s dependency cache may be corrupt (this sometimes occurs after a network connection timeout.)</span><br><span class="hljs-string">Re-download dependencies and sync project (requires network)&lt;/li&gt;&lt;li&gt;The state of a Gradle build process (daemon) may be corrupt. Stopping all Gradle daemons may solve this problem.</span><br><span class="hljs-string">Stop Gradle build processes (requires restart)&lt;/li&gt;&lt;li&gt;Your project may be using a third-party plugin which is not compatible with the other plugins in the project or the version of Gradle requested by the project.&lt;/li&gt;&lt;/ul&gt;In the case of corrupt Gradle processes, you can also try closing the IDE and then killing all Java processes.</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126200934973.png" alt="image-20211126200934973"></p><p>这个问题出现的可能有两种，</p><p>1、gradle不适配，换几个试试。gradle得和spring源码还有IDEA都适配。巨坑</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126201658911.png" alt="image-20211126201658911"></p><p>2、IDEA版本太低！就是这个问题搞了我三个小时！！！！我用2021.1的IDEA就解决了这个错误</p><p>第三个</p><p><img src="http://www.slx.blue/2021/12/03/IDEA_Import_SpringCode/image-20211126201335041.png" alt="image-20211126201335041"></p><p>这个错误。。，gradle版本太低了。和源码不适配，得往高了换。换了一般都能解决。</p><p>第四个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Caused by: java.lang.NoSuchMethodError: org.gradle.api.artifacts.ProjectDependency.getConfiguration<br></code></pre></td></tr></table></figure><p>如果 <em>build.gradle</em> 文件包含 <strong>spring-boot-gradle-plugin，</strong>升级其版本 或者其他插件版本低了</p><p>第五个 jar包找不到问题，百度很好解决。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-缓存</title>
      <link href="/2021/12/03/mybatis04/"/>
      <url>/2021/12/03/mybatis04/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-day04"><a href="#Mybatis-day04" class="headerlink" title="Mybatis-day04"></a>Mybatis-day04</h1><h2 id="第一章-Mybatis的缓存机制"><a href="#第一章-Mybatis的缓存机制" class="headerlink" title="第一章 Mybatis的缓存机制"></a>第一章 Mybatis的缓存机制</h2><h3 id="第一节-缓存机制的概述"><a href="#第一节-缓存机制的概述" class="headerlink" title="第一节 缓存机制的概述"></a>第一节 缓存机制的概述</h3><h4 id="1-什么是缓存"><a href="#1-什么是缓存" class="headerlink" title="1. 什么是缓存"></a>1. 什么是缓存</h4><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_004.png"></p><h4 id="2-一级缓存和二级缓存的对比"><a href="#2-一级缓存和二级缓存的对比" class="headerlink" title="2. 一级缓存和二级缓存的对比"></a>2. 一级缓存和二级缓存的对比</h4><h5 id="2-1-使用顺序"><a href="#2-1-使用顺序" class="headerlink" title="2.1 使用顺序"></a>2.1 使用顺序</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_005.png"></p><p>查询的顺序是：</p><ul><li>先查询二级缓存，因为二级缓存中可能会有其他SqlSession已经查出来的数据，可以拿来直接使用。</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之前，一级缓存中的数据会写入二级缓存</li></ul><h5 id="2-2-作用范围"><a href="#2-2-作用范围" class="headerlink" title="2.2 作用范围"></a>2.2 作用范围</h5><ul><li>一级缓存：SqlSession级别</li><li>二级缓存：SqlSessionFactory级别</li></ul><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_006.png"></p><p> 它们之间范围的大小参考下面图： </p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_007.png"></p><h3 id="第二节-一级缓存"><a href="#第二节-一级缓存" class="headerlink" title="第二节 一级缓存"></a>第二节 一级缓存</h3><h4 id="1-代码验证一级缓存"><a href="#1-代码验证一级缓存" class="headerlink" title="1 代码验证一级缓存"></a>1 代码验证一级缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFirstLevelCache</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//验证一级缓存的存在:要求两次查询使用的是同一个sqlSession对象</span><br>    <span class="hljs-comment">//一级缓存是Mybatis自动开启的，不需要配置，也无法关闭(表示你必须使用一级缓存)</span><br>    SqlSession sqlSession = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);<br><br>    Employee employee1 = employeeMapper.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee1);<br>    <span class="hljs-comment">//一级缓存什么时候会被清除呢?</span><br>    <span class="hljs-comment">//1. sqlSession提交事务   2. sqlSession调用clearCache()方法</span><br>    <span class="hljs-comment">//3. sqlSession被销毁了close()一级缓存的内容会被写入到二级缓存</span><br>    <span class="hljs-comment">//4. 数据发生改变:其实并没有清除一级缓存，而是修改缓存中数据</span><br>    SqlSession sqlSession2 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper2 = sqlSession2.getMapper(EmployeeMapper.class);<br>    employee1.setEmpName(<span class="hljs-string">&quot;zs&quot;</span>);<br>    employeeMapper2.updateEmployee(employee1);<br>    sqlSession2.commit();<br><br><br>    Employee employee2 = employeeMapper.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee2);<br>&#125;<br></code></pre></td></tr></table></figure><p>一共只打印了一条SQL语句。 </p><h4 id="2-一级缓存失效的情况"><a href="#2-一级缓存失效的情况" class="headerlink" title="2 一级缓存失效的情况"></a>2 一级缓存失效的情况</h4><ul><li>不是同一个SqlSession(因为一级缓存只能用在同一个SqlSession中)</li><li>同一个SqlSession但是查询条件发生了变化</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作,那么会改变缓存的数据</li><li>同一个SqlSession两次查询期间手动清空了缓存: 调用sqlSession的clearCache()方法</li><li>同一个SqlSession两次查询期间提交了事务: 调用sqlSession的commit()方法</li></ul><h3 id="第三节-二级缓存"><a href="#第三节-二级缓存" class="headerlink" title="第三节 二级缓存"></a>第三节 二级缓存</h3><h4 id="1-代码测试二级缓存"><a href="#1-代码测试二级缓存" class="headerlink" title="1 代码测试二级缓存"></a>1 代码测试二级缓存</h4><h5 id="1-1-开启二级缓存功能"><a href="#1-1-开启二级缓存功能" class="headerlink" title="1.1 开启二级缓存功能"></a>1.1 开启二级缓存功能</h5><p>在想要使用二级缓存的Mapper配置文件中加入cache标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加入cache标签启用二级缓存功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-让实体类支持序列化"><a href="#1-2-让实体类支持序列化" class="headerlink" title="1.2 让实体类支持序列化"></a>1.2 让实体类支持序列化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-junit测试"><a href="#1-3-junit测试" class="headerlink" title="1.3 junit测试"></a>1.3 junit测试</h5><p>这个功能的测试操作需要将SqlSessionFactory对象设置为成员变量 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSecondCacheLevel</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//测试二级缓存的存在:二级缓存是使用在不同的SqlSession中，但是是同一个SqlSessionFactory</span><br>    <span class="hljs-comment">//二级缓存不是Mybatis自动开启的，需要我们手动进行配置</span><br>    <span class="hljs-comment">//1. 在要进行二级缓存的映射配置文件中开启二级缓存(使用&lt;cache/&gt;标签)</span><br>    <span class="hljs-comment">//2. 要进行二级缓存的POJO类需要实现Serializable接口(进行序列化:将对象的数据存储到硬盘中)</span><br>    <span class="hljs-comment">//3. 二级缓存的创建时机(什么时候数据会写入到二级缓存中):sqlSession对象close()的时候</span><br>    SqlSession sqlSession1 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper1 = sqlSession1.getMapper(EmployeeMapper.class);<br><br>    SqlSession sqlSession2 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper2 = sqlSession2.getMapper(EmployeeMapper.class);<br><br>    Employee employee1 = employeeMapper1.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee1);<br>    <span class="hljs-comment">//sqlSession1关闭，那么sqlSession1查询到的数据就会写入到二级缓存中</span><br>    sqlSession1.close();<br><br>    Employee employee2 = employeeMapper2.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee2);<br>    sqlSession2.close();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-缓存命中率"><a href="#1-4-缓存命中率" class="headerlink" title="1.4 缓存命中率"></a>1.4 缓存命中率</h5><p>日志中打印的Cache Hit Ratio叫做缓存命中率 </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.0</span>（<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.5</span>（<span class="hljs-number">1</span>/<span class="hljs-number">2</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.6666666666666666</span>（<span class="hljs-number">2</span>/<span class="hljs-number">3</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.75</span>（<span class="hljs-number">3</span>/<span class="hljs-number">4</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.8</span>（<span class="hljs-number">4</span>/<span class="hljs-number">5</span>）<br></code></pre></td></tr></table></figure><p>缓存命中率=命中缓存的次数/查询的总次数 </p><h4 id="2-查询结果存入二级缓存的时机"><a href="#2-查询结果存入二级缓存的时机" class="headerlink" title="2 查询结果存入二级缓存的时机"></a>2 查询结果存入二级缓存的时机</h4><p>结论：SqlSession关闭的时候，一级缓存中的内容会被存入二级缓存 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.开启两个SqlSession</span><br>SqlSession session01 = factory.openSession();<br>SqlSession session02 = factory.openSession();<br>    <br><span class="hljs-comment">// 2.获取两个EmployeeMapper</span><br>EmployeeMapper employeeMapper01 = session01.getMapper(EmployeeMapper.class);<br>EmployeeMapper employeeMapper02 = session02.getMapper(EmployeeMapper.class);<br>    <br><span class="hljs-comment">// 3.使用两个EmployeeMapper做两次查询，返回两个Employee对象</span><br>Employee employee01 = employeeMapper01.selectEmployeeById(<span class="hljs-number">2</span>);<br>Employee employee02 = employeeMapper02.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// 4.比较两个Employee对象</span><br>System.out.println(<span class="hljs-string">&quot;employee02.equals(employee01) = &quot;</span> + employee02.equals(employee01));<br></code></pre></td></tr></table></figure><p>上面代码打印的结果是： </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,209 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,570 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,624 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,643 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,644 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,661 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,662 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,665 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br>employee02.equals(employee01) = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>修改代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.开启两个SqlSession</span><br>SqlSession session01 = factory.openSession();<br>SqlSession session02 = factory.openSession();<br>    <br><span class="hljs-comment">// 2.获取两个EmployeeMapper</span><br>EmployeeMapper employeeMapper01 = session01.getMapper(EmployeeMapper.class);<br>EmployeeMapper employeeMapper02 = session02.getMapper(EmployeeMapper.class);<br>    <br><span class="hljs-comment">// 3.使用两个EmployeeMapper做两次查询，返回两个Employee对象</span><br>Employee employee01 = employeeMapper01.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// ※第一次查询完成后，把所在的SqlSession关闭，使一级缓存中的数据存入二级缓存</span><br>session01.close();<br>Employee employee02 = employeeMapper02.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// 4.比较两个Employee对象</span><br>System.out.println(<span class="hljs-string">&quot;employee02.equals(employee01) = &quot;</span> + employee02.equals(employee01));<br>    <br><span class="hljs-comment">// 5.另外一个SqlSession用完正常关闭</span><br>session02.close();<br></code></pre></td></tr></table></figure><p> 打印结果： </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:06,804 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,135 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,202 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,224 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,308 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.5  (LoggingCache.java:62) <br>employee02.equals(employee01) = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="3-二级缓存相关配置-了解"><a href="#3-二级缓存相关配置-了解" class="headerlink" title="3 二级缓存相关配置(了解)"></a>3 二级缓存相关配置(了解)</h4><p>在Mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li><p>eviction属性：缓存回收策略</p><p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</p><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p><p>默认的是 LRU。</p></li><li><p>flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p></li><li><p>size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p></li><li><p>readOnly属性：只读，true/false</p><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</p><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</p></li></ul><h3 id="第四节-整合EHCache"><a href="#第四节-整合EHCache" class="headerlink" title="第四节 整合EHCache"></a>第四节 整合EHCache</h3><h4 id="1-EHCache简介"><a href="#1-EHCache简介" class="headerlink" title="1. EHCache简介"></a>1. EHCache简介</h4><p>Ehcache 是一种开源的、基于标准的缓存，可提高性能、卸载数据库并简化可扩展性。它是最广泛使用的基于 Java 的缓存，因为它健壮、经过验证、功能齐全，并且与其他流行的库和框架集成。 Ehcache 从进程内缓存一直扩展到具有 TB 级缓存的混合进程内/进程外部署。  官网地址为:  <a href="https://www.ehcache.org/">https://www.ehcache.org/</a> </p><h4 id="2-Mybatis整合操作"><a href="#2-Mybatis整合操作" class="headerlink" title="2. Mybatis整合操作"></a>2. Mybatis整合操作</h4><h5 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-创建EHCache配置文件"><a href="#2-2-创建EHCache配置文件" class="headerlink" title="2.2 创建EHCache配置文件"></a>2.2 创建EHCache配置文件</h5><p>ehcache.xml</p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_008.png"></p><p>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    maxElementsInMemory:设置 在内存中缓存 对象的个数</span><br><span class="hljs-comment">    maxElementsOnDisk：设置 在硬盘中缓存 对象的个数</span><br><span class="hljs-comment">    eternal：设置缓存是否 永远不过期</span><br><span class="hljs-comment">    overflowToDisk：当系统宕机的时候是否保存到磁盘上</span><br><span class="hljs-comment">    maxElementsInMemory的时候，是否转移到硬盘中</span><br><span class="hljs-comment">    timeToIdleSeconds：当2次访问 超过该值的时候，将缓存对象失效</span><br><span class="hljs-comment">    timeToLiveSeconds：一个缓存对象 最多存放的时间（生命周期）</span><br><span class="hljs-comment">    diskExpiryThreadIntervalSeconds：设置每隔多长时间，通过一个线程来清理硬盘中的缓存</span><br><span class="hljs-comment">    clearOnFlush: 内存数量最大时是否清除</span><br><span class="hljs-comment">    memoryStoreEvictionPolicy：当超过缓存对象的最大值时，处理的策略；LRU (最少使用)，FIFO (先进先出), LFU (最少访问次数)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入第三方框架或工具时，配置文件的文件名可以自定义吗？</p><ul><li>可以自定义：文件名是由我告诉其他环境</li><li>不能自定义：文件名是框架内置的、约定好的，就不能自定义，以避免框架无法加载这个文件</li></ul><h5 id="2-3-指定缓存管理器的具体类型"><a href="#2-3-指定缓存管理器的具体类型" class="headerlink" title="2.3 指定缓存管理器的具体类型"></a>2.3 指定缓存管理器的具体类型</h5><p>还是到查询操作所的Mapper配置文件中，找到之前设置的cache标签： </p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_009.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-4-加入logback日志"><a href="#2-4-加入logback日志" class="headerlink" title="2.4 加入logback日志"></a>2.4 加入logback日志</h5><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。 </p><h6 id="2-4-1-各种Java日志框架简介"><a href="#2-4-1-各种Java日志框架简介" class="headerlink" title="2.4.1 各种Java日志框架简介"></a>2.4.1 各种Java日志框架简介</h6><p>门面：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）</td><td>陈旧</td></tr><tr><td>SLF4J（Simple Logging Facade for Java）★</td><td>适合</td></tr><tr><td>jboss-logging</td><td>特殊专业领域使用</td></tr></tbody></table><p>实现：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>log4j★</td><td>最初版</td></tr><tr><td>JUL（java.util.logging）</td><td>JDK自带</td></tr><tr><td>log4j2</td><td>Apache收购log4j后全面重构，内部实现和log4j完全不同</td></tr><tr><td>logback★</td><td>优雅、强大</td></tr></tbody></table><p>注：标记★的技术是同一作者。</p><h6 id="2-4-2-logback配置文件"><a href="#2-4-2-logback配置文件" class="headerlink" title="2.4.2 logback配置文件"></a>2.4.2 logback配置文件</h6><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_010.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-4-3-junit测试"><a href="#2-4-3-junit测试" class="headerlink" title="2.4.3 junit测试"></a>2.4.3 junit测试</h6><p>正常按照二级缓存的方式测试即可。因为整合EHCache后，其实就是使用EHCache代替了Mybatis自带的二级缓存。 </p><h6 id="2-4-4-EHCache配置文件说明"><a href="#2-4-4-EHCache配置文件说明" class="headerlink" title="2.4.4 EHCache配置文件说明"></a>2.4.4 EHCache配置文件说明</h6><p>当借助CacheManager.add(“缓存名称”)创建Cache时，EhCache便会采用<defalutCache>指定的的管理策略。</defalutCache></p><p>defaultCache标签各属性说明：</p><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</td></tr></tbody></table><h3 id="第五节-缓存的原理"><a href="#第五节-缓存的原理" class="headerlink" title="第五节 缓存的原理"></a>第五节 缓存的原理</h3><h4 id="1-Cache接口"><a href="#1-Cache接口" class="headerlink" title="1. Cache接口"></a>1. Cache接口</h4><h5 id="1-1-Cache接口的重要地位"><a href="#1-1-Cache接口的重要地位" class="headerlink" title="1.1 Cache接口的重要地位"></a>1.1 Cache接口的重要地位</h5><p>org.apache.ibatis.cache.Cache接口：所有缓存都必须实现的顶级接口</p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_011.png"></p><h5 id="1-2-Cache接口中的方法"><a href="#1-2-Cache接口中的方法" class="headerlink" title="1.2 Cache接口中的方法"></a>1.2 Cache接口中的方法</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_012.png"></p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>putObject()</td><td>将对象存入缓存</td></tr><tr><td>getObject()</td><td>从缓存中取出对象</td></tr><tr><td>removeObject()</td><td>从缓存中删除对象</td></tr></tbody></table><h5 id="1-3-缓存的本质"><a href="#1-3-缓存的本质" class="headerlink" title="1.3 缓存的本质"></a>1.3 缓存的本质</h5><p>根据Cache接口中方法的声明我们能够看到，缓存的本质是一个<strong>Map</strong>。 </p><h4 id="2-PerpetualCache类"><a href="#2-PerpetualCache类" class="headerlink" title="2. PerpetualCache类"></a>2. PerpetualCache类</h4><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_013.png"></p><p>org.apache.ibatis.cache.impl.PerpetualCache是Mybatis的默认缓存，也是Cache接口的默认实现。Mybatis一级缓存和自带的二级缓存都是通过PerpetualCache来操作缓存数据的。但是这就奇怪了，同样是PerpetualCache这个类，怎么能区分出来两种不同级别的缓存呢？</p><p>其实很简单，调用者不同。</p><ul><li>一级缓存：由BaseExecutor调用PerpetualCache</li><li>二级缓存：由CachingExecutor调用PerpetualCache，而CachingExecutor可以看做是对BaseExecutor的装饰</li></ul><h4 id="3-一级缓存机制"><a href="#3-一级缓存机制" class="headerlink" title="3. 一级缓存机制"></a>3. 一级缓存机制</h4><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_014.png"></p><p> org.apache.ibatis.executor.BaseExecutor类中的关键方法： </p><h5 id="3-1-query-方法"><a href="#3-1-query-方法" class="headerlink" title="3.1 query()方法"></a>3.1 query()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing a query&quot;</span>).object(ms.getId());<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ExecutorException(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;<br>        clearLocalCache();<br>    &#125;<br>    List&lt;E&gt; list;<br>    <span class="hljs-keyword">try</span> &#123;<br>        queryStack++;<br>        <br>        <span class="hljs-comment">// 尝试从本地缓存中获取数据</span><br>        list = resultHandler == <span class="hljs-keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-keyword">null</span>;<br>        <br>        <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <br>            <span class="hljs-comment">// 如果本地缓存中没有查询到数据，则查询数据库</span><br>            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        queryStack--;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (org.apache.ibatis.executor.BaseExecutor.DeferredLoad deferredLoad : deferredLoads) &#123;<br>            deferredLoad.load();<br>        &#125;<br>        <span class="hljs-comment">// issue #601</span><br>        deferredLoads.clear();<br>        <span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>            <span class="hljs-comment">// issue #482</span><br>            clearLocalCache();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-queryFromDatabase-方法"><a href="#3-2-queryFromDatabase-方法" class="headerlink" title="3.2 queryFromDatabase()方法"></a>3.2 queryFromDatabase()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">queryFromDatabase</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    List&lt;E&gt; list;<br>    localCache.putObject(key, EXECUTION_PLACEHOLDER);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <br>        <span class="hljs-comment">// 从数据库中查询数据</span><br>        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        localCache.removeObject(key);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将数据存入本地缓存</span><br>    localCache.putObject(key, list);<br>    <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>        localOutputParameterCache.putObject(key, parameter);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-二级缓存机制"><a href="#4-二级缓存机制" class="headerlink" title="4. 二级缓存机制"></a>4. 二级缓存机制</h4><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_015.png"></p><p>下面我们来看看CachingExecutor类中的query()方法在不同情况下使用的具体缓存对象： </p><h5 id="4-1-未开启二级缓存"><a href="#4-1-未开启二级缓存" class="headerlink" title="4.1 未开启二级缓存"></a>4.1 未开启二级缓存</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_016.png"></p><h5 id="4-1-使用Mybatis自带的二级缓存"><a href="#4-1-使用Mybatis自带的二级缓存" class="headerlink" title="4.1 使用Mybatis自带的二级缓存"></a>4.1 使用Mybatis自带的二级缓存</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_017.png"></p><h5 id="4-1-使用EHCache"><a href="#4-1-使用EHCache" class="headerlink" title="4.1 使用EHCache"></a>4.1 使用EHCache</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_018.png"></p><h2 id="第二章-逆向工程"><a href="#第二章-逆向工程" class="headerlink" title="第二章 逆向工程"></a>第二章 逆向工程</h2><h3 id="第一节-概念"><a href="#第一节-概念" class="headerlink" title="第一节 概念"></a>第一节 概念</h3><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper配置文件</li></ul></li></ul><h3 id="第二节-基本原理"><a href="#第二节-基本原理" class="headerlink" title="第二节 基本原理"></a>第二节 基本原理</h3><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_019.png"></p><h3 id="第三节-逆向工程的具体操作"><a href="#第三节-逆向工程的具体操作" class="headerlink" title="第三节 逆向工程的具体操作"></a>第三节 逆向工程的具体操作</h3><h4 id="1-配置POM"><a href="#1-配置POM" class="headerlink" title="1. 配置POM"></a>1. 配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--log4j--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-MBG配置文件"><a href="#2-MBG配置文件" class="headerlink" title="2. MBG配置文件"></a>2. MBG配置文件</h4><p>文件名必须是:generatorConfig.xml</p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_020.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">                    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">                    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            javaBean的生成策略</span><br><span class="hljs-comment">            targetPackage 表示生成的JavaBean存放到哪个包中</span><br><span class="hljs-comment">            targetProject 表示生成的JavaBean存放到哪个主目录中</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            SQL映射文件的生成策略</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Employee&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_customer&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Customer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_order&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Order&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-执行MBG插件的generate目标"><a href="#3-执行MBG插件的generate目标" class="headerlink" title="3. 执行MBG插件的generate目标"></a>3. 执行MBG插件的generate目标</h4><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_021.png"></p><h4 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h4><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_022.png"></p><h4 id="5-测试代码"><a href="#5-测试代码" class="headerlink" title="5. 测试代码"></a>5. 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.mapper.EmployeeMapper;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.EmployeeExample;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-08-28  14:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br>    <span class="hljs-keyword">private</span> EmployeeMapper employeeMapper;<br>    <span class="hljs-keyword">private</span> InputStream is;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//目标:创建出EmployeeManager接口的代理对象</span><br>        <span class="hljs-comment">//1. 加载核心配置文件，转成字节输入流</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//2. 创建SqlSessionFactoryBuilder对象</span><br>        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        <span class="hljs-comment">//3. 构建出SqlSessionFactory</span><br>        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//4. 使用SqlSessionFactory对象创建出sqlSession对象</span><br>        sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//5. 使用sqlSession对象创建UserMapper接口的代理对象</span><br>        employeeMapper = sqlSession.getMapper(EmployeeMapper.class);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//关闭资源</span><br>        is.close();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsertEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.insert(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">3000d</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteEmployeeByPrimaryKey</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.deleteByPrimaryKey(<span class="hljs-number">15014</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByExample</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据较为复杂的条件进行删除，比如要删除empId在2000到8000之间的所有员工</span><br>        <span class="hljs-comment">//1. 创建一个EmployeeExample对象</span><br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        <span class="hljs-comment">//2. 使用EmployeeExample对象获取criteria对象</span><br>        EmployeeExample.Criteria criteria = employeeExample.createCriteria();<br>        <span class="hljs-comment">//3. 通过criteria来拼接条件</span><br>        criteria.andEmpIdBetween(<span class="hljs-number">3000</span>,<span class="hljs-number">8000</span>);<br>        employeeMapper.deleteByExample(employeeExample);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.updateByPrimaryKeySelective(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">4</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">2000d</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByPrimaryKey</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据主键查询</span><br>        Employee employee = employeeMapper.selectByPrimaryKey(<span class="hljs-number">4</span>);<br>        System.out.println(employee);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryAll</span><span class="hljs-params">()</span></span>&#123;<br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        <span class="hljs-comment">//查询所有数据</span><br>        List&lt;Employee&gt; employeeList = employeeMapper.selectByExample(employeeExample);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByExample</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//复杂条件:查询(名字中包含s，并且大于3000)  或者 (emp_id在8001-8234之间,并且名字中包含3）的所有元素</span><br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        EmployeeExample.Criteria criteria1 = employeeExample.createCriteria();<br>        criteria1.andEmpNameLike(<span class="hljs-string">&quot;%s%&quot;</span>)<br>                 .andEmpSalaryGreaterThan(<span class="hljs-number">3000d</span>);<br><br>        EmployeeExample.Criteria criteria2 = employeeExample.or();<br>        criteria2.andEmpIdBetween(<span class="hljs-number">8001</span>,<span class="hljs-number">8234</span>)<br>                 .andEmpNameLike(<span class="hljs-string">&quot;%3%&quot;</span>);<br>        employeeMapper.selectByExample(employeeExample);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-QBC查询"><a href="#第四节-QBC查询" class="headerlink" title="第四节  QBC查询"></a>第四节  QBC查询</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>QBC：Query By Criteria ， 最大的特点就是将SQL语句中的WHERE子句进行了组件化的封装，让我们可以通过调用Criteria对象的方法自由的拼装查询条件。 </p><h4 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByExample</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//复杂条件:查询(名字中包含s，并且大于3000)  或者 (emp_id在8001-8234之间,并且名字中包含3）的所有元素</span><br>    EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>    EmployeeExample.Criteria criteria1 = employeeExample.createCriteria();<br>    criteria1.andEmpNameLike(<span class="hljs-string">&quot;%s%&quot;</span>)<br>        .andEmpSalaryGreaterThan(<span class="hljs-number">3000d</span>);<br><br>    EmployeeExample.Criteria criteria2 = employeeExample.or();<br>    criteria2.andEmpIdBetween(<span class="hljs-number">8001</span>,<span class="hljs-number">8234</span>)<br>        .andEmpNameLike(<span class="hljs-string">&quot;%3%&quot;</span>);<br>    employeeMapper.selectByExample(employeeExample);<br>&#125;<br><span class="hljs-comment">//实际执行的SQL语句:select emp_id, emp_name, emp_salary from t_emp WHERE ( emp_name like ? and emp_salary &gt; ? ) or( emp_id between ? and ? and emp_name like ? )</span><br></code></pre></td></tr></table></figure><h2 id="第三章-Mybatis的其它补充内容-了解"><a href="#第三章-Mybatis的其它补充内容-了解" class="headerlink" title="第三章 Mybatis的其它补充内容(了解)"></a>第三章 Mybatis的其它补充内容(了解)</h2><h3 id="第一节-插件机制"><a href="#第一节-插件机制" class="headerlink" title="第一节 插件机制"></a>第一节 插件机制</h3><h4 id="1-Mybatis四大对象"><a href="#1-Mybatis四大对象" class="headerlink" title="1. Mybatis四大对象"></a>1. Mybatis四大对象</h4><h5 id="1-1-Executor"><a href="#1-1-Executor" class="headerlink" title="1.1 Executor"></a>1.1 Executor</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_023.png"></p><h5 id="1-2-ParameterHandler"><a href="#1-2-ParameterHandler" class="headerlink" title="1.2 ParameterHandler"></a>1.2 ParameterHandler</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_024.png"></p><h5 id="2-3-ResultSetHandler"><a href="#2-3-ResultSetHandler" class="headerlink" title="2.3 ResultSetHandler"></a>2.3 ResultSetHandler</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_025.png"></p><h5 id="2-4-StatementHandler"><a href="#2-4-StatementHandler" class="headerlink" title="2.4 StatementHandler"></a>2.4 StatementHandler</h5><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_026.png"></p><h4 id="2-Mybatis插件机制的作用"><a href="#2-Mybatis插件机制的作用" class="headerlink" title="2. Mybatis插件机制的作用"></a>2. Mybatis插件机制的作用</h4><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过<strong>动态代理</strong>机制，可以介入四大对象的任何一个方法的执行。著名的Mybatis插件包括 PageHelper（分页插件）、通用 Mapper（SQL生成插件）等。</p><p>如果想编写自己的Mybatis插件可以通过实现org.apache.ibatis.plugin.Interceptor接口来完成，表示对Mybatis常规操作进行拦截，加入自定义逻辑。</p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_027.png"></p><p> 但是由于插件涉及到Mybatis底层工作机制，在没有足够把握时不要轻易尝试。 </p><h3 id="第二节-Mybatis底层的JDBC封装"><a href="#第二节-Mybatis底层的JDBC封装" class="headerlink" title="第二节 Mybatis底层的JDBC封装"></a>第二节 Mybatis底层的JDBC封装</h3><p> org.apache.ibatis.executor.statement.PreparedStatementHandler类： </p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_028.png"></p><p>查找上面目标时，Debug查看源码的切入点是：</p><p>org.apache.ibatis.session.defaults.DefaultSqlSession类的update()方法</p><p><img src="http://www.slx.blue/2021/12/03/mybatis04/tu_029.png"></p><p>然后在分析<code>this.executor.update()方法</code></p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式</title>
      <link href="/2021/12/03/javaDesignMode/"/>
      <url>/2021/12/03/javaDesignMode/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h1><p>设计原则核心思想:</p><ol><li><p>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码放在一起。</p></li><li><p> 针对接口编程，而不是针对实现编程。</p></li><li><p>为了交互对象之间的松耦合设计努力  </p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">设计模式常见的七大原则：<br>1)单一职责原则<br>2)接口隔离原则<br>3)依赖倒置原则<br>4)里式替换原则<br>5)开闭原则<br>6)迪米特原则<br>7)合成复用原则<br></code></pre></td></tr></table></figure><ol><li><p>代码重用性</p></li><li><p>可读性</p></li><li><p>可扩展性</p></li><li><p>可靠性</p></li><li><p>高内聚低耦合</p></li></ol><h2 id="单一隔离"><a href="#单一隔离" class="headerlink" title="单一隔离"></a>单一隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">原则上 一个类应该尽量做一件事 一个类继承一个接口 <br>如果实现类两个职责 当职责一进行修改的时候 很可能回对职责二造成影响<br>但是一个类继承一个接口会导致开销过大<br>在接口方法比较少的情况下可以 通过向下兼容 实现方法的单一职责<br></code></pre></td></tr></table></figure><h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">如果一个接口方法过多，实现该接口就会需要去实现很多不需要实现的方法。<br>这个时候我们就应该把接口进行拆分，去实现需要实现的接口即可。<br></code></pre></td></tr></table></figure><h2 id="依赖倒转-倒置"><a href="#依赖倒转-倒置" class="headerlink" title="依赖倒转(倒置)"></a>依赖倒转(倒置)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">接口和抽象类的价值在于 设计<br>高层模块不应该依赖于底层模块<br>抽象不应该依赖细节，细节应该依赖抽象<br>面向接口编程<br>传递的三种方式<br><span class="hljs-number">1.</span>构造器传递<br><span class="hljs-number">2.</span><span class="hljs-keyword">set</span>接口传递<br><span class="hljs-number">3.</span>接口传递<br>使用接口或者抽象类的目的是制定好规范。而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成<br>多了一个缓冲利于程序的扩展和优化<br><br></code></pre></td></tr></table></figure><h2 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">问题：在编程中如何正确的实现继承   尽量满足里式替换原则 <br>子类尽量不要重写父类的方法<br>做到透明使用 <br>如果子类想使用父类的方法 ，但是有可能会不小心重写了父类的方法 倒是一系列应用 带来了程序的入侵性<br>所以可以 子类和父类都继承一个新的<span class="hljs-keyword">base</span>类，<span class="hljs-keyword">base</span>类实现了更为基础的代码和方法<br>这样子类可以放心的重写方法<br>达到的效果是 所有应用基类的类应该尽量做到透明使用<br><br></code></pre></td></tr></table></figure><p>​    </p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran">开闭原则是编程中 最基础最重要的原则<br><br>一个软件实体类 模块和函数应该对外扩展开放(对提供方) 对修改关闭(对使用方)  用抽象构建，用实现扩展细节<br>当我们增加一个功能时候 应该增加代码而不是修改代码 尽量不去修改原有的代码 <br>当软件需要变化时 尽量通过扩展软件实体的行为来实现变化 而不是通过修改已有的代码来实现变化<br><br>编程中遵循其他原则以及使用设计模式的目的就是遵循开闭原则<br><br>改进思路分析 把创建的<span class="hljs-built_in">Shape</span>类做成抽象类或者接口，并提供一个抽象的draw方法或者接口，让子类去实现即可。<br>这样有新的图形种类时候 只需要让新的图形去继承<span class="hljs-built_in">Shape</span> 并且实现draw方法即可，这样使用方的代码就不需要修改<br><br>满足了开闭原则<br></code></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">一个对象应该对其他的对象保持最少的了解<br>类与类之间的关系越密切，耦合度越大<br><br>一个类里面 除了传递参数依赖类 应该尽量避免出现其他的陌生类，降低耦合度 这样代码修改起来容易<br><br></code></pre></td></tr></table></figure><h2 id="合成服用原则"><a href="#合成服用原则" class="headerlink" title="合成服用原则"></a>合成服用原则</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">原则是尽量使用合成/聚合 而不是使用继承<br><br>B要想使用<span class="hljs-keyword">A</span>的方法，可以继承于<span class="hljs-keyword">A</span> 但是这样会导致关系太强 耦合度太高<br>组合： 让B 里面注入一个<span class="hljs-keyword">A</span> <br>聚合:  让B里面 set 一个<span class="hljs-keyword">A</span> 或者构造器<br>依赖： 在B里面把<span class="hljs-keyword">A</span>传进来 称之为B依赖<span class="hljs-keyword">A</span> 方法<br></code></pre></td></tr></table></figure><h1 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">设计模式分为三种类型，共23种<br>1、创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式<br>2、适配器模式：桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式<br>3、行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、<br>备忘录模式、解释器模式、状态模式、策略模式、责任链模式<br></code></pre></td></tr></table></figure><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="饿汉式-静态常量"><a href="#饿汉式-静态常量" class="headerlink" title="饿汉式(静态常量)"></a>饿汉式(静态常量)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>      <br>    &#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法较为简单，在类转载的时候就完成了实例化，避免了线程同步的问题。</span><br><span class="hljs-comment">缺点是在类装载的时候就完成实例化，没有达到懒加载的效果(Lazy Loading)。如果从始至终从未使用过这个实例，则会造成内存浪费，</span><br><span class="hljs-comment">这种基于类加载机制避免了多线程同步的问题，不过instance在类装载的时候就完成实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式导致类装载，这个时候初始化instance就没有达到懒加载的效果</span><br><span class="hljs-comment">这种单例模式可以用，有可能造成内存浪费</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance ;<br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//和静态常量类似，在静态代码块完成实例化。 优缺点也和饿汉式静态常量一样</span><br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态方法，当使用这个方法的时候才实例化</span><br>    <span class="hljs-comment">//懒汉式(线程不安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.起到了懒加载的效果，但是只能在多线程下才能使用</span><br><span class="hljs-comment">2.如果在多线程下 会导致线程不安全 一个线程进入if语句还没执行完 另一个线程也进来了 就会产生多个实例</span><br><span class="hljs-comment">3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a>懒汉式(线程安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个静态方法，加入同步处理的代码，解决了线程安全问题</span><br>    <span class="hljs-comment">//懒汉式(线程安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//synchronized(Singleton.class)&#123; </span><br>            <span class="hljs-comment">//锁放在这里 并不能实现线程安全 因为线程进了if语句 迟早会执行 </span><br>                   instance = <span class="hljs-keyword">new</span> Singleton();<br>            <span class="hljs-comment">//&#125;    </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.解决了线程不安全问题</span><br><span class="hljs-comment">2.效率太低了，每个线程想获得类的实例的时候 执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化就够了，后面想要获得该实例应该是直接return，方法进行同步效率太低</span><br><span class="hljs-comment">3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="双重检查-推荐"><a href="#双重检查-推荐" class="headerlink" title="双重检查(推荐)"></a>双重检查(推荐)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//双重检查</span><br>        <span class="hljs-comment">//提供一个静态的共有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span><br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.双重检查 判断了两次singleton == null 就可以保证线程安全</span><br><span class="hljs-comment">2.实例化代码只用执行一次 后面再次访问 的时候 如果不为空 就可以直接返回实例化对象 避免了方法反复同步</span><br><span class="hljs-comment">3.线程安全：实现了懒加载，效率较高</span><br><span class="hljs-comment">在实际开发中 推荐使用这种单例设计模式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-comment">//　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，</span><br>    <span class="hljs-comment">//当有其他线程需要读取时，它会去内存中读取新值。 保证了 可见性。</span><br>    <span class="hljs-comment">// 满足并发编程安全的三大特性 原子性 可见性 有序性</span><br>    <span class="hljs-comment">//构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//写一个静态内部类，该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;    <br>    <br>    <span class="hljs-comment">//提供一个静态方法，直接返回SingletonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结:</span><br><span class="hljs-comment">1.这种方式采用的类装载机制来保证初始化实例只有一个线程</span><br><span class="hljs-comment">2.静态内部类方式在Singleton类被加载的时候并不会立即实例化，而是在需要实例化的时候，调用getInstacne方法，才会装在SingleInstance类，从而完成Singeleton的实例化</span><br><span class="hljs-comment">3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化的时候，别的线程是无法进入的。</span><br><span class="hljs-comment">4.避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</span><br><span class="hljs-comment">在工作中推荐使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Singleton</span></span>&#123;<br>   INSTANCE;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOK</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;ok~~~&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结</span><br><span class="hljs-comment">1.这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</span><br><span class="hljs-comment">2.这种方式是Effective Jaca坐着Josh Bloch提倡的方式</span><br><span class="hljs-comment">推荐使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>单例模式有八种方式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode">饿汉式<span class="hljs-comment">(静态常量实例化)</span><br>饿汉式<span class="hljs-comment">(静态代码块实例化)</span><br>懒汉式<span class="hljs-comment">(线程不安全)</span><br>懒汉式<span class="hljs-comment">(线程安全同步方法)</span><br>懒汉式<span class="hljs-comment">(同步代码块 ，写法错误)</span> 并不能实现线程安全<br>双重检查<br>静态内部类<br>枚举<br></code></pre></td></tr></table></figure><p>单例模式注意事项和细节说明：</p><p>1)单例模式保证了系统内存中 该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可提高系统的性能<br>2）当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是直接使用new<br>3）单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或者耗费资源过多（即重量级对象），但又经常用到的对象，工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">如果确定实例一定会使用 饿汉式是可以使用的 只是有可能会造成内存浪费 <br>比如java的Runtime中就用了饿汉式 <br>推荐使用： 双重检查、静态内部类、枚举<br></code></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>需求：一个披萨项目，要便于披萨种类的扩展，要便于维护</p><ol><li>披萨的种类有很多(比如<code>GreekPizz</code>、<code>Chjeesepizz</code>等)</li><li>披萨的制作有prepare，bake，cut，box</li><li>完成披萨店订购功能。</li></ol><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ol><li>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象 cu答族，而无需指明具体的类</li><li>抽象工厂模式可以将简单工厂模式和工厂方法进行整合</li><li>从设计层面看，抽象工厂模式就是对简单工厂模式的改进或者说进一步的抽象</li><li>将工厂抽象成两橙，<code>AbsFactory</code>(抽象工厂)和具体实现的工厂子类，程序员可以根据创建对象类型使用对应的工厂子类。这样将单个简单地工厂变成了工厂cu答族，更利于代码的维护</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">定义一个抽象的工厂，然后定义实体工厂实现工厂方法。<br><br></code></pre></td></tr></table></figure><blockquote><p>Calendar中使用了工厂模式</p></blockquote><p>工厂模式小结</p><ol><li>工厂模式的意义：将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性。</li><li>三种工厂模式（简单工厂模式，工厂方法模式，抽象工厂模式）</li><li>设计模式的依赖抽象原则<ul><li>创建对象实例中，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，并返回。有的书上说不要直接持有具体类的应用。</li><li>不要让类继承具体类，而是继承抽象类或者是实现interface（接口）</li><li>不要覆盖基类中已经实现的方法</li></ul></li></ol><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>现有一只羊，姓名为tom，年龄为1：颜色为白色，请编写程序创建和tom羊属性完全相同的10只羊</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传统方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>     Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白色&quot;</span>);<br>     <span class="hljs-comment">//克隆十次...</span><br>     <span class="hljs-keyword">new</span> Sheep(sheep.getName(),sheep.getAge(),sheep.getColor());<br> &#125;<br></code></pre></td></tr></table></figure><p>传统方式的优缺点</p><ol><li>有点是比较好理解，简单易操作</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂，效率较低</li><li>总是需要重新初始化对象，而不是动态的获得对象运行时的状态，不够灵活</li></ol><p>思路：<code>java</code>中Object类是所有类的父类，Object提供了一个clone方法，可以将一个<code>java</code>对象复制一份，但是需要实现clone的<code>java</code>类需要实现一个接口<code>Clonealbe</code>，该接口表示该类能够复制且具有复制的能力=&gt;原型模式</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>原型模式(Prototype模式)是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</li><li>原型模式是一种创建型设计模式，允许一个对象在创建另外一个可定制的对象，无需知道如何创建的细节</li><li>工作的原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝他们来实施创建，即对象.clone() </li><li>形象理解：猴子拔出猴毛变成其他猴子</li></ol><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>     <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br><span class="hljs-comment">//克隆该实例 使用默认的clone方法来完成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">null</span>;<br>        Sheep clone = (Sheep) <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;包塞&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//克隆十次</span><br>            Sheep clone1 = (Sheep) sheep.clone();<br>            Sheep clone2 = (Sheep) sheep.clone();<br>            <span class="hljs-comment">//....</span><br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>原型模式在Spring框架中源码分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testImport</span><span class="hljs-params">()</span></span>&#123;<br> Object bean1 = applicationContext.getBean(xxx);     <br>    Object bean2 = applicationContext.getBean(xxx);  <br>    <span class="hljs-comment">//如果是scope = prototype 多例 就用到了原型模式</span><br>    <span class="hljs-comment">//getbean每次都是通过clone生成的对象 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>原型模式完成对象的创建，如果被克隆的对象中有对象属性，那么克隆的时候并不会被克隆</p><h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><p>浅拷贝：</p><ol><li>对于数据类型是基本类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性复制一份给新的对象</li><li>对于数据类型是应用数据类型的成员变量，比如成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是只将该成员变量的引用值(内存地址)复制一份给新的对象。实际上两个对象都指向同一个实例，所以这种情况下 一个对象中修改该成员变量会影响到另一个对象的该成员变量值</li><li>比如默认开启的对象克隆就是浅拷贝</li><li><code> Sheep clone2 = (Sheep) sheep.clone();</code></li></ol><p>深拷贝：</p><ol><li>复制对象的<strong>所有</strong>基本数据类型的成员变量值 </li><li>为所有应用数据类型的成员变量<strong>申请存储空间</strong>，并复制每个应用数据类型成员变量所引用的对象，直到该对象可达的所有对象，<strong>也就是说，对象进行深拷贝要对整个对象(包括引用对象)进行拷贝</strong></li><li>深拷贝实现方式1：<strong>重写clone</strong>方法来实现深拷贝</li><li>深拷贝实现方式2：通过<strong>序列化</strong>实现深拷贝  </li></ol><h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//克隆引用对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String cloneName;<br>    <span class="hljs-keyword">private</span> String cloneClass;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepCloneTarget</span><span class="hljs-params">(String cloneName, String cloneClass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cloneName = cloneName;<br>        <span class="hljs-keyword">this</span>.cloneClass = cloneClass;<br>    &#125;<br><br>    <span class="hljs-comment">//因为该类的属性都是string 所以直接用默认clone方式即可</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要克隆的对象 实现了两种克隆方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepProtoType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//String 属性</span><br>    <span class="hljs-keyword">public</span> DeepCloneTarget deepCloneTarget;<span class="hljs-comment">//引用类型 //属性是对象 默认克隆会浅拷贝</span><br>    <span class="hljs-comment">//深拷贝-1 使用重写clone方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Object deep = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//这里完成对基本数据类型(属性)和字符串的clone</span><br>        deep = <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-comment">//对引用类型的属性进行单独处理</span><br>        DeepProtoType deepProtoType = (DeepProtoType) deep;<br>        deepProtoType.deepCloneTarget = (DeepCloneTarget) deepCloneTarget.clone();<br>        <span class="hljs-keyword">return</span> deepProtoType;<br>    &#125;<br><br>    <span class="hljs-comment">//深拷贝2 使用对象的序列化实现(推荐)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//创建流对象</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">null</span>;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br>        ByteArrayInputStream bis = <span class="hljs-keyword">null</span>;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>            oos.writeObject(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//当前这个对象以对象流的方式输出 序列化</span><br>            <span class="hljs-comment">//再反序列化 读出来 相当于存了值 成功克隆了一个新的对象</span><br>            bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>            DeepProtoType copy = (DeepProtoType) ois.readObject();<br>            <span class="hljs-keyword">return</span> copy;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bos.close();<br>                oos.close();<br>                bis.close();<br>                ois.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        DeepProtoType dp = <span class="hljs-keyword">new</span> DeepProtoType();<br>        dp.name = <span class="hljs-string">&quot;小水牛&quot;</span>;<br>        dp.deepCloneTarget = <span class="hljs-keyword">new</span> DeepCloneTarget(<span class="hljs-string">&quot;大水牛&quot;</span>, <span class="hljs-string">&quot;敲能喝&quot;</span>);<br>        <span class="hljs-comment">//方式一 完成深拷贝</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        DeepProtoType clone = (DeepProtoType) dp.clone();</span><br><span class="hljs-comment">        System.out.println(dp.hashCode());//460141958</span><br><span class="hljs-comment">        System.out.println(clone.hashCode());//1163157884</span><br><span class="hljs-comment">       */</span><br>       <span class="hljs-comment">//方式二 完成深拷贝</span><br>        DeepProtoType p = (DeepProtoType) dp.deepClone();<br>        System.out.println(<span class="hljs-string">&quot;克隆原型：&quot;</span>+dp.name + <span class="hljs-string">&quot;--&quot;</span> + dp.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆原型：小水牛--325040804</span><br><br>        System.out.println(<span class="hljs-string">&quot;克隆的对象&quot;</span>+p.name + <span class="hljs-string">&quot;--&quot;</span> + p.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆的对象小水牛--2065951873</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//推荐使用的是通过序列化实现深拷贝，这样无论原型如何修改都不会影响克隆 因为直接通过流来反序列化创建</span><br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</li><li>不用重新初始化对象，而是动态的获得对象运行时的状态</li><li>如果原型对象发生变化（增加或减少属性），其他克隆对象也会发生相应的变化，无需修改代码</li><li>在实现深克隆的时候 可能需要比较复杂的代码</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但是对已有的类来说进行改造的时候 需要修改它的源代码，违背了<code>OCP</code>（开闭原则）。</li></ol><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ol><li>需求：需要建房子 这一过程为打桩 砌墙 封顶</li><li>房子有各种各种的 比如普通房 高楼 别墅 各种房子的过程虽然一样 但是要求不要相同</li><li>编写程序完成需求</li></ol><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;  <span class="hljs-comment">//抽象房子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 打地基</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//砌墙</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//封顶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//造房子</span><br>        buildBasic();<br>        buildWalls();<br>        roofed();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//普通房子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子打地基&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子砌墙&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        commonHouse.build();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/TraditionalBuilder.jpg" alt="java"></p><ol><li><p>有点是比较好理解，简单易操作</p></li><li><p>设计的程序结构过于简单，没有设计缓存层对象，程序的扩展和维护不好,也就是说 这种设计方案把产品（房子）和创建产品的过程（建房子build方法）封装在一起 ，耦合性增强了</p></li><li><p>解决方案：将<strong>产品</strong>和<strong>产品建造过程</strong>解耦 =&gt; 建造者模式</p></li></ol><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>建造者模式(Builder Pattern)又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别） 使这个抽象过程的不同方法可以构造出不同表现(属性)的对象。</li><li>建造者模式是一步一步创建一个复杂的对象 ，他允许用户指定复杂的类型就可以构建他们，用户不需要知道具体构建细节。</li></ol><h4 id="建造者模式的四个角色"><a href="#建造者模式的四个角色" class="headerlink" title="建造者模式的四个角色"></a>建造者模式的四个角色</h4><ol><li>Product(产品角色) ：一个具体的产品对象</li><li>Builder(抽象建造者)：创建一个Product对象的各个部件的接口/抽象类</li><li><code>ConcreteBuilder</code>(具体建造者)实现接口，构建和装配各个部件</li><li>Director(指挥者)：构建一个Builder接口的对象，它主要是用于创建一个复杂的对象。主要有两个作用，一是：隔离客户与对象产生的过程，二是：复杂控制产品对象的生产过程</li></ol><p>产品：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span> </span>&#123;<span class="hljs-comment">//对应产品</span><br>    <span class="hljs-keyword">private</span> String base;<br>    <span class="hljs-keyword">private</span> String wall;<br>    <span class="hljs-keyword">private</span> String roofed;<br><span class="hljs-comment">//对应getset方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>抽象的建造者Builder:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> House house = <span class="hljs-keyword">new</span> House(); <span class="hljs-comment">//组合一个产品</span><br>    <span class="hljs-comment">//将建造的流程写好,抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//建造房子 建好后将房子返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">BuildHouse</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> house;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指挥者Director</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//指挥者 这里去指定制作流程 返回房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span> </span>&#123;<br>    HouseBuilder houseBuilder = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//1.构造器传入  依赖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//2.通过set方法传入 聚合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//如何处理建房流程，交给指挥者</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">constructorHouse</span><span class="hljs-params">()</span></span>&#123;<br>        houseBuilder.buildBasic();<br>        houseBuilder.buildWalls();<br>        houseBuilder.roofed();<br>        <span class="hljs-keyword">return</span> houseBuilder.BuildHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个产品类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//普通房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子打地基五米&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子砌墙10cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//高楼</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HighBuilding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼打地基50&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼砌墙20cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼透明屋顶&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//盖普通房子</span><br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        <span class="hljs-comment">//准备创建房子的指挥者</span><br>        HouseDirector houseDirector = <span class="hljs-keyword">new</span> HouseDirector(commonHouse);<br>        <span class="hljs-comment">//完成盖房子，返回产品（房子）</span><br>        House house = houseDirector.constructorHouse();<br><br>        <span class="hljs-comment">//盖高楼</span><br>        HighBuilding highBuilding = <span class="hljs-keyword">new</span> HighBuilding();<br>        houseDirector.setHouseBuilder(highBuilding);<br>        House house1 = houseDirector.constructorHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/improveBuilder-1637309987736.jpg" alt="java"></p><p><code>JDK</code>中用到的建造者模式 <code>java.lang.StringBuilder</code></p><ul><li><code>Appendable</code>接口定义了多个append方法（抽象方法） ， 即<code>Appendable</code>为建造者，定义了抽象方法</li><li><code>AbstractStringBuilder</code>已经是建造者，只是不能实例化</li><li><code>StringBuilder</code>即充当了指挥者角色，同时同时充当了具体的建造者。建造方法的实现是由<code>AbstractStringBuilder</code>完成，而<code>StringBuilder</code>继承了<code>AbstractStringBuilder</code></li></ul><p><strong>建造者模式的注意事项和细节</strong></p><ol><li><p>客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p></li><li><p>建造者模式所创建的产品一般具有较多相同的共同点，其组成部分相似，如果产品之间的差异性很大，则不是和使用建造者模式，因此其使用范围收到一定的限制。</p></li><li><p>如果产品内部变化复杂，可能会导致需要定义很多具体建造者来实现这种变化，导致系统变得庞大，因此要考虑是否适合选择建造者模式。</p></li><li><p>每一个具体的建造者都相对独立，而与其他的具体建造者无关，因此可以很方便的替换具体建造者或者增加新的具体建造者，用户使用不同的建造者即可得到不同的产品对象。</p></li><li><p>可以更加精细的控制产品的建造过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建流程。</p></li><li><p>增加新的具体创建者无需修改原油类库的代码，指挥者针对抽象建造者类变成，系统扩展方便，符合开闭原则。</p><blockquote><p><strong>抽象工厂模式和建造者模式</strong></p></blockquote><p>抽象工厂模式实现对产品家族的创建，一个产品家族是一系列产品，具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产。而建造者模式则是按照指定的蓝图构建产品，它的主要目的是通过组装零配件而生产一个新的产品。</p></li></ol><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>基本介绍</p><ol><li>适配器模式(<code>Adapter Pattern</code>)将某个类的接口转换成客户端期望的另一个接口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper)</li><li>适配器模式属于结构型模式</li><li>主要分为三类:类适配器模式，对象适配器模式  ，接口适配器模式   </li></ol><p>工作原理</p><ul><li>适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容</li><li>从用户的角度看不到适配者，是解耦的。</li><li>用户调用适配器转换出来的目标接口方法，适配器再调用被适配者的相关接口方法</li><li>用户收到反馈结果，只感觉是和目标接口交互</li></ul><h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:被适配的类 src 提供方、</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Voltage220V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output220V</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> src = <span class="hljs-number">220</span>;<br>        System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//充电接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:适配器类</span><br><span class="hljs-comment"> * 继承被适配的类 实现适配器类的接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoltageAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Voltage220V</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Voltage5V</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> srcV  = output220V();<br>        <span class="hljs-keyword">int</span> destV = srcV/<span class="hljs-number">44</span>;<br>        <span class="hljs-keyword">return</span> destV;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>：手机 有充电方法 依赖了一个接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    <span class="hljs-comment">//充电方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span> <span class="hljs-params">(Voltage5V iVoltage)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (iVoltage.output5V() == <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压为5V，可冲&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage.output5V() &gt; <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压大于5V 无法充电&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====类适配器模式&quot;</span>);<br>        Phone phone = <span class="hljs-keyword">new</span> Phone();<br>        phone.charging(<span class="hljs-keyword">new</span> VoltageAdapter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类适配器模式注意事项和细节</p><ol><li>Java是单继承机制 ，所以类适配器需要继承<code>src</code>这一点算是一个缺点，因为这要求<code>dst</code>必须是接口，有一定的局限性</li><li><code>src</code>类的方法在Adapter中都会暴露出来，增加了使用成本</li><li>由于其继承了<code>src</code>类，所以它可以根据需求重写<code>src</code>类的方法，使得Adapter的灵活性增强了\</li></ol><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>基本介绍</p><ol><li>基本思路和类的适配器相同，只是将Adapter类做修改，不是继承<code>src</code>类，而是持有<code>src</code>的类型，以解决兼容问题。即：持有<code>src</code>类，实现<code>dst</code>类接口，完成<code>src</code>-&gt;<code>dst</code>的适配。</li><li>根据“合成复用原则”，在系统中尽量使用关联关系来代替继承关系。</li><li>对象适配器模式是适配器模式常用的一种</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:被适配的类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Voltage220V</span> </span>&#123;<br>    <span class="hljs-comment">//提供220电压</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output220V</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> src = <span class="hljs-number">220</span>;<br>        System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//适配接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:适配器类</span><br><span class="hljs-comment"> * 继承被适配的类 实现适配器类的接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoltageAdapter</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Voltage220V voltage220;<br>    <span class="hljs-comment">//通过构造器 传入一个Voltage220V 实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VoltageAdapter</span><span class="hljs-params">(Voltage220V voltage220)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.voltage220 = voltage220;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> destV = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != voltage220)&#123;<br>            <span class="hljs-keyword">int</span> src = voltage220.output220V();<span class="hljs-comment">//获取220V电压</span><br>            System.out.println(<span class="hljs-string">&quot;适配器适配&quot;</span>);<br>            destV = src /<span class="hljs-number">44</span>;<br>            System.out.println(<span class="hljs-string">&quot;适配完成，输出的电压为&quot;</span> + destV);<br>        &#125;<br>        <span class="hljs-keyword">return</span> destV;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>：手机 有充电方法 依赖了一个接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    <span class="hljs-comment">//充电方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span> <span class="hljs-params">(Voltage5V iVoltage)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (iVoltage.output5V() == <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压为5V，可冲&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage.output5V() &gt; <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压大于5V 无法充电&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====对象适配器模式&quot;</span>);<br>        Phone phone = <span class="hljs-keyword">new</span> Phone();<br>        phone.charging(<span class="hljs-keyword">new</span> VoltageAdapter(<span class="hljs-keyword">new</span> Voltage220V() ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对象适配器模式注意事项和细节</p><ol><li>对象适配器和类适配器算是同一种思想，只不过是实现方式不同。根据合成服用原则，使用组合替代继承，所以他解决了适配器必须继承<code>src</code>的局限性问题，也不再要修<code>dst</code>必须是接口。</li><li>使用成本更低，更灵活</li></ol><h4 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h4><p>基本介绍</p><ol><li>一些书籍称为：适配器模式（Default Adapter Pattern）或缺省适配器模式。</li><li>当不需要全部实现接口提供的方法时，可以设计一个抽象类实现接口，并为该接口中每一个方法提供一个<strong>默认实现（空方法）</strong>，那么该抽象类的子类可有选择的覆盖父类的某些方法实现需求。</li><li>适用于一个接口不想使用其所有的方法的情况。</li></ol><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ul><li><code>SpringMVC</code>中的<code>HandlerAdapter</code>就使用到了适配器模式 <strong>很牛逼，但是现在看不懂，记得回来看~</strong></li></ul><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ol><li>三种命名方式，是根据<code>src</code>以怎样的形式给到Adapter(在<code>Adapte</code>里的形式)来命名的。</li><li>三种适配器<ul><li>类适配器：以类给到，在Adapter里，就是将<code>src</code>当做类继承</li><li>对象适配器：以对象给到，在Adapter里，将<code>src</code>作为一个对象持有</li><li>接口适配器：以接口给到，在Adapter里，将<code>src</code>作为一个接口，实现</li></ul></li><li>Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作。</li><li>实际开发中 实现不拘泥于这三种经典形式</li></ol><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>问题分析：类爆炸问题。</p><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>桥接模式(Bridge)：将实现与抽象类在两个不同的类层次中，使两个层次可以独立改变</li><li>Bridge基于类的最小设计原则，通过使用继承，聚合，封装等不同方式来让不同的类承担不同的职责。它的主要特点是把抽象(Abstraction)和实现(Implementation)分离开，从而可以保证各个部分的独立性以及对他们的功能扩展</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//Vivo实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vivo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机开机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机关机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机打电话 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//XiaoMi实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaoMi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机开机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机关机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机打电话 &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象成 桥</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//组合品牌</span><br><span class="hljs-keyword">private</span> Brand brand;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Phone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<span class="hljs-keyword">this</span>.brand = brand;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">this</span>.brand.open();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>brand.close();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>brand.call();<br>&#125;<br>&#125;<br><span class="hljs-comment">//两个抽象子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpRightPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UpRightPhone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(brand);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.open();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.close();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.call();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//折叠式手机类，继承 抽象类 Phone</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FoldedPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FoldedPhone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(brand);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.open();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.close();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.call();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端实现方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//获取折叠式手机 (样式 + 品牌 )</span><br>Phone phone1 = <span class="hljs-keyword">new</span> FoldedPhone(<span class="hljs-keyword">new</span> XiaoMi());<br>phone1.open();<br>phone1.call();<br>phone1.close();<br><br>Phone phone2 = <span class="hljs-keyword">new</span> FoldedPhone(<span class="hljs-keyword">new</span> Vivo());<br>phone2.open();<br>phone2.call();<br>phone2.close();<br><br>UpRightPhone phone3 = <span class="hljs-keyword">new</span> UpRightPhone(<span class="hljs-keyword">new</span> XiaoMi());<br>phone3.open();<br>phone3.call();<br>phone3.close();<br><br>UpRightPhone phone4 = <span class="hljs-keyword">new</span> UpRightPhone(<span class="hljs-keyword">new</span> Vivo());<br>phone4.open();<br>phone4.call();<br>phone4.close();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><ol><li><code>JDBC</code>的Driver接口，从桥接模式来看，Driver就是一个接口，下面可以有<code>Mysql</code>的Driver，也可以有<code>Orical</code>的Driver，这些就可以当做实现接口类</li></ol><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/JDBCqiaojie.jpg" alt="java"></p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ol><li>实现了抽象和实现类的分离，极大地提升了系统的灵活性，让抽象类和实现类部分独立开，有助于系统实现分层设计，从而产生更好的结构化系统。</li><li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口即可，其他的部分有具体业务来完成。</li><li>桥接模式替代了多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。</li><li>桥接模式的引入增加了系统的理解和设计难度，由于聚和关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。</li><li>桥接模式要求正确识别出系统两个独立变化的维度，因此适用范围有一定的局限性。</li><li>常见的应用场景:<ul><li><code>JDBC</code>驱动系统</li><li>银行转账系统<ul><li>转账分类：网上转账，柜台转账，ATM转账</li><li>转账用户类型：普通用户，银卡用户，金卡用户…</li></ul></li><li>消息管理<ul><li>消息类型：即使消息，延时消息..</li><li>消息分类：短信，<code>QQ</code>，微信..</li></ul></li></ul></li></ol><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><blockquote><p><strong>定义</strong>：<strong>动态的将新功能附加到对象上</strong>，在对象功能扩展方面，比继承更有弹性，也体现了开闭原则(<code>OCP</code>)</p></blockquote><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><ul><li>星巴克咖啡订单项目(咖啡馆)</li><li>咖啡种类/单品咖啡：咖啡种类/单品咖啡:Espresso(意大利浓咖啡)、<code>ShortBlack</code>、<code>LongBlack</code>(美式咖啡)、Decaf(无因咖啡)</li><li>调料:Milk、Soy(豆浆)、Chocolate</li><li>要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便</li><li>使用<code>OO</code>的来计算不同种类咖啡的费用:客户可以点单品咖啡，也可以单品咖啡+调料组合。</li></ul><p>分析，一份单品咖啡可能有多份调料，而且单品咖啡和调料应该易于扩展，符合开闭原则。所以不能把单品咖啡和调料融合在一起，应该把咖啡当做<strong>被装饰者</strong>，调料当成<strong>装饰者</strong>，实现调料的具体子类为修饰着。图解图下</p><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/decorator.jpg" alt="java"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//总抽象类Drink 被装饰者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-keyword">public</span> String des; <span class="hljs-comment">// 描述</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> price = <span class="hljs-number">0.0f</span>;<br><span class="hljs-comment">//...实现get 和 set方法</span><br>    <br><span class="hljs-comment">//计算费用的抽象方法</span><br><span class="hljs-comment">//子类来实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//咖啡类 作为缓存层  旗下是单体咖啡实类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coffee</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice();<br>&#125;<br>&#125;<br><span class="hljs-comment">//两种咖啡种类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeCaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coffee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeCaf</span><span class="hljs-params">()</span> </span>&#123;<br>setDes(<span class="hljs-string">&quot; 无因咖啡 &quot;</span>); <span class="hljs-comment">//介绍</span><br>setPrice(<span class="hljs-number">1.0f</span>);<span class="hljs-comment">//咖啡价格</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Espresso</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coffee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Espresso</span><span class="hljs-params">()</span> </span>&#123;<br>setDes(<span class="hljs-string">&quot; 意大利咖啡 &quot;</span>);<br>setPrice(<span class="hljs-number">6.0f</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Decorator装饰者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-keyword">private</span> Drink obj; <span class="hljs-comment">//被装饰者</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Decorator</span><span class="hljs-params">(Drink obj)</span> </span>&#123; <span class="hljs-comment">//组合被装饰者</span><br><span class="hljs-keyword">this</span>.obj = obj;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// getPrice 自己价格</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice() + obj.cost();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// obj.getDes() 输出被装饰者的信息</span><br><span class="hljs-keyword">return</span> des + <span class="hljs-string">&quot; &quot;</span> + getPrice() + <span class="hljs-string">&quot; &amp;&amp; &quot;</span> + obj.getDes();<br>&#125;<br>&#125;<br><span class="hljs-comment">//具体的Decorator， 这里就是调味品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Milk</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 牛奶 &quot;</span>);<br>setPrice(<span class="hljs-number">2.0f</span>); <br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Soy</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 豆浆  &quot;</span>);<br>setPrice(<span class="hljs-number">1.5f</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chocolate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chocolate</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 巧克力 &quot;</span>);<br>setPrice(<span class="hljs-number">3.0f</span>); <span class="hljs-comment">// 调味品 的价格</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//具体实现代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoffeeBar</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span><br><br><span class="hljs-comment">// 1. 点一份 LongBlack</span><br>Drink order = <span class="hljs-keyword">new</span> LongBlack();<br>System.out.println(<span class="hljs-string">&quot;费用1=&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;描述=&quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 2. order 加入一份牛奶</span><br>order = <span class="hljs-keyword">new</span> Milk(order);<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 描述 = &quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 3. order 加入一份巧克力</span><br>order = <span class="hljs-keyword">new</span> Chocolate(order);<br><br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力  费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力 描述 = &quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 3. order 加入一份巧克力</span><br>order = <span class="hljs-keyword">new</span> Chocolate(order);<br><br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力   费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力 描述 = &quot;</span> + order.getDes());<br>System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br><br>Drink order2 = <span class="hljs-keyword">new</span> DeCaf();<br><br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡  费用 =&quot;</span> + order2.cost());<br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 描述 = &quot;</span> + order2.getDes());<br><br>order2 = <span class="hljs-keyword">new</span> Milk(order2);<br><br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 加入一份牛奶  费用 =&quot;</span> + order2.cost());<br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 加入一份牛奶 描述 = &quot;</span> + order2.getDes());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p>Java的IO结构，<code>FilterInputStream</code>就是一个<strong>装饰者</strong></p></blockquote><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/InputStream.jpg" alt="java"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoratorToJDKIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">/*说明</span><br><span class="hljs-comment">            1. InputStream是抽象类,类似我们前面讲的 Drink</span><br><span class="hljs-comment">            2.FileInputStream是 InputStream子类，类似我们前面的 DeCaf, LongBlack</span><br><span class="hljs-comment">            3.FilterInputStream是 InputStream子类:类似我们前面的Decorator修饰者</span><br><span class="hljs-comment">            4. DatalnputStream是 FilterInputStream子类，具体的修饰者，类似前面的 Milk, Soy 等</span><br><span class="hljs-comment">            5.FilterInputStream类有protected volatile InputStream in;即含被装饰者</span><br><span class="hljs-comment">            6.分析得出在jdk 的io体系中，就是使用装饰者模式</span><br><span class="hljs-comment">         */</span><br>        DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;/&quot;</span>));<br>        System.out.println(dis.read());<br>        dis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h4 id="案例分析："><a href="#案例分析：" class="headerlink" title="案例分析："></a>案例分析：</h4><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/composition.png" alt="java"></p><p>传统方案解决问题分析</p><ul><li>将学院看做了学校的子类，将专业看做了学院的子类，相当于从组织大小进行分成</li><li>但是这样不能很好的实现管理操作，比如增删改查。</li><li>解决方案，把学校，学院，专业当做组织结构，她们之间没有继承关系，而是一个树形结构，可以更好的实现管理操作，=&gt; 组合模式</li></ul><h4 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>组合模式(Composite Patterm）)，又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系。</li><li>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</li><li>组合模式使得用户对单个对象和组合对象的访问具有一致性，即:组合能让客户以一致的方式处理个别对象以及组合对象</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名字</span><br><span class="hljs-keyword">private</span> String des; <span class="hljs-comment">// 说明</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//默认实现</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<span class="hljs-comment">//不支持操作异常</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//默认实现</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>&#125;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrganizationComponent</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.des = des;<br>&#125;<br><span class="hljs-comment">//实现getset方法。。。。</span><br><br><span class="hljs-comment">//方法print, 做成抽象的, 子类都需要实现</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//College</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">College</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br><span class="hljs-comment">//List 中 存放的Department</span><br>List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">College</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><span class="hljs-comment">// 重写add</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样</span><br>organizationComponents.add(organizationComponent);<br>&#125;<br><span class="hljs-comment">// 重写remove</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.remove(organizationComponent);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">//遍历 organizationComponents </span><br><span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>organizationComponent.print();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//University 就是 Composite , 可以管理College</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">University</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br>List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">University</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><br><span class="hljs-comment">// 重写add</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.add(organizationComponent);<br>&#125;<br><br><span class="hljs-comment">// 重写remove</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.remove(organizationComponent);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><br><span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">//遍历 organizationComponents </span><br><span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>organizationComponent.print();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Department</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br><span class="hljs-comment">//没有集合</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Department</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><span class="hljs-comment">//add , remove 就不用写了，因为他是叶子节点</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Client实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//从大到小创建对象 学校</span><br>OrganizationComponent university = <span class="hljs-keyword">new</span> University(<span class="hljs-string">&quot;清华大学&quot;</span>, <span class="hljs-string">&quot; 中国顶级大学 &quot;</span>);<br><br><span class="hljs-comment">//创建 学院</span><br>OrganizationComponent computerCollege = <span class="hljs-keyword">new</span> College(<span class="hljs-string">&quot;计算机学院&quot;</span>, <span class="hljs-string">&quot; 计算机学院 &quot;</span>);<br>OrganizationComponent infoEngineercollege = <span class="hljs-keyword">new</span> College(<span class="hljs-string">&quot;信息工程学院&quot;</span>, <span class="hljs-string">&quot; 信息工程学院 &quot;</span>);<br><br><span class="hljs-comment">//创建各个学院下面的系(专业)</span><br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;软件工程&quot;</span>, <span class="hljs-string">&quot; 软件工程不错 &quot;</span>));<br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;网络工程&quot;</span>, <span class="hljs-string">&quot; 网络工程不错 &quot;</span>));<br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;计算机科学与技术&quot;</span>, <span class="hljs-string">&quot; 计算机科学与技术是老牌的专业 &quot;</span>));<br><br><span class="hljs-comment">//</span><br>infoEngineercollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;通信工程&quot;</span>, <span class="hljs-string">&quot; 通信工程不好学 &quot;</span>));<br>infoEngineercollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;信息工程&quot;</span>, <span class="hljs-string">&quot; 信息工程好学 &quot;</span>));<br><br><span class="hljs-comment">//将学院加入到 学校</span><br>university.add(computerCollege);<br>university.add(infoEngineercollege);<br><br><span class="hljs-comment">//university.print();</span><br>infoEngineercollege.print();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><p>注意事项和细节</p><ol><li>简化客户端操作，客户端只需要面对一致的对象而不用考虑整体部分或者叶子结点的问题。</li><li>具有较强的扩展性，当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动。</li><li>方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加结点或者叶子从而创建出复杂的树形结构</li><li>需要便利组织结构，或者处理的对象具有树形结构时，非常适合使用组合模式</li><li>要求较高的抽象性， 如果结点和叶子具有很多差异性的话，比如很多方法和属性都不一样，不适合用组合模式</li></ol><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h4 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>外观模式(Facade)，也叫“过程模式” : 外观模式为子系统的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</li><li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关系这个子系统的内部细节</li></ul><p>原理类图说明(外观模式的角色)</p><ol><li>外观类(Facade):为调用端提供统一的调用接口，外观类知道哪些子类系统负责处理请求，从而将调用端的请求代理给适当的子系统对象</li><li>调用者(Client):外观接口的调用者</li><li>子系统的集合:指模块或者子系统，处理Facade对象指派的任务，他是功能的提供者</li></ol><p>外观模式就是解决多个复杂接口带来的使用困难，起到简化用户使用的作用。</p><h4 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p><code>Mybatis</code>中的configuration中使用了外观模式，</p><p>用户只需要传递一个Object，调用<code>metaObject</code>方法，而<code>getMetaObeject</code>方法中则组合了一系列<code>ObjectFactory</code>,一次判断返回的实例。相当于简化了用户的操作，在内部实现了一系列逻辑、</p><p>当我们调用子系统变得很困难的时候，以更高一层的接口来调用子系统，来提高系统使用和复用。</p></blockquote><p>外观模式的注意事项和细节</p><ol><li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li><li>外观模式对客户端与子系统的耦合关系，让子系统内部的模块更易维护和扩展</li><li>通过合理使用外观模式，可以帮助我们更好的划分访问的层次</li><li>当系统需要进行分层设计时，可以考虑使用Facade模式</li><li>在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性</li><li>不能过多的或者不合理的使用外观模式，使用外观模式好还是直接调用模块好。要以让系统有层次，利于维护为目的。</li></ol><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h4 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h4><p>小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同:</p><ul><li>有客户要求以新闻的形式发布</li><li>有客户人要求以博客的形式发布</li><li>有客户希望以微信公众号的形式发布</li></ul><blockquote><p>1)需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理,<br>相当于一个相同网站<br>的实例对象很多，造成服务器的资源浪费<br>2)解决思路:整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源<br>都可以达成共享，减少服务器资源<br>3)对于代码来说，由于是一份实例，维护和扩展都更加容易<br>4)上面的解决思路就可以使用享元模式来解决</p></blockquote><h4 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li><p>享元模式(Flyweight Pattern)也叫蝇量模式:运用共享技术有效地支持大量细粒度的对象</p></li><li><p>常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个</p></li><li><p>享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率</p></li><li><p>享元模式经典的应用场景就是池技术了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式</p></li></ol><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/xiangyuan.jpg" alt="java"></p><blockquote><p>对类图的说明<br>对原理图的说明-即(模式的角色及职责)</p><ol><li><code>FlyWeight</code>是抽象的享元角色，他是产品的抽象类,同时定义出对象的外部状态和内部状态(后面介绍)的接口或实现</li><li><code>ConcreteFlyWeight</code>是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务</li><li><code>UnSharedConcreteFlyWeight</code>是不可共享的角色，一般不会出现在享元工厂。</li><li><code>FlyWeightFactory</code>享元工厂类，用于构建一个池容器(集合)，同时提供从池中获取对象方法</li></ol></blockquote><p>类似线程池，享元共享的数据是不可变的，可以共享资源。如果没有就创建，有就直接拿来用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123; <br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>&#125;<br><span class="hljs-comment">//网站的抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSite</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-comment">//抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 网站工厂类，根据需要返回压一个网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSiteFactory</span> </span>&#123;<br><br><span class="hljs-comment">//集合， 充当池的作用</span><br><span class="hljs-keyword">private</span> HashMap&lt;String, ConcreteWebSite&gt; pool = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br><span class="hljs-comment">//根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> WebSite <span class="hljs-title">getWebSiteCategory</span><span class="hljs-params">(String type)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!pool.containsKey(type)) &#123;<br><span class="hljs-comment">//就创建一个网站，并放入到池中</span><br>pool.put(type, <span class="hljs-keyword">new</span> ConcreteWebSite(type));<br>&#125;<br><br><span class="hljs-keyword">return</span> (WebSite)pool.get(type);<br>&#125;<br><br><span class="hljs-comment">//获取网站分类的总数 (池中有多少个网站类型)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWebSiteCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> pool.size();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//具体网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteWebSite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSite</span> </span>&#123;<br><span class="hljs-comment">//共享的部分，内部状态</span><br><span class="hljs-keyword">private</span> String type = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//网站发布的形式(类型)</span><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteWebSite</span><span class="hljs-params">(String type)</span> </span>&#123;<br><br><span class="hljs-keyword">this</span>.type = type;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">(User user)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;网站的发布形式为:&quot;</span> + type + <span class="hljs-string">&quot; 在使用中 .. 使用者是&quot;</span> + user.getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Client 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建一个工厂类</span><br>WebSiteFactory factory = <span class="hljs-keyword">new</span> WebSiteFactory();<br><span class="hljs-comment">// 客户要一个以新闻形式发布的网站</span><br>WebSite webSite1 = factory.getWebSiteCategory(<span class="hljs-string">&quot;新闻&quot;</span>);<br><br>webSite1.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;tom&quot;</span>));<br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite2 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite2.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;jack&quot;</span>));<br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite3 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite3.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;smith&quot;</span>));<br><br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite4 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite4.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;king&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;网站的分类共=&quot;</span> + factory.getWebSiteCount());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-4"><a href="#源码分析-4" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyWeight</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//如果 Integer.valueOf(x) x 在  -128 --- 127 直接，就是使用享元模式返回,如果不在</span><br><span class="hljs-comment">//范围类，则仍然 new </span><br><span class="hljs-comment">//小结:</span><br><span class="hljs-comment">//1. 在valueOf 方法中，先判断值是否在 IntegerCache 中，</span><br>         <span class="hljs-comment">//如果不在，就创建新的Integer(new), 否则，就直接从 缓存池返回</span><br><span class="hljs-comment">//2. valueOf 方法，就使用到享元模式</span><br><span class="hljs-comment">//3. 如果使用valueOf 方法得到一个Integer 实例，范围在 -128 - 127 ，执行速度比 new 快</span><br><br>Integer x = Integer.valueOf(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 x实例，类型 Integer</span><br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 y 实例，类型 Integer</span><br>Integer z = Integer.valueOf(<span class="hljs-number">127</span>);<span class="hljs-comment">//..</span><br>Integer w = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">127</span>);<br><br>System.out.println(x.equals(y)); <span class="hljs-comment">// 大小，true</span><br>System.out.println(x == y ); <span class="hljs-comment">//  false</span><br>System.out.println(x == z ); <span class="hljs-comment">// true</span><br>System.out.println(w == x ); <span class="hljs-comment">// false</span><br>System.out.println(w == y ); <span class="hljs-comment">// false</span><br><br>Integer x1 = Integer.valueOf(<span class="hljs-number">200</span>);<br>Integer x2 = Integer.valueOf(<span class="hljs-number">200</span>);<br>System.out.println(<span class="hljs-string">&quot;x1==x2&quot;</span> + (x1 == x2)); <span class="hljs-comment">// false</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ol><li>享元模式中的享可以理解为共享，元理解为对象，就是共享对象模式。比如共享连接池</li><li>系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</li><li>用唯一标识码判断，如果内存中有，则返回这个唯一标识码所标识的对象，用<code>HashMap/HashTable</code>存储</li><li>享元模式大大的减少了对象的创建，降低了程序内存的占用，提高效率。</li><li>享元模式提高了系统的复杂度，因为需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这点在使用享元模式需要注意。</li><li>使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制，</li><li>享元模式经典的应用场景是需要缓冲池，比如String常量池，数据库连接池，以及围棋观赛黑白子对象。</li></ol><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><h4 id="案例分析-3"><a href="#案例分析-3" class="headerlink" title="案例分析"></a>案例分析</h4><p>制作豆浆</p><h4 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>模板方法模式(Template  Method Pattern) ,在一个抽象类公开了执行它的方法的模板。它的子类可以按需重写方法实现，但调用将以抽象类中定义的方法执行。</li><li>简单说模板方法模式定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构就可以重定义该算法的某些步骤。</li></ol><p>原理类图说明</p><ul><li><code>AbstractClass</code> 抽象类，类中实现了模板方法，定义了算法的骨架，具体子类需要去实现 其他的抽象方法</li><li><code>ConcreateClass</code> 实现抽象方法，已完成算法中特点子类的步骤</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象类，表示豆浆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><br><span class="hljs-comment">//模板方法, make , 模板方法可以做成final , 不让子类去覆盖.</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">()</span> </span>&#123;<br>select(); <br><span class="hljs-keyword">if</span>(customerWantCondiments()) &#123; <span class="hljs-comment">//判断是实现默认方法还是子类重写的方法</span><br>addCondiments();<br>&#125;<br>soak();<br>beat();<br>&#125;<br><br><span class="hljs-comment">//选材料</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第一步：选择好的新鲜黄豆  &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//添加不同的配料， 抽象方法, 子类具体实现</span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//浸泡</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">soak</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第三步， 黄豆和配料开始浸泡， 需要3小时 &quot;</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">beat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第四步：黄豆和配料放到豆浆机去打碎  &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//钩子方法，决定是否需要添加配料</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">customerWantCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedBeanSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 加入上好的红豆 &quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PureSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//空实现</span><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">customerWantCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PeanutSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 加入上好的花生 &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;----制作红豆豆浆----&quot;</span>);<br>SoyaMilk redBeanSoyaMilk = <span class="hljs-keyword">new</span> RedBeanSoyaMilk();<br>redBeanSoyaMilk.make();<br><br>System.out.println(<span class="hljs-string">&quot;----制作花生豆浆----&quot;</span>);<br>SoyaMilk peanutSoyaMilk = <span class="hljs-keyword">new</span> PeanutSoyaMilk();<br>peanutSoyaMilk.make();<br><br>System.out.println(<span class="hljs-string">&quot;----制作纯豆浆----&quot;</span>);<br>SoyaMilk pureSoyaMilk = <span class="hljs-keyword">new</span> PureSoyaMilk();<br>pureSoyaMilk.make();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在模板方法中添加一个钩子方法默认不做事，子类就可以根据狗子方法来决定是否覆盖这个方法。</p><p>这样就可以默认实现了</p><h4 id="源码分析-5"><a href="#源码分析-5" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p>Spring中 <code>IOC</code>容器初始化的时候 使用了模板模式</p></blockquote><h4 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h4><ol><li>基本思想是，算法只存在于一个地方，也就是在父类中，容易修改。修改算法时，只需要修改父类方法或者已经实现的某些步骤，子类就会继承这些修改。</li><li>实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。</li><li>即统一了算法，也提供了很大的灵活性，父类的模板方法确保了算法结构保持不变，同时由子类提供部分步骤的实现。</li><li>该模式不足之处是 每一个不同的实现都需要一个子类实现，容易导致类的个数增加导致系统庞大</li><li>一般方法都加上关键字final，防止子类重写模板方法</li><li>模板方法使用场景：当要完成在某个过程，该过程要执行一系列步骤，这一系列的步骤基本相同，单个别步骤在实现的时候可能不同，通常考虑用模板方法来处理。</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h4 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h4><p>1)我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装 <code>app</code>就可以控制对这些家电<br>工作。<br>2)这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个<code>App</code>，分别控制，我们希望只要一个<code>app</code><br>就可以控制全部智能家电。<br>3)要实现一个<code>app</code>控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给app调用，这时就<br>可以考虑使用命令模式。<br>4)命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.<br>5)在我们的例子中，动作的请求者是手机 <code>app</code>，动作的执行者是每个厂商的一个家电产品</p><h4 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>命令模式(Command Pattern):在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收<br>者是谁，也不知道被请求的操作是哪个，<br>我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计</li><li>命名模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</li><li>在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求(即命名)，同时命令模式<br>也支持可撤销的操作。</li><li>通俗易懂的理解:将军发布命令，士兵去执行。其中有几个角色:将军(命令发布者)、士兵(命令的具体执<br>行者)、命令(连接将军和士兵)。<br><code>lInvoker</code>是调用者（将军)，Receiver是被调用者（士兵)，<code>MyCommand</code>是命令，实现了Command接口，持有接收对象</li></ul><h4 id="原理类图分析"><a href="#原理类图分析" class="headerlink" title="原理类图分析"></a>原理类图分析</h4><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>类图分析：</p><p><img src="http://www.slx.blue/2021/12/03/javaDesignMode/command.png" alt="java"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建命令接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//执行动作(操作)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//撤销动作(操作)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//关灯命令</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">// 聚合LightReceiver</span><br>LightReceiver light;<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LightOffCommand</span><span class="hljs-params">(LightReceiver light)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.light = light;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 调用接收者的方法</span><br>light.off();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 调用接收者的方法</span><br>light.on();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//开灯命令</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//聚合LightReceiver</span><br>LightReceiver light;<br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LightOnCommand</span><span class="hljs-params">(LightReceiver light)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.light = light;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用接收者的方法</span><br>light.on();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用接收者的方法</span><br>light.off();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做</span><br><span class="hljs-comment"> * 其实，这样是一种设计模式, 可以省掉对空判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//只需要实现两个空方法 钩子</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//任务接收者 执行者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightReceiver</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">on</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 电灯打开了.. &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">off</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 电灯关闭了.. &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//控制器 遥控器 Invoker 任务发布者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteController</span> </span>&#123;<br><br><span class="hljs-comment">// 开 按钮的命令数组</span><br>Command[] onCommands;<br>Command[] offCommands;<br><br><span class="hljs-comment">// 执行撤销的命令</span><br>Command undoCommand;<br><br><span class="hljs-comment">// 构造器，完成对按钮初始化</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RemoteController</span><span class="hljs-params">()</span> </span>&#123;<br>onCommands = <span class="hljs-keyword">new</span> Command[<span class="hljs-number">5</span>];<br>offCommands = <span class="hljs-keyword">new</span> Command[<span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>onCommands[i] = <span class="hljs-keyword">new</span> NoCommand();<br>offCommands[i] = <span class="hljs-keyword">new</span> NoCommand();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 给我们的按钮设置你需要的命令</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommand</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, Command onCommand, Command offCommand)</span> </span>&#123;<br>onCommands[no] = onCommand;<br>offCommands[no] = offCommand;<br>&#125;<br><br><span class="hljs-comment">// 按下开按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onButtonWasPushed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123; <span class="hljs-comment">// no 0</span><br><span class="hljs-comment">// 找到你按下的开的按钮， 并调用对应方法</span><br>onCommands[no].execute();<br><span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>undoCommand = onCommands[no];<br><br>&#125;<br><br><span class="hljs-comment">// 按下开按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">offButtonWasPushed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123; <span class="hljs-comment">// no 0</span><br><span class="hljs-comment">// 找到你按下的关的按钮， 并调用对应方法</span><br>offCommands[no].execute();<br><span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>undoCommand = offCommands[no];<br><br>&#125;<br><br><span class="hljs-comment">// 按下撤销按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undoButtonWasPushed</span><span class="hljs-params">()</span> </span>&#123;<br>undoCommand.undo();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Client客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//使用命令设计模式，完成通过遥控器，对电灯的操作</span><br><span class="hljs-comment">//创建电灯的对象(接受者)</span><br>LightReceiver lightReceiver = <span class="hljs-keyword">new</span> LightReceiver();<br><br><span class="hljs-comment">//创建电灯相关的开关命令</span><br>LightOnCommand lightOnCommand = <span class="hljs-keyword">new</span> LightOnCommand(lightReceiver);<br>LightOffCommand lightOffCommand = <span class="hljs-keyword">new</span> LightOffCommand(lightReceiver);<br><br><span class="hljs-comment">//需要一个遥控器</span><br>RemoteController remoteController = <span class="hljs-keyword">new</span> RemoteController();<br><br><span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作</span><br>remoteController.setCommand(<span class="hljs-number">0</span>, lightOnCommand, lightOffCommand);<br><br>System.out.println(<span class="hljs-string">&quot;--------按下灯的开按钮-----------&quot;</span>);<br>remoteController.onButtonWasPushed(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;--------按下灯的关按钮-----------&quot;</span>);<br>remoteController.offButtonWasPushed(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;--------按下撤销按钮-----------&quot;</span>);<br>remoteController.undoButtonWasPushed();<br><br><br><span class="hljs-comment">//如果后期需要扩展新的命令 就非常容易扩展 不需要修改Controller的内容 符合开闭原则</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">System.out.println(&quot;=========使用遥控器操作电视机==========&quot;);</span><br><span class="hljs-comment">TVReceiver tvReceiver = new TVReceiver();</span><br><span class="hljs-comment">TVOffCommand tvOffCommand = new TVOffCommand(tvReceiver);</span><br><span class="hljs-comment">TVOnCommand tvOnCommand = new TVOnCommand(tvReceiver);</span><br><span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 1 是电视机的开和关的操作</span><br><span class="hljs-comment">remoteController.setCommand(1, tvOnCommand, tvOffCommand);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;--------按下电视机的开按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.onButtonWasPushed(1);</span><br><span class="hljs-comment">System.out.println(&quot;--------按下电视机的关按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.offButtonWasPushed(1);</span><br><span class="hljs-comment">System.out.println(&quot;--------按下撤销按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.undoButtonWasPushed();</span><br><span class="hljs-comment">*/</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-6"><a href="#源码分析-6" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p>Spring中的JDBCTemplate中使用了模板模式</p></blockquote><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><blockquote><p>注意事项和细节</p></blockquote><ol><li>将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的execute()方法就可以让接收着工作，而不必知道记得接收着对象谁，如何实现的，命令对象会负责让接受者执行请求的动作，也就是“请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了扭到桥梁的作用。</li><li>容易设计一个命令队列，只要把命令对象放到队列，就可以实现多线程的命令</li><li>容易实现对请求的撤销和重做</li><li>命令模式的不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在使用的时候要注意</li><li>空命令也是一种设计模式，它为我们省去了判空的操作，在上面的案例，如果没有用空命令，那么每一个按键我们都要做判空操作，对编码带来了一定的麻烦。</li><li>命令模式经典的应用场景：界面的一个按钮都是一条命令，模拟CMD（DOS）命令，订单的撤销/恢复、触发反馈机制</li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
