<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java设计模式-01单例模式</title>
      <link href="/2021/12/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-01%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-01%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式有八种方式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs gcode">饿汉式<span class="hljs-comment">(静态常量实例化)</span><br>饿汉式<span class="hljs-comment">(静态代码块实例化)</span><br>懒汉式<span class="hljs-comment">(线程不安全)</span><br>懒汉式<span class="hljs-comment">(线程安全同步方法)</span><br>懒汉式<span class="hljs-comment"><code class="language-hljs gcode">饿汉式<span class="hljs-comment">(静态常量实例化)</span><br>饿汉式<span class="hljs-comment">(静态代码块实例化)</span><br>懒汉式<span class="hljs-comment">(线程不安全)</span><br>懒汉式<span class="hljs-comment">(线程安全同步方法)</span><br>懒汉式<span class="hljs-comment">(同步代码块 ，写法错误)</span> 并不能实现线程安全<br>双重检查<br>静态内部类<br>枚举<br></code></pre></td></tr></table></figure><h4 id="饿汉式-静态常量"><a href="#饿汉式-静态常量" class="headerlink" title="饿汉式(静态常量)"></a>饿汉式(静态常量)</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs smali">class Singleton&#123;<br>    //构造器私有化 外部能new<br>   <span class="hljs-keyword"> private</span> Singleton()&#123;<br>      <br>    &#125;<br>    //本类内部创建对象实例<br>   <span class="hljs-keyword"> private</span><span class="hljs-keyword"> final</span><span class="hljs-keyword"> static</span> Singleton<span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>Singleton();<br><br>//提供一个共有的静态方法 返回实例对象<br>   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> Singleton getInstance()&#123;<br>       <span class="hljs-built_in"><code class="language-hljs smali">class Singleton&#123;<br>    //构造器私有化 外部能new<br>   <span class="hljs-keyword"> private</span> Singleton()&#123;<br>      <br>    &#125;<br>    //本类内部创建对象实例<br>   <span class="hljs-keyword"> private</span><span class="hljs-keyword"> final</span><span class="hljs-keyword"> static</span> Singleton<span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>Singleton();<br><br>//提供一个共有的静态方法 返回实例对象<br>   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> Singleton getInstance()&#123;<br>       <span class="hljs-built_in"> return </span>instance;<br>    &#125;<br>    /*<br>    写法较为简单，在类转载的时候就完成了实例化，避免了线程同步的问题。<br>    缺点是在类装载的时候就完成实例化，没有达到懒加载的效果(Lazy Loading)。<br>    如果从始至终从未使用过这个实例，则会造成内存浪费，<br>    这种基于类加载机制避免了多线程同步的问题，不过instance在类装载的时候就完成实例化，<br>    在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，<br>    因此不能确定有其他的方式导致类装载，这个时候初始化instance就没有达到懒加载的效果<br>    这种单例模式可以用，有可能造成内存浪费<br>*/<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance ;<br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance ;<br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment">//和静态常量类似，在静态代码块完成实例化。 优缺点也和饿汉式静态常量一样</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态方法，当使用这个方法的时候才实例化</span><br>    <span class="hljs-comment">//懒汉式(线程不安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.起到了懒加载的效果，但是只能在多线程下才能使用</span><br><span class="hljs-comment">    2.如果在多线程下 会导致线程不安全 一个线程进入if语句还没执行完 另一个线程也进来了 就会产生多个实例</span><br><span class="hljs-comment">    3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态方法，当使用这个方法的时候才实例化</span><br>    <span class="hljs-comment">//懒汉式(线程不安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.起到了懒加载的效果，但是只能在多线程下才能使用</span><br><span class="hljs-comment">    2.如果在多线程下 会导致线程不安全 一个线程进入if语句还没执行完 另一个线程也进来了 就会产生多个实例</span><br><span class="hljs-comment">    3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a>懒汉式(线程安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个静态方法，加入同步处理的代码，解决了线程安全问题</span><br>    <span class="hljs-comment">//懒汉式(线程安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//synchronized(Singleton.class)&#123; </span><br>            <span class="hljs-comment">//锁放在这里 并不能实现线程安全 因为线程进了if语句 迟早会执行 </span><br>                   instance = <span class="hljs-keyword">new</span> Singleton();<br>            <span class="hljs-comment">//&#125;    </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.解决了线程不安全问题</span><br><span class="hljs-comment">    2.效率太低了，每个线程想获得类的实例的时候 执行getInstance()方法都要进行同步。</span><br><span class="hljs-comment">    而其实这个方法只执行一次实例化就够了，后面想要获得该实例应该是直接return，方法进行同步效率太低</span><br><span class="hljs-comment">    3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个静态方法，加入同步处理的代码，解决了线程安全问题</span><br>    <span class="hljs-comment">//懒汉式(线程安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//synchronized(Singleton.class)&#123; </span><br>            <span class="hljs-comment">//锁放在这里 并不能实现线程安全 因为线程进了if语句 迟早会执行 </span><br>                   instance = <span class="hljs-keyword">new</span> Singleton();<br>            <span class="hljs-comment">//&#125;    </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.解决了线程不安全问题</span><br><span class="hljs-comment">    2.效率太低了，每个线程想获得类的实例的时候 执行getInstance()方法都要进行同步。</span><br><span class="hljs-comment">    而其实这个方法只执行一次实例化就够了，后面想要获得该实例应该是直接return，方法进行同步效率太低</span><br><span class="hljs-comment">    3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双重检查-推荐"><a href="#双重检查-推荐" class="headerlink" title="双重检查(推荐)"></a>双重检查(推荐)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//双重检查</span><br>        <span class="hljs-comment">//提供一个静态的共有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span><br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.双重检查 判断了两次singleton == null 就可以保证线程安全</span><br><span class="hljs-comment">    2.实例化代码只用执行一次 后面再次访问 的时候 如果不为空 就可以直接返回实例化对象 避免了方法反复同步</span><br><span class="hljs-comment">    3.线程安全：实现了懒加载，效率较高</span><br><span class="hljs-comment">    在实际开发中 推荐使用这种单例设计模式</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//双重检查</span><br>        <span class="hljs-comment">//提供一个静态的共有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span><br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    小结：</span><br><span class="hljs-comment">    1.双重检查 判断了两次singleton == null 就可以保证线程安全</span><br><span class="hljs-comment">    2.实例化代码只用执行一次 后面再次访问 的时候 如果不为空 就可以直接返回实例化对象 避免了方法反复同步</span><br><span class="hljs-comment">    3.线程安全：实现了懒加载，效率较高</span><br><span class="hljs-comment">    在实际开发中 推荐使用这种单例设计模式</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-comment">//　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，</span><br>    <span class="hljs-comment">//当有其他线程需要读取时，它会去内存中读取新值。 保证了 可见性。</span><br>    <span class="hljs-comment">// 满足并发编程安全的三大特性 原子性 可见性 有序性</span><br>    <span class="hljs-comment">//构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//写一个静态内部类，该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;    <br>    <br>    <span class="hljs-comment">//提供一个静态方法，直接返回SingletonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>    <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结:</span><br><span class="hljs-comment">    1.这种方式采用的类装载机制来保证初始化实例只有一个线程</span><br><span class="hljs-comment">    2.静态内部类方式在Singleton类被加载的时候并不会立即实例化，而是在需要实例化的时候，</span><br><span class="hljs-comment">    调用getInstacne方法，才会装在SingleInstance类，从而完成Singeleton的实例化</span><br><span class="hljs-comment">    3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，</span><br><span class="hljs-comment">    在类进行初始化的时候，别的线程是无法进入的。</span><br><span class="hljs-comment">    4.避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</span><br><span class="hljs-comment">    在工作中推荐使用</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-comment">//　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，</span><br>    <span class="hljs-comment">//当有其他线程需要读取时，它会去内存中读取新值。 保证了 可见性。</span><br>    <span class="hljs-comment">// 满足并发编程安全的三大特性 原子性 可见性 有序性</span><br>    <span class="hljs-comment">//构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//写一个静态内部类，该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;    <br>    <br>    <span class="hljs-comment">//提供一个静态方法，直接返回SingletonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>    <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结:</span><br><span class="hljs-comment">    1.这种方式采用的类装载机制来保证初始化实例只有一个线程</span><br><span class="hljs-comment">    2.静态内部类方式在Singleton类被加载的时候并不会立即实例化，而是在需要实例化的时候，</span><br><span class="hljs-comment">    调用getInstacne方法，才会装在SingleInstance类，从而完成Singeleton的实例化</span><br><span class="hljs-comment">    3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，</span><br><span class="hljs-comment">    在类进行初始化的时候，别的线程是无法进入的。</span><br><span class="hljs-comment">    4.避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</span><br><span class="hljs-comment">    在工作中推荐使用</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Singleton</span></span>&#123;<br>   INSTANCE;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOK</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;ok~~~&quot;</span>);<br>   &#125;<br>    <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        小结</span><br><span class="hljs-comment">        1.这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题</span><br><span class="hljs-comment">        ，而且还能防止反序列化重新创建新的对象。</span><br><span class="hljs-comment">        2.这种方式是Effective Jaca坐着Josh Bloch提倡的方式</span><br><span class="hljs-comment">        推荐使用</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Singleton</span></span>&#123;<br>   INSTANCE;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOK</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;ok~~~&quot;</span>);<br>   &#125;<br>    <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        小结</span><br><span class="hljs-comment">        1.这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题</span><br><span class="hljs-comment">        ，而且还能防止反序列化重新创建新的对象。</span><br><span class="hljs-comment">        2.这种方式是Effective Jaca坐着Josh Bloch提倡的方式</span><br><span class="hljs-comment">        推荐使用</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>单例模式注意事项和细节说明：</p><p>1)单例模式保证了系统内存中 该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可提高系统的性能<br>2）当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是直接使用new<br>3）单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或者耗费资源过多（即重量级对象），但又经常用到的对象，工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">如果确定实例一定会使用 饿汉式是可以使用的 只是有可能会造成内存浪费 <br>比如java的Runtime中就用了饿汉式 <br>推荐使用： 双重检查、静态内部类、枚举<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式-七大原则</title>
      <link href="/2021/12/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2021/12/06/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h1><p>设计原则核心思想:</p><ol><li><p>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码放在一起。</p></li><li><p> 针对接口编程，而不是针对实现编程。</p></li><li><p>为了交互对象之间的松耦合设计努力  </p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">设计模式常见的七大原则：<br>1)单一职责原则<br>2)接口隔离原则<br>3)依赖倒置原则<br>4)里式替换原则<br>5)开闭原则<br>6)迪米特原则<br>7)合成复用原则<br></code></pre></td></tr></table></figure><ol><li><p>代码重用性</p></li><li><p>可读性</p></li><li><p>可扩展性</p></li><li><p>可靠性</p></li><li><p>高内聚低耦合</p></li></ol><h2 id="单一隔离"><a href="#单一隔离" class="headerlink" title="单一隔离"></a>单一隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">原则上 一个类应该尽量做一件事 一个类继承一个接口 <br>如果实现类两个职责 当职责一进行修改的时候 很可能回对职责二造成影响<br>但是一个类继承一个接口会导致开销过大<br>在接口方法比较少的情况下可以 通过向下兼容 实现方法的单一职责<br></code></pre></td></tr></table></figure><h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">如果一个接口方法过多，实现该接口就会需要去实现很多不需要实现的方法。<br>这个时候我们就应该把接口进行拆分，去实现需要实现的接口即可。<br></code></pre></td></tr></table></figure><h2 id="依赖倒转-倒置"><a href="#依赖倒转-倒置" class="headerlink" title="依赖倒转(倒置)"></a>依赖倒转(倒置)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs actionscript">接口和抽象类的价值在于 设计<br>高层模块不应该依赖于底层模块<br>抽象不应该依赖细节，细节应该依赖抽象<br>面向接口编程<br>传递的三种方式<br><span class="hljs-number">1.</span>构造器传递<br><span class="hljs-number">2.</span><span class="hljs-keyword">set</span>接口传递<br><span class="hljs-number"><code class="language-hljs actionscript">接口和抽象类的价值在于 设计<br>高层模块不应该依赖于底层模块<br>抽象不应该依赖细节，细节应该依赖抽象<br>面向接口编程<br>传递的三种方式<br><span class="hljs-number">1.</span>构造器传递<br><span class="hljs-number">2.</span><span class="hljs-keyword">set</span>接口传递<br><span class="hljs-number">3.</span>接口传递<br>使用接口或者抽象类的目的是制定好规范。而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成<br>多了一个缓冲利于程序的扩展和优化<br><br></code></pre></td></tr></table></figure><h2 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs csharp">问题：在编程中如何正确的实现继承   尽量满足里式替换原则 <br>子类尽量不要重写父类的方法<br>做到透明使用 <br>如果子类想使用父类的方法 ，但是有可能会不小心重写了父类的方法 倒是一系列应用 带来了程序的入侵性<br>所以可以 子类和父类都继承一个新的<span class="hljs-keyword">base</span>类，<span class="hljs-keyword"><code class="language-hljs csharp">问题：在编程中如何正确的实现继承   尽量满足里式替换原则 <br>子类尽量不要重写父类的方法<br>做到透明使用 <br>如果子类想使用父类的方法 ，但是有可能会不小心重写了父类的方法 倒是一系列应用 带来了程序的入侵性<br>所以可以 子类和父类都继承一个新的<span class="hljs-keyword">base</span>类，<span class="hljs-keyword">base</span>类实现了更为基础的代码和方法<br>这样子类可以放心的重写方法<br>达到的效果是 所有应用基类的类应该尽量做到透明使用<br><br></code></pre></td></tr></table></figure><p>​    </p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs fortran">开闭原则是编程中 最基础最重要的原则<br><br>一个软件实体类 模块和函数应该对外扩展开放(对提供方) 对修改关闭(对使用方)  用抽象构建，用实现扩展细节<br>当我们增加一个功能时候 应该增加代码而不是修改代码 尽量不去修改原有的代码 <br>当软件需要变化时 尽量通过扩展软件实体的行为来实现变化 而不是通过修改已有的代码来实现变化<br><br>编程中遵循其他原则以及使用设计模式的目的就是遵循开闭原则<br><br>改进思路分析 把创建的<span class="hljs-built_in">Shape</span>类做成抽象类或者接口，并提供一个抽象的draw方法或者接口，让子类去实现即可。<br>这样有新的图形种类时候 只需要让新的图形去继承<span class="hljs-built_in"><code class="language-hljs fortran">开闭原则是编程中 最基础最重要的原则<br><br>一个软件实体类 模块和函数应该对外扩展开放(对提供方) 对修改关闭(对使用方)  用抽象构建，用实现扩展细节<br>当我们增加一个功能时候 应该增加代码而不是修改代码 尽量不去修改原有的代码 <br>当软件需要变化时 尽量通过扩展软件实体的行为来实现变化 而不是通过修改已有的代码来实现变化<br><br>编程中遵循其他原则以及使用设计模式的目的就是遵循开闭原则<br><br>改进思路分析 把创建的<span class="hljs-built_in">Shape</span>类做成抽象类或者接口，并提供一个抽象的draw方法或者接口，让子类去实现即可。<br>这样有新的图形种类时候 只需要让新的图形去继承<span class="hljs-built_in">Shape</span> 并且实现draw方法即可，这样使用方的代码就不需要修改<br><br>满足了开闭原则<br></code></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">一个对象应该对其他的对象保持最少的了解<br>类与类之间的关系越密切，耦合度越大<br><br>一个类里面 除了传递参数依赖类 应该尽量避免出现其他的陌生类，降低耦合度 这样代码修改起来容易<br><br></code></pre></td></tr></table></figure><h2 id="合成服用原则"><a href="#合成服用原则" class="headerlink" title="合成服用原则"></a>合成服用原则</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs dns">原则是尽量使用合成/聚合 而不是使用继承<br><br>B要想使用<span class="hljs-keyword">A</span>的方法，可以继承于<span class="hljs-keyword">A</span> 但是这样会导致关系太强 耦合度太高<br>组合： 让B 里面注入一个<span class="hljs-keyword">A</span> <br>聚合:  让B里面 set 一个<span class="hljs-keyword">A</span> 或者构造器<br>依赖： 在B里面把<span class="hljs-keyword">A</span>传进来 称之为B依赖<span class="hljs-keyword"><code class="language-hljs dns">原则是尽量使用合成/聚合 而不是使用继承<br><br>B要想使用<span class="hljs-keyword">A</span>的方法，可以继承于<span class="hljs-keyword">A</span> 但是这样会导致关系太强 耦合度太高<br>组合： 让B 里面注入一个<span class="hljs-keyword">A</span> <br>聚合:  让B里面 set 一个<span class="hljs-keyword">A</span> 或者构造器<br>依赖： 在B里面把<span class="hljs-keyword">A</span>传进来 称之为B依赖<span class="hljs-keyword">A</span> 方法<br></code></pre></td></tr></table></figure><h1 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">设计模式分为三种类型，共23种<br>1、创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式<br>2、适配器模式：桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式<br>3、行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、<br>备忘录模式、解释器模式、状态模式、策略模式、责任链模式<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-day02-annotation</title>
      <link href="/2021/12/06/spring-day02/"/>
      <url>/2021/12/06/spring-day02/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-day02"><a href="#spring-day02" class="headerlink" title="spring-day02"></a>spring-day02</h1><h2 id="第一章-基于注解管理bean"><a href="#第一章-基于注解管理bean" class="headerlink" title="第一章 基于注解管理bean"></a>第一章 基于注解管理bean</h2><h3 id="第一节-IOC的相关注解及包扫描"><a href="#第一节-IOC的相关注解及包扫描" class="headerlink" title="第一节 IOC的相关注解及包扫描"></a>第一节 IOC的相关注解及包扫描</h3><h4 id="1-注解的优势"><a href="#1-注解的优势" class="headerlink" title="1. 注解的优势"></a>1. 注解的优势</h4><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。使用注解开发比使用XML更加简洁明了</p><h4 id="2-包扫描"><a href="#2-包扫描" class="headerlink" title="2. 包扫描"></a>2. 包扫描</h4><p>使用注解进行Bean管理必须要在xml配置文件中进行包扫描，这样的话spring-framework才能够解析你在Bean上所添加的注解，包扫描包含下面列举的四种情况:</p><h5 id="2-1-最基本的扫描方式-常用"><a href="#2-1-最基本的扫描方式-常用" class="headerlink" title="2.1 最基本的扫描方式[常用]"></a>2.1 最基本的扫描方式[常用]</h5><p>扫描指定包下的所有类以及其子包下的所有类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 配置自动扫描的包 --&gt;</span><br><span class="hljs-comment">&lt;!-- 最基本的扫描方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 配置自动扫描的包 --&gt;</span><br><span class="hljs-comment">&lt;!-- 最基本的扫描方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.atguigu.ioc.component"</span>/></span><br></code></pre></td></tr></table></figure><h5 id="2-2-指定匹配模式"><a href="#2-2-指定匹配模式" class="headerlink" title="2.2 指定匹配模式"></a>2.2 指定匹配模式</h5><p>根据具体的匹配规则，扫描某个包下的某些类，需要注意规则匹配是匹配的直接在这个包下的类，不能是子包下的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 情况二：在指定扫描包的基础上指定匹配模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">resource-pattern</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 情况二：在指定扫描包的基础上指定匹配模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">resource-pattern</span>=<span class="hljs-string">"Soldier*.class"</span>/></span><br></code></pre></td></tr></table></figure><h5 id="2-3-指定要排除的组件"><a href="#2-3-指定要排除的组件" class="headerlink" title="2.3 指定要排除的组件"></a>2.3 指定要排除的组件</h5><p>扫描某个包下的所有类，但是排除掉一些注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 情况三：指定不扫描的组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 情况三：指定不扫描的组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>></span><br></code></pre></td></tr></table></figure><h5 id="2-4-仅扫描指定组件"><a href="#2-4-仅扫描指定组件" class="headerlink" title="2.4 仅扫描指定组件"></a>2.4 仅扫描指定组件</h5><p>扫描某个包下的所有类，但是只扫描某种注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span><br><span class="hljs-comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span><br><span class="hljs-comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span><br><span class="hljs-comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span><br><span class="hljs-comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>></span><br></code></pre></td></tr></table></figure><h4 id="3-常用的进行IOC的注解"><a href="#3-常用的进行IOC的注解" class="headerlink" title="3. 常用的进行IOC的注解"></a>3. 常用的进行IOC的注解</h4><p>我们在类上添加注解，可以实现将该类的对象配置到spring的IOC容器中，常用的注解有如下四种:</p><h5 id="3-1-Component注解"><a href="#3-1-Component注解" class="headerlink" title="3.1 Component注解"></a>3.1 Component注解</h5><p>该注解主要用在普通类上，即除了三层结构之外的其它类的对象如果需要配置到spring的IOC容器中，那么则需要在类上添加Component注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonComponent</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-Controller注解"><a href="#3-2-Controller注解" class="headerlink" title="3.2 Controller注解"></a>3.2 Controller注解</h5><p>该注解主要用在控制层的类上，控制器处于三层结构中的表现层，在JavaWeb阶段表现层使用的是Servlet，而在学习了spring-framework之后，表现层我们使用Controller代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-Service注解"><a href="#3-3-Service注解" class="headerlink" title="3.3 Service注解"></a>3.3 Service注解</h5><p>该注解主要用在三层结构中的业务层的实现类上，用于将业务层的对象配置到spring的IOC容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ISoldierService</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-4-Repository注解"><a href="#3-4-Repository注解" class="headerlink" title="3.4 Repository注解"></a>3.4 Repository注解</h5><p>该注解主要用在三层结构中的持久层的实现类上，用于将持久层的对象配置到spring的IOC容器中，但是以后我们整合了Mybatis，这里就变成了Mapper接口，而Mapper接口是由Mybatis和Spring的整合包负责扫描的。由于Mybatis整合包想要把Mapper接口背后的代理类加入Spring的IOC容器需要结合Mybatis对Mapper配置文件的解析，所以这个事情是Mybatis和Spring的整合包来完成，将来由Mybatis负责扫描，也不需要使用Repository注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ISoldierDao</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然我们学习的上述四个注解都实现IOC，但是其实他们四个在本质上是没有区别的。通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p><p><img src="/2021/12/06/spring-day02/tu_001.png"></p><h4 id="4-给Bean设置name"><a href="#4-给Bean设置name" class="headerlink" title="4. 给Bean设置name"></a>4. 给Bean设置name</h4><p>在我们使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。 </p><h5 id="4-1-默认情况"><a href="#4-1-默认情况" class="headerlink" title="4.1 默认情况"></a>4.1 默认情况</h5><p>类名首字母小写就是bean的id。例如：SoldierController类对应的bean的id就是soldierController。 </p><h5 id="4-2-使用value属性指定"><a href="#4-2-使用value属性指定" class="headerlink" title="4.2 使用value属性指定"></a>4.2 使用value属性指定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Controller(value = &quot;tianDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-meta">@Controller(value = &quot;tianDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>当注解中只设置一个属性时，value属性的属性名可以省略： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Controller(&quot;tianDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-meta">@Controller(&quot;tianDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-怎么选择"><a href="#5-怎么选择" class="headerlink" title="5. 怎么选择"></a>5. 怎么选择</h4><ol><li>如果这个类是你自己写的类，表示你可以在它上面加注解，所以可以使用注解方式进行IOC</li><li>如果这个类不是你自己写的类，而是第三方依赖中的类，表示你不能在它上面加注解，那么就只能用配置文件方式进行IOC</li></ol><h3 id="第二节-依赖注入相关的注解"><a href="#第二节-依赖注入相关的注解" class="headerlink" title="第二节 依赖注入相关的注解"></a>第二节 依赖注入相关的注解</h3><h4 id="2-1-注入简单类型的属性"><a href="#2-1-注入简单类型的属性" class="headerlink" title="2.1 注入简单类型的属性"></a>2.1 注入简单类型的属性</h4><p>Value注解是用于给IOC容器中的Bean注入简单类型的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Service(&quot;smallDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierService</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;aobama&quot;)</span><br>    <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-meta">@Service(&quot;smallDog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierService</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;aobama&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-读取properties中的数据并且进行注入"><a href="#2-2-读取properties中的数据并且进行注入" class="headerlink" title="2.2 读取properties中的数据并且进行注入"></a>2.2 读取properties中的数据并且进行注入</h4><h5 id="2-2-1-准备properties配置文件"><a href="#2-2-1-准备properties配置文件" class="headerlink" title="2.2.1 准备properties配置文件"></a>2.2.1 准备properties配置文件</h5><p>happyInfo.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs properties"><span class="hljs-meta">happy.componentName</span>=<span class="hljs-string"><code class="language-hljs properties"><span class="hljs-meta">happy.componentName</span>=<span class="hljs-string">aoalfu</span><br></code></pre></td></tr></table></figure><h5 id="2-2-2-使用PropertySource注解读取配置文件数据"><a href="#2-2-2-使用PropertySource注解读取配置文件数据" class="headerlink" title="2.2.2 使用PropertySource注解读取配置文件数据"></a>2.2.2 使用PropertySource注解读取配置文件数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当注解中只有一个属性需要赋值，并且这个属性的名字叫&quot;value&quot;的时候，可以省略&quot;value = &quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;happyComponent&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:happyInfo.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;happy.componentName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当注解中只有一个属性需要赋值，并且这个属性的名字叫&quot;value&quot;的时候，可以省略&quot;value = &quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;happyComponent&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:happyInfo.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;happy.componentName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> componentName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-注入Bean类型属性"><a href="#2-3-注入Bean类型属性" class="headerlink" title="2.3 注入Bean类型属性"></a>2.3 注入Bean类型属性</h4><h5 id="2-3-1-设定情景"><a href="#2-3-1-设定情景" class="headerlink" title="2.3.1 设定情景"></a>2.3.1 设定情景</h5><ul><li>UserController需要UserService</li><li>UserService需要UserDao</li><li>UserDao需要HappyComponent</li><li>HappyComponent需要componentName</li></ul><p>同时在各个组件中声明要调用的方法。 </p><h5 id="2-3-2-在各个组件中声明成员变量和方法"><a href="#2-3-2-在各个组件中声明成员变量和方法" class="headerlink" title="2.3.2 在各个组件中声明成员变量和方法"></a>2.3.2 在各个组件中声明成员变量和方法</h5><h6 id="2-3-2-1-UserController"><a href="#2-3-2-1-UserController" class="headerlink" title="2.3.2.1 UserController"></a>2.3.2.1 UserController</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为了规范代码，提高代码的可读性，三层结构中不同层次的类使用不同的IOC注解</span><br><span class="hljs-comment"> * 1. Controller注解使用在表现层</span><br><span class="hljs-comment"> * 2. Service注解使用在业务层</span><br><span class="hljs-comment"> * 3. Repository注解使用在持久层</span><br><span class="hljs-comment"> * 4. Component注解使用在三层结构之外的类上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 依赖注入的注解:</span><br><span class="hljs-comment"> * 1. Autowired注解: 表示自动装配,它只能用于注入Bean类型的对象</span><br><span class="hljs-comment"> * 2. Value注解: 注入简单类型的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller(&quot;userController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为了规范代码，提高代码的可读性，三层结构中不同层次的类使用不同的IOC注解</span><br><span class="hljs-comment"> * 1. Controller注解使用在表现层</span><br><span class="hljs-comment"> * 2. Service注解使用在业务层</span><br><span class="hljs-comment"> * 3. Repository注解使用在持久层</span><br><span class="hljs-comment"> * 4. Component注解使用在三层结构之外的类上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 依赖注入的注解:</span><br><span class="hljs-comment"> * 1. Autowired注解: 表示自动装配,它只能用于注入Bean类型的对象</span><br><span class="hljs-comment"> * 2. Value注解: 注入简单类型的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller(&quot;userController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"打印:"</span> + userService.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-2-UserServiceImpl"><a href="#2-3-2-2-UserServiceImpl" class="headerlink" title="2.3.2.2 UserServiceImpl"></a>2.3.2.2 UserServiceImpl</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service.impl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service.impl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userDao.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-3-UserDaoImpl"><a href="#2-3-2-3-UserDaoImpl" class="headerlink" title="2.3.2.3 UserDaoImpl"></a>2.3.2.3 UserDaoImpl</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao.impl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HappyComponent happyComponent;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//按道理来说要执行SQL语句到数据查询数据</span><br>        <span class="hljs-comment">//但是今天通过依赖注入，模拟从数据库查询到name</span><br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.dao.impl</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HappyComponent happyComponent;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//按道理来说要执行SQL语句到数据查询数据</span><br>        <span class="hljs-comment">//但是今天通过依赖注入，模拟从数据库查询到name</span><br>        <span class="hljs-keyword">return</span> happyComponent.getComponentName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-4-HappyComponent"><a href="#2-3-2-4-HappyComponent" class="headerlink" title="2.3.2.4 HappyComponent"></a>2.3.2.4 HappyComponent</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当注解中只有一个属性需要赋值，并且这个属性的名字叫&quot;value&quot;的时候，可以省略&quot;value = &quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;happyComponent&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当注解中只有一个属性需要赋值，并且这个属性的名字叫&quot;value&quot;的时候，可以省略&quot;value = &quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;happyComponent&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> componentName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-3-使用Autowired注解进行注入"><a href="#2-3-3-使用Autowired注解进行注入" class="headerlink" title="2.3.3 使用Autowired注解进行注入"></a>2.3.3 使用Autowired注解进行注入</h5><h6 id="2-3-3-1-Autowired注解可以使用的位置"><a href="#2-3-3-1-Autowired注解可以使用的位置" class="headerlink" title="2.3.3.1 Autowired注解可以使用的位置"></a>2.3.3.1 Autowired注解可以使用的位置</h6><ol><li><p>用在成员变量上(最常用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.controller;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"打印:"</span> + userService.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用在构造器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用在方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">((UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">((UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用在参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-3-2-Autowired工作流程"><a href="#2-3-3-2-Autowired工作流程" class="headerlink" title="2.3.3.2 Autowired工作流程"></a>2.3.3.2 Autowired工作流程</h6><p><img src="/2021/12/06/spring-day02/tu_002.png"></p></li></ol><p>首先根据所需要的组件类型到IOC容器中查找</p><ul><li>能够找到唯一的bean：直接执行装配</li><li>如果完全找不到匹配这个类型的bean：装配失败</li><li>和所需类型匹配的bean不止一个<ul><li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配<ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li><li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配<ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li></ul></li></ul><h5 id="2-3-4-使用Resource注解进行注入"><a href="#2-3-4-使用Resource注解进行注入" class="headerlink" title="2.3.4 使用Resource注解进行注入"></a>2.3.4 使用Resource注解进行注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> SoldierService soldierService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getMessage</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoldierController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> SoldierService soldierService;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        soldierService.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-5-Autowired注解和Resource注解的区别"><a href="#2-3-5-Autowired注解和Resource注解的区别" class="headerlink" title="2.3.5 Autowired注解和Resource注解的区别"></a>2.3.5 Autowired注解和Resource注解的区别</h5><p>@Autowired功能虽说非常强大，但是也有些不足之处。比如：比如它跟spring强耦合了，如果换成了JFinal等其他框架，功能就会失效。而@Resource是JSR-250提供的，它是Java标准，绝大部分框架都支持。</p><p>除此之外，有些场景使用@Autowired无法满足的要求，改成@Resource却能解决问题。接下来，我们重点看看@Autowired和@Resource的区别。</p><ul><li>@Autowired默认按byType自动装配，而@Resource默认byName自动装配。</li><li>@Autowired只包含一个参数：required，表示是否开启自动注入，默认是true。而@Resource包含七个参数，其中最重要的两个参数是：name 和 type。</li><li>@Autowired如果要使用byName，需要使用@Qualifier一起配合。而@Resource如果指定了name，则用byName自动装配，如果指定了type，则用byType自动装配。</li><li>@Autowired能够用在：构造器、方法、参数、成员变量和注解上，而@Resource能用在：类、成员变量和方法上。</li><li>@Autowired是spring定义的注解，而@Resource是JSR-250定义的注解。</li></ul><p>此外，它们的装配顺序不同。 </p><p>Autowired的装配顺序:</p><img src="/2021/12/06/spring-day02/tu_003.png" style="zoom:67%;"><p>Resource的装配顺序:</p><ol><li>如果同时指定了name和type： </li></ol><img src="/2021/12/06/spring-day02/tu_004.png" style="zoom:50%;"><ol start="2"><li> 如果指定了name： </li></ol><img src="/2021/12/06/spring-day02/tu_005.png" style="zoom:50%;"><ol start="3"><li>如果指定了type: </li></ol><img src="/2021/12/06/spring-day02/tu_006.png" style="zoom:50%;"><ol start="4"><li> 如果既没有指定name，也没有指定type： </li></ol><img src="/2021/12/06/spring-day02/tu_007.png" style="zoom:67%;"><h3 id="第三节-纯注解开发"><a href="#第三节-纯注解开发" class="headerlink" title="第三节 纯注解开发"></a>第三节 纯注解开发</h3><p>体验纯注解开发，是为了给将来学习SpringBoot打基础。因为在SpringBoot中，就是完全舍弃XML配置文件，全面使用注解来完成主要的配置。 </p><h4 id="1-使用配置类取代配置文件"><a href="#1-使用配置类取代配置文件" class="headerlink" title="1. 使用配置类取代配置文件"></a>1. 使用配置类取代配置文件</h4><h5 id="1-1-创建配置类"><a href="#1-1-创建配置类" class="headerlink" title="1.1 创建配置类"></a>1.1 创建配置类</h5><p>使用@Configuration注解将一个普通的类标记为Spring的配置类。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-在配置类中配置包扫描"><a href="#1-2-在配置类中配置包扫描" class="headerlink" title="1.2 在配置类中配置包扫描"></a>1.2 在配置类中配置包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@ComponentScan</span>注解进行包扫描</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@ComponentScan</span>注解进行包扫描</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-在配置类中配置bean"><a href="#1-3-在配置类中配置bean" class="headerlink" title="1.3 在配置类中配置bean"></a>1.3 在配置类中配置bean</h5><p>对Bean进行IOC的时候，如果是自己编写的类，则可以直接通过IOC注解进行配置，如果是<strong>非自己写的类</strong>:例如JDK中或者第三方框架中的类，我们可以通过配置文件进行IOC；但是在纯注解中没有了配置文件，所以我们需要使用@Bean注解进行IOC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@ComponentScan</span>注解进行包扫描</span><br><span class="hljs-comment"> * 3. 使用<span class="hljs-doctag">@Bean</span>注解配置第三方的类的IOC</span><br><span class="hljs-comment"> * 4. 从properties文件中读取数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbcInfo.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span></span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.configuration;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.configuration</span><br><span class="hljs-comment"> * 1. 配置类上要添加一个<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@ComponentScan</span>注解进行包扫描</span><br><span class="hljs-comment"> * 3. 使用<span class="hljs-doctag">@Bean</span>注解配置第三方的类的IOC</span><br><span class="hljs-comment"> * 4. 从properties文件中读取数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbcInfo.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtguiguSpringConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span></span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-根据配置类创建IOC容器对象"><a href="#1-4-根据配置类创建IOC容器对象" class="headerlink" title="1.4 根据配置类创建IOC容器对象"></a>1.4 根据配置类创建IOC容器对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">// AnnotationConfigApplicationContext根据配置类创建IOC容器对象</span><br>ApplicationContext iocContainerAnnotation = <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">// AnnotationConfigApplicationContext根据配置类创建IOC容器对象</span><br>ApplicationContext iocContainerAnnotation = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfiguration.class);<br></code></pre></td></tr></table></figure><h5 id="1-5-测试"><a href="#1-5-测试" class="headerlink" title="1.5 测试"></a>1.5 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.configuration.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationOnly</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1. 创建核心容器对象:AnnotationConfigApplicationContext核心容器是加载配置类的核心容器</span><br>        ApplicationContext act = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(AtguiguSpringConfiguration.class);<br>        <span class="hljs-comment">//2. 从核心容器对象中获取UserController对象</span><br>        UserController userController = (UserController) act.getBean(<span class="hljs-string">&quot;userController&quot;</span>);<br>        <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.configuration.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationOnly</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1. 创建核心容器对象:AnnotationConfigApplicationContext核心容器是加载配置类的核心容器</span><br>        ApplicationContext act = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(AtguiguSpringConfiguration.class);<br>        <span class="hljs-comment">//2. 从核心容器对象中获取UserController对象</span><br>        UserController userController = (UserController) act.getBean(<span class="hljs-string">&quot;userController&quot;</span>);<br>        <span class="hljs-comment">//3. 调用UserController对象printConnection()方法</span><br>        userController.printConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-Spring整合junit4"><a href="#第四节-Spring整合junit4" class="headerlink" title="第四节 Spring整合junit4"></a>第四节 Spring整合junit4</h3><h4 id="1-Spring整合Junit4的好处"><a href="#1-Spring整合Junit4的好处" class="headerlink" title="1. Spring整合Junit4的好处"></a>1. Spring整合Junit4的好处</h4><ul><li>好处1：不需要自己创建IOC容器对象了</li><li>好处2：任何需要的bean都可以在测试类中直接享受自动装配</li></ul><h4 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h4><h5 id="2-1-加入依赖"><a href="#2-1-加入依赖" class="headerlink" title="2.1 加入依赖"></a>2.1 加入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   引入Spring整合Junit的依赖</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   引入Spring整合Junit的依赖</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure><h5 id="2-2-创建测试类"><a href="#2-2-创建测试类" class="headerlink" title="2.2 创建测试类"></a>2.2 创建测试类</h5><p>如果是使用的配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.configuration.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> * 目标:在单元测试类中注入要测试的对象,这样就不需要自己创建核心容器了，也不需要自己调用getBean()方法从核心容器中获取对象了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现方案:使用Spring整合Junit单元测试</span><br><span class="hljs-comment"> * 实现步骤:</span><br><span class="hljs-comment"> * 1. 引入spring整合Junit的依赖</span><br><span class="hljs-comment"> * 2. 让单元测试类依赖SpringJUnit4ClassRunner来运行:在测试类上添加  <span class="hljs-doctag">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-comment"> * 3. 加载配置文件或者配置类: 在测试类上添加<span class="hljs-doctag">@ContextConfiguration</span>(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationOnly</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserController userController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.configuration.AtguiguSpringConfiguration;<br><span class="hljs-keyword">import</span> com.atguigu.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> * 目标:在单元测试类中注入要测试的对象,这样就不需要自己创建核心容器了，也不需要自己调用getBean()方法从核心容器中获取对象了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现方案:使用Spring整合Junit单元测试</span><br><span class="hljs-comment"> * 实现步骤:</span><br><span class="hljs-comment"> * 1. 引入spring整合Junit的依赖</span><br><span class="hljs-comment"> * 2. 让单元测试类依赖SpringJUnit4ClassRunner来运行:在测试类上添加  <span class="hljs-doctag">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-comment"> * 3. 加载配置文件或者配置类: 在测试类上添加<span class="hljs-doctag">@ContextConfiguration</span>(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = AtguiguSpringConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationOnly</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserController userController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//3. 调用UserController对象printConnection()方法</span><br>        userController.printConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是使用的配置文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringAnnotation</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserController userController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring-application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringAnnotation</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserController userController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//3. 调用UserController对象printConnection()方法</span><br>        userController.printConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五节-内容总结"><a href="#第五节-内容总结" class="headerlink" title="第五节 内容总结"></a>第五节 内容总结</h3><ol><li>包扫描: 指定要进行组件扫描的包</li><li>IOC 注解:<ol><li>Component注解: 三层结构之外的其他类使用</li><li>Controller注解: 表现层的类使用</li><li>Service注解: 业务层的类使用</li><li>Repository注解: 持久层的类使用</li></ol></li><li>依赖注入注解：<ol><li>注入Bean:<ol><li>Autowired注解，它是byType进行自动注入，如果要byName必须结合Qualifier注解一起使用</li><li>Resource注解，它默认是byName进行自动注入</li></ol></li><li>注入简单类型: Value注解，以及使用PropertySource注解引入外部的properties文件</li></ol></li><li>注解方式和配置文件方式进行IOC和依赖注入的选择问题:<ol><li>如果是自己写的类就使用注解方式</li><li>如果是第三方jar中的类就使用配置文件方式</li></ol></li><li>Spring整合Junit：<ol><li>目的：简化单元测试</li><li>实现步骤:<ol><li>引入spring-test的依赖</li><li>Junit的依赖版本必须是4.12及以上</li><li>给单元测试类添加@Runwith(SpringJUnit4ClassRunner.class)</li><li>给单元测试类添加@ContextConfiguration(locations=”配置文件的路径”或者是classes=配置类.class)</li><li>直接注入你想使用的IOC容器中的对象就可以直接使用了</li></ol></li></ol></li><li>Spring的纯注解开发<ol><li>目的: 为了以后学习SpringBoot做准备，我们项目如果是使用Spring做开发的话是不会用纯注解的</li><li>步骤:<ol><li>配置类上要添加@Configuration注解标示为配置类</li><li>配置类上要添加@ComponentScan指定要扫描的包</li><li>如果要对第三方的类进行IOC配置<ol><li>在配置类中创建一个方法<ol><li>修饰符public</li><li>返回值是要进行IOC的对象的类型</li><li>方法体中编写创建IOC对象的代码</li><li>如果要给这个方法注入一个IOC容器中存在的对象，直接在方法的参数中声明就行了</li></ol></li><li>给该方法添加@Bean注解</li></ol></li><li>如果是使用纯注解开发，整合Junit的时候，@ContextConfiguration(classes=配置类.class)</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符集和编码问题</title>
      <link href="/2021/12/06/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/06/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="一、为什么需要字符集"><a href="#一、为什么需要字符集" class="headerlink" title="一、为什么需要字符集"></a>一、为什么需要字符集</h3><p>我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特(byte)流。简单来说字符集就规定了某个文字对应的二进制数值存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。正因为字符和字节之间有着这种固定的对应关系，所以我们的文件在以相同的字符集传递的情况之下才不会出现乱码。</p><h3 id="二、为什么有各种各样的字符集标准"><a href="#二、为什么有各种各样的字符集标准" class="headerlink" title="二、为什么有各种各样的字符集标准"></a>二、为什么有各种各样的字符集标准</h3><p>很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。于是，就产生了那么多具有相同效果但又不相互兼容的标准了。</p><p>最早是美国人使用电脑，所以最初的字符集是ASCII,使用7位bit表示一个字符，总共能表示128种字符。后来，随着欧洲各个国家的计算机普及，人们发现ASCI码I对应的128个字符不能够满足需求了，因为欧洲各个国家都有一些特殊的字符。所以ASCII进行了扩容，使用8位bit表示一个字符，总共就能表示256种字符。</p><p>而当中国开始普及计算机后，发现256中字符根本没办法满足咱们中国人的日常需求，中华文化上下五千年，汉字的数量多了去了，一个字节根本没法对应一个字符。所以只能继续扩容，两个字节对应一个字符，所以后续的GB2312、GBK等等字符集就都被提出来了。</p><p>正因为世界上有各种各样的国家、民族需要使用计算机，各个国家地区都会根据自己的文化特色创造出相对应的字符集标准。</p><h3 id="三、同一个字在多种字符集下对应的16进制和二进制对比"><a href="#三、同一个字在多种字符集下对应的16进制和二进制对比" class="headerlink" title="三、同一个字在多种字符集下对应的16进制和二进制对比"></a>三、同一个字在多种字符集下对应的16进制和二进制对比</h3><table><thead><tr><th>字符集</th><th>16进制编码</th><th>对应的二进制数据</th></tr></thead><tbody><tr><td>UTF-8</td><td>0xE5B18C</td><td>1110 0101 1011 0001 1000 1100</td></tr><tr><td>UTF-16</td><td>0x5C4C</td><td>1011 1000 1001 1000</td></tr><tr><td>GBK</td><td>0x8CC5</td><td>1000 1100 1100 0101</td></tr></tbody></table><p>上述是同一个字在三种字符集下所对应的16进制和2进制数据，我们可以发现同样的一个字，在不同的字符集下对应的16进制和2进制数据完全不同。这个字就是我们平常用来形容一个人特别厉害的一个字——–”屌”!</p><h3 id="四、为什么会发生乱码？"><a href="#四、为什么会发生乱码？" class="headerlink" title="四、为什么会发生乱码？"></a>四、为什么会发生乱码？</h3><p>简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了bless（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是受伤（解码过程）。这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。</p><p>在UTF-8字符编码下（一个汉字对应三个字节），”很屌”这两个字对应的16进制字符串</p><table><thead><tr><th>字符</th><th>UTF-8编码后的十六进制</th><th>UTF-8编码后对应的二进制</th></tr></thead><tbody><tr><td>很</td><td>E5BE88</td><td>1110 0101   1011 1110    1000 1000</td></tr><tr><td>屌</td><td>E5B18C</td><td>1110 0101    1011 0001     1000 1100</td></tr></tbody></table><p>于是我们得到了<code>E5BE88E5B18C</code>这么一串数值。而显示时我们用GBK解码进行展示（一个汉字对应两个字节），通过查表我们获得以下信息：</p><table><thead><tr><th>两个字节的十六进制数值</th><th>GBK解码后对应的字符</th></tr></thead><tbody><tr><td>E5BE</td><td>寰</td></tr><tr><td>88E5</td><td>堝</td></tr><tr><td>B18C</td><td>睂</td></tr></tbody></table><p>以上就是”很屌”这两个字在UTF-8字符集下进行编码，然后在GBK下进行解码，就变成了”寰堝睂”。不仅字符变得不认识了，甚至连字数都发生了变化。有没有觉得很屌的样子？</p><h3 id="五、如何将乱码后的字符串还原成它本来的样子"><a href="#五、如何将乱码后的字符串还原成它本来的样子" class="headerlink" title="五、如何将乱码后的字符串还原成它本来的样子"></a>五、如何将乱码后的字符串还原成它本来的样子</h3><p>要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。</p><h4 id="第1步-编码"><a href="#第1步-编码" class="headerlink" title="第1步 编码"></a>第1步 编码</h4><p>假设我们在页面上看到<code>寰堝睂</code>这样的乱码，而又得知我们的服务器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。</p><h4 id="第二步-解码"><a href="#第二步-解码" class="headerlink" title="第二步 解码"></a>第二步 解码</h4><p>由于乱码之前的编码字符集是UTF-8，所以我们再使用UTF-8将二进制字节数组解码成字符串，这时候我们就能够得到这串字符串原本的样子<code>很屌</code></p><p>###六、几个常见名词的介绍</p><h4 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h4><p>一开始最多只能表示128个字符，经过拓展后最多能表示256个字符。</p><h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案，相当于一个最大的字库。Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符。</p><p>既然Unicode包含全世界所有的文字和字符的话，那么为什么全世界不统一使用Unicode字库表来进行编码和解码呢?而非要弄出这么多各种各样的字符集出来呢?</p><p>因为如果全世界都统一使用Unicode的话，一个字符就要对应三个字节，对于美国人和欧洲人来说，他们使用ASCII的话每个字符只需要对应一个字节。这样所造成的后果就是，本来美国人使用ASCII的时候一个U盘能存放1500篇文章，而改成使用Unicode之后U盘只能存放500篇文章了。所以全世界统一使用Unicode字库表并不现实。</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8是一个当今接受度最广的字符集编码,但是它只涵盖了Unicode字库中的一小部分，Unicode的编号从<code>0000</code>开始一直到<code>10FFFF</code>共分为16个Plane，每个Plane中有65536个字符。而UTF-8则只实现了第一个Plane，所以这也造成了它在某些场景下对于特殊字符的处理困难。</p><h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>Unicode：包容万国，优点是字符-&gt;数字的转换速度快，缺点是占用空间大。</p><p>UTF-8：精准，对不同的字符用不同的长度表示，优点是节省空间，缺点是：字符-&gt;数字的转换速度慢，因为每次都需要计算出字符需要多长的Bytes才能够准确表示。</p><p>所以一般在内存中使用的编码是unicode，用空间换时间，为了快。因为程序都需要加载到内存才能运行，因而内存应该是尽可能的保证快。但硬盘中或者网络传输用utf-8，网络I/O延迟或磁盘I/O延迟要远大与utf-8的转换延迟，而且I/O应该是尽可能地节省带宽，保证数据传输的稳定性。因为数据的传输，追求的是稳定，高效，数据量越小数据传输就越靠谱，于是都转成utf－8格式的，而不是unicode。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-day01-XML</title>
      <link href="/2021/12/04/spring-day01/"/>
      <url>/2021/12/04/spring-day01/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-day01"><a href="#spring-day01" class="headerlink" title="spring-day01"></a>spring-day01</h1><h2 id="第一章-Spring的简介"><a href="#第一章-Spring的简介" class="headerlink" title="第一章 Spring的简介"></a>第一章 Spring的简介</h2><h3 id="第一节-Spring公司简介"><a href="#第一节-Spring公司简介" class="headerlink" title="第一节 Spring公司简介"></a>第一节 Spring公司简介</h3><p>该公司的创建者Rod Johnson被称之为Spring之父，他领导的Spring研发团队下有众多的优秀开发者，Spring公司旗下有非常多的优秀框架。例如:Spring FrameWork、Spring Boot、Spring Cloud、Spring Data、Spring Security等等，几乎涉及了Java开发的每一个领域。 官网地址：<a href="https://spring.io/">https://spring.io/</a> </p><p><img src="/2021/12/04/spring-day01/tu_001.png"></p><h3 id="第二节-Spring-Framework的介绍"><a href="#第二节-Spring-Framework的介绍" class="headerlink" title="第二节 Spring Framework的介绍"></a>第二节 Spring Framework的介绍</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>Spring Framework是Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架</p><h4 id="2-特征"><a href="#2-特征" class="headerlink" title="2. 特征"></a>2. 特征</h4><ul><li>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型(domain)可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</li><li>控制反转：IOC——Inversion of Control，反转资源获取方向。把自己创建资源变成环境将资源准备好，我们享受资源注入。</li><li>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。</li><li>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</li><li>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</li></ul><h4 id="2-Spring-Framework五大功能模块"><a href="#2-Spring-Framework五大功能模块" class="headerlink" title="2. Spring Framework五大功能模块"></a>2. Spring Framework五大功能模块</h4><p><img src="/2021/12/04/spring-day01/tu_002.png"></p><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>Test</td><td>提供了对 junit 或 TestNG 测试框架的整合。</td></tr><tr><td>Data Access/Integration</td><td>提供了对数据访问/集成的功能。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><h2 id="第二章-IOC容器概念"><a href="#第二章-IOC容器概念" class="headerlink" title="第二章 IOC容器概念"></a>第二章 IOC容器概念</h2><h3 id="第一节-容器的概念"><a href="#第一节-容器的概念" class="headerlink" title="第一节 容器的概念"></a>第一节 容器的概念</h3><h4 id="1-普通容器"><a href="#1-普通容器" class="headerlink" title="1. 普通容器"></a>1. 普通容器</h4><p>普通容器只是负责存储数据(对象)，例如我们在JavaSE中学习的数组、List、Map等等，可以让我们使用它存储数据、获取数据，不具备其它复杂的功能</p><h4 id="2-复杂容器"><a href="#2-复杂容器" class="headerlink" title="2. 复杂容器"></a>2. 复杂容器</h4><p>复杂容器不仅要负责存储对象，还需要具备创建对象、调用对象方法、管理对象生命周期、并且在一定情况下负责销毁对象。例如我们之前学习的Tomcat就是一个复杂容器，它能够负责创建Servlet、Filter、Listener等等对象，并且管理他们的生命周期，在生命周期的不同阶段调用他们的不同方法。而我们后续要学习的IOC容器也是一个复杂容器</p><h3 id="第二节-IOC的概念"><a href="#第二节-IOC的概念" class="headerlink" title="第二节 IOC的概念"></a>第二节 IOC的概念</h3><h4 id="1-传统方式创建对象"><a href="#1-传统方式创建对象" class="headerlink" title="1. 传统方式创建对象"></a>1. 传统方式创建对象</h4><p>传统方式创建对象的方式是: 需要哪个类的对象，就直接在项目中new哪个类的对象，这样就会导致各个类之间的耦合度非常高</p><p><img src="/2021/12/04/spring-day01/tu_003.png"></p><h4 id="2-IOC方式创建对象"><a href="#2-IOC方式创建对象" class="headerlink" title="2. IOC方式创建对象"></a>2. IOC方式创建对象</h4><p>IOC(inversion of control)的中文解释是“控制反转”，对象的使用者不是创建者.  作用是将对象的创建反转给spring框架来创建和管理。控制反转怎么去理解呢。 其实它反转的是什么呢，是对象的创建工作。 举个例子:平常我们在servlet或者service里面创建对象，都是使用new 的方式来直接创建对象，现在有了spring之后，我们就再也不new对象了，而是把对象创建的工作交给spring容器去维护。我们只需要告诉spring容器我们需要什么对象即可</p><p>IOC的作用：削减计算机程序的耦合(解除我们代码中的依赖关系)。</p><p><img src="/2021/12/04/spring-day01/tu_004.png"></p><h3 id="第三节-IOC容器在Spring中的实现"><a href="#第三节-IOC容器在Spring中的实现" class="headerlink" title="第三节 IOC容器在Spring中的实现"></a>第三节 IOC容器在Spring中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式:</p><h4 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h4><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 框架本身，供Spring框架内部功能使用，不建议开发人员使用。</p><h4 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h4><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 框架的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。 </p><blockquote><p>以后在 Spring 环境下看到一个类或接口的名称中包含 ApplicationContext，那基本就可以断定，这个类或接口与 IOC 容器有关。</p></blockquote><h4 id="3-ApplicationContext的主要实现类"><a href="#3-ApplicationContext的主要实现类" class="headerlink" title="3. ApplicationContext的主要实现类"></a>3. ApplicationContext的主要实现类</h4><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td><strong>ClassPathXmlApplicationContext</strong></td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td><strong>AnnotationConfigApplicationContext</strong></td><td>可以实现基于Java的配置类加载Spring的应用上下文，创建IOC容器对象</td></tr><tr><td><strong>WebApplicationContext</strong></td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引用存入 ServletContext 域中。</td></tr></tbody></table><h2 id="第三章-Spring-IOC"><a href="#第三章-Spring-IOC" class="headerlink" title="第三章 Spring IOC"></a>第三章 Spring IOC</h2><h3 id="第一节-快速入门"><a href="#第一节-快速入门" class="headerlink" title="第一节 快速入门"></a>第一节 快速入门</h3><h4 id="1-目标"><a href="#1-目标" class="headerlink" title="1. 目标"></a>1. 目标</h4><p>1.1 让Spring IOC容器创建类的对象</p><p>1.2 从Spring IOC容器中获取对象</p><h4 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h4><p><img src="/2021/12/04/spring-day01/tu_006.png"></p><h4 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h4><h5 id="3-1-Maven依赖"><a href="#3-1-Maven依赖" class="headerlink" title="3.1 Maven依赖"></a>3.1 Maven依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>></span><br></code></pre></td></tr></table></figure><h5 id="3-2-创建类"><a href="#3-2-创建类" class="headerlink" title="3.2 创建类"></a>3.2 创建类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"component do work ..."</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-创建Spring-配置文件并且配置组件"><a href="#3-3-创建Spring-配置文件并且配置组件" class="headerlink" title="3.3 创建Spring 配置文件并且配置组件"></a>3.3 创建Spring 配置文件并且配置组件</h5><p>配置文件的存放路径建议放在resources根路径下，配置文件名字随意</p><p><img src="/2021/12/04/spring-day01/tu_007.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        每一个实现类就对应一个bean标签</span><br><span class="hljs-comment">            id属性: 对象的唯一标识，根据这个唯一标识，就可以从核心容器中获取对象</span><br><span class="hljs-comment">            class属性: 对象所属的实现类的全限定名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.HappyComponent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        每一个实现类就对应一个bean标签</span><br><span class="hljs-comment">            id属性: 对象的唯一标识，根据这个唯一标识，就可以从核心容器中获取对象</span><br><span class="hljs-comment">            class属性: 对象所属的实现类的全限定名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.HappyComponent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>></span><br></code></pre></td></tr></table></figure><ul><li>bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件是什么</li><li>id属性：bean的唯一标识</li><li>class属性：组件类的全类名</li></ul><h5 id="3-4-从核心容器中获取对象"><a href="#3-4-从核心容器中获取对象" class="headerlink" title="3.4 从核心容器中获取对象"></a>3.4 从核心容器中获取对象</h5><h6 id="方式一：根据id获取"><a href="#方式一：根据id获取" class="headerlink" title="方式一：根据id获取"></a>方式一：根据id获取</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOCTest</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 创建 IOC 容器对象，为便于其他实验方法使用声明为成员变量</span><br>    <span class="hljs-keyword">private</span> ApplicationContext iocContainer = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment01</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>        <span class="hljs-comment">// 从 IOC 容器对象中获取bean，也就是组件对象</span><br>        HappyComponent happyComponent = (HappyComponent) iocContainer.getBean(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOCTest</span> </span>&#123;<br>    <br>    <span class="hljs-comment">// 创建 IOC 容器对象，为便于其他实验方法使用声明为成员变量</span><br>    <span class="hljs-keyword">private</span> ApplicationContext iocContainer = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment01</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>        <span class="hljs-comment">// 从 IOC 容器对象中获取bean，也就是组件对象</span><br>        HappyComponent happyComponent = (HappyComponent) iocContainer.getBean(<span class="hljs-string">"happyComponent"</span>);<br>        happyComponent.doWork();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="方式二：根据类型获取"><a href="#方式二：根据类型获取" class="headerlink" title="方式二：根据类型获取"></a>方式二：根据类型获取</h6><p>如果该类型在核心容器中只有一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment02</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment02</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    HappyComponent component = iocContainer.getBean(HappyComponent.class);<br>    <br>    component.doWork();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>如果该类型在核心容器中有多个对象：那么根据类型获取时会抛出异常，具体异常信息如下</p><blockquote><p>org.springframework.beans.factory.<strong>NoUniqueBeanDefinitionException</strong>: No qualifying bean of type ‘com.atguigu.ioc.component.HappyComponent’ available: expected single matching bean but found 2: happyComponent,happyComponent2</p></blockquote><h6 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h6><p>如果组件类实现了接口，根据接口类型可以获取 bean对象 吗？</p><blockquote><p>可以，前提是bean对象唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean对象不唯一</p></blockquote><h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。 </p><h3 id="第二节-依赖注入"><a href="#第二节-依赖注入" class="headerlink" title="第二节 依赖注入"></a>第二节 依赖注入</h3><p>依赖注入全称是 dependency Injection 翻译过来是依赖注入.其实就是如果spring核心容器管理的某一个类中存在属性，需要spring核心容器在创建该类实例的时候，顺便给这个对象里面的属性进行赋值。</p><h4 id="1-setter方法注入"><a href="#1-setter方法注入" class="headerlink" title="1. setter方法注入"></a>1. setter方法注入</h4><p>如果某个Bean对象的属性有对应的setter方法，那我们可以在配置文件中使用setter方法对属性进行依赖注入</p><h5 id="1-1-注入简单类型数据"><a href="#1-1-注入简单类型数据" class="headerlink" title="1.1 注入简单类型数据"></a>1.1 注入简单类型数据</h5><h6 id="1-1-1-给组件类添加一个简单类型属性"><a href="#1-1-1-给组件类添加一个简单类型属性" class="headerlink" title="1.1.1 给组件类添加一个简单类型属性"></a>1.1.1 给组件类添加一个简单类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"component do work ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-1-2-在配置时给属性指定值"><a href="#1-1-2-在配置时给属性指定值" class="headerlink" title="1.1.2 在配置时给属性指定值"></a>1.1.2 在配置时给属性指定值</h6><p>通过property标签配置的属性值会通过setXxx()方法注入，大家可以通过debug方式验证一下 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        依赖注入:给核心容器中的Bean对象的成员变量赋值</span><br><span class="hljs-comment">        setter方法进行依赖注入:</span><br><span class="hljs-comment">            在要进行依赖注入的bean标签中添加&lt;property&gt;子标签,该子标签的name属性就是要赋值的成员变量名</span><br><span class="hljs-comment">            前提是这个属性一定要有set方法,name属性的值应该是&quot;setXXX&quot;后面的&quot;XXX&quot;首字母改小写</span><br><span class="hljs-comment">            1. 注入简单类型数据: 那么我们使用property标签的value属性给简单类型的成员变量赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            2. 注入Bean类型数据: 那么我们使用property标签的ref属性给Bean类型的成员变量赋值，</span><br><span class="hljs-comment">                               ref属性的值就是要赋值的Bean类型的对象在核心容器中的id</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        依赖注入:给核心容器中的Bean对象的成员变量赋值</span><br><span class="hljs-comment">        setter方法进行依赖注入:</span><br><span class="hljs-comment">            在要进行依赖注入的bean标签中添加&lt;property&gt;子标签,该子标签的name属性就是要赋值的成员变量名</span><br><span class="hljs-comment">            前提是这个属性一定要有set方法,name属性的值应该是&quot;setXXX&quot;后面的&quot;XXX&quot;首字母改小写</span><br><span class="hljs-comment">            1. 注入简单类型数据: 那么我们使用property标签的value属性给简单类型的成员变量赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            2. 注入Bean类型数据: 那么我们使用property标签的ref属性给Bean类型的成员变量赋值，</span><br><span class="hljs-comment">                               ref属性的值就是要赋值的Bean类型的对象在核心容器中的id</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h6 id="1-1-3-测试代码"><a href="#1-1-3-测试代码" class="headerlink" title="1.1.3 测试代码"></a>1.1.3 测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetHappyComponent</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//2. 使用核心容器对象获取HappyComponent对象</span><br>    <span class="hljs-comment">//根据id获取:获取ioc容器中id为&quot;happyComponent&quot;的对象</span><br>    HappyComponent happyComponent1 = (HappyComponent) act.getBean(<span class="hljs-string">&quot;happyComponent&quot;</span>);<br>    <br>    <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetHappyComponent</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//2. 使用核心容器对象获取HappyComponent对象</span><br>    <span class="hljs-comment">//根据id获取:获取ioc容器中id为&quot;happyComponent&quot;的对象</span><br>    HappyComponent happyComponent1 = (HappyComponent) act.getBean(<span class="hljs-string">&quot;happyComponent&quot;</span>);<br>    <br>    <span class="hljs-comment">//3. 使用HappyComponent对象获取username属性</span><br>    System.out.println(happyComponent1.getUsername());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-注入Bean类型数据"><a href="#1-2-注入Bean类型数据" class="headerlink" title="1.2 注入Bean类型数据"></a>1.2 注入Bean类型数据</h5><h6 id="1-2-1-声明新的组件类UserServlet"><a href="#1-2-1-声明新的组件类UserServlet" class="headerlink" title="1.2.1 声明新的组件类UserServlet"></a>1.2.1 声明新的组件类UserServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.servlet</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:28</span><br><span class="hljs-comment"> * 1. IOC : 由核心容器创建Bean对象</span><br><span class="hljs-comment"> * 2. DI(依赖注入) : 给核心容器中的Bean对象的成员变量赋值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.servlet</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:28</span><br><span class="hljs-comment"> * 1. IOC : 由核心容器创建Bean对象</span><br><span class="hljs-comment"> * 2. DI(依赖注入) : 给核心容器中的Bean对象的成员变量赋值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        userService.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-2-声明新的组件接口UserService和实现类UserServiceImpl"><a href="#1-2-2-声明新的组件接口UserService和实现类UserServiceImpl" class="headerlink" title="1.2.2 声明新的组件接口UserService和实现类UserServiceImpl"></a>1.2.2 声明新的组件接口UserService和实现类UserServiceImpl</h6><p>UserService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:33</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HappyComponent happyComponent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHappyComponent</span><span class="hljs-params">(HappyComponent happyComponent)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.happyComponent = happyComponent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.service</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:33</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HappyComponent happyComponent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHappyComponent</span><span class="hljs-params">(HappyComponent happyComponent)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.happyComponent = happyComponent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"hello,"</span>+happyComponent.getUsername());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-3-在UserService对象中注入HappyComponent对象"><a href="#1-2-3-在UserService对象中注入HappyComponent对象" class="headerlink" title="1.2.3 在UserService对象中注入HappyComponent对象"></a>1.2.3 在UserService对象中注入HappyComponent对象</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用依赖注入给HappyComponent属性赋值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用依赖注入给HappyComponent属性赋值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h6 id="1-2-4-在UserServlet对象中注入UserService对象"><a href="#1-2-4-在UserServlet对象中注入UserService对象" class="headerlink" title="1.2.4 在UserServlet对象中注入UserService对象"></a>1.2.4 在UserServlet对象中注入UserService对象</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        你想让ioc容器创建什么对象，就将那个类配置到bean标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用依赖注入给UserService属性赋值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        你想让ioc容器创建什么对象，就将那个类配置到bean标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用依赖注入给UserService属性赋值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><p>这个操作在 IDEA 中有提示： </p><p><img src="/2021/12/04/spring-day01/tu_009.png"></p><h6 id="1-2-5-测试"><a href="#1-2-5-测试" class="headerlink" title="1.2.5 测试"></a>1.2.5 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment">//调用UserServlet的sayHello()方法</span><br>    userServlet.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-6-易错点"><a href="#1-2-6-易错点" class="headerlink" title="1.2.6 易错点"></a>1.2.6 易错点</h6><blockquote><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.atguigu.ioc.component.HappyMachine’ for property ‘happyMachine’: no matching editors or conversion strategy found 意思是不能把String类型转换成我们要的HappyMachine类型 说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote><h5 id="1-3-注入内部Bean类型数据-了解"><a href="#1-3-注入内部Bean类型数据-了解" class="headerlink" title="1.3 注入内部Bean类型数据(了解)"></a>1.3 注入内部Bean类型数据(了解)</h5><h6 id="1-3-1-重新配置原组件"><a href="#1-3-1-重新配置原组件" class="headerlink" title="1.3.1 重新配置原组件"></a>1.3.1 重新配置原组件</h6><p>在bean里面配置的bean就是内部bean，内部bean只能在当前bean内部使用，在其他地方不能使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这个bean标签创建的HappyComponent对象只能用于给UserServiceImpl的happyComponent属性赋值,别的地方不能使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aobama&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这个bean标签创建的HappyComponent对象只能用于给UserServiceImpl的happyComponent属性赋值,别的地方不能使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aobama&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h6 id="1-3-2-测试"><a href="#1-3-2-测试" class="headerlink" title="1.3.2 测试"></a>1.3.2 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment04</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//通过核心容器获取UserService的对象:我为什么要使用接口类型接收实现类的对象,为了解耦</span><br>    UserService userService = (UserService) act.getBean(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment04</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//通过核心容器获取UserService的对象:我为什么要使用接口类型接收实现类的对象,为了解耦</span><br>    UserService userService = (UserService) act.getBean(<span class="hljs-string">"userService"</span>);<br>    userService.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-引入外部属性文件用于给Bean注入属性"><a href="#1-4-引入外部属性文件用于给Bean注入属性" class="headerlink" title="1.4 引入外部属性文件用于给Bean注入属性"></a>1.4 引入外部属性文件用于给Bean注入属性</h5><h6 id="1-4-1-添加Maven依赖"><a href="#1-4-1-添加Maven依赖" class="headerlink" title="1.4.1 添加Maven依赖"></a>1.4.1 添加Maven依赖</h6><p>这个依赖只是为了使用Druid连接池，而不是引入外部属性文件所必须的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure><h6 id="1-4-2-创建外部属性文件"><a href="#1-4-2-创建外部属性文件" class="headerlink" title="1.4.2 创建外部属性文件"></a>1.4.2 创建外部属性文件</h6><p><img src="/2021/12/04/spring-day01/tu_010.png"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs properties"><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string"><code class="language-hljs properties"><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h6 id="1-4-3-在spring的配置文件中引入jdbc-properties文件"><a href="#1-4-3-在spring的配置文件中引入jdbc-properties文件" class="headerlink" title="1.4.3 在spring的配置文件中引入jdbc.properties文件"></a>1.4.3 在spring的配置文件中引入jdbc.properties文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span>/></span><br></code></pre></td></tr></table></figure><h6 id="1-4-4-在spring的配置文件中使用引入的jdbc-properties文件中的数据"><a href="#1-4-4-在spring的配置文件中使用引入的jdbc-properties文件中的数据" class="headerlink" title="1.4.4 在spring的配置文件中使用引入的jdbc.properties文件中的数据"></a>1.4.4 在spring的配置文件中使用引入的jdbc.properties文件中的数据</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--[重要]给bean的属性赋值：引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--[重要]给bean的属性赋值：引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h6 id="1-4-5-测试"><a href="#1-4-5-测试" class="headerlink" title="1.4.5 测试"></a>1.4.5 测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment06</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    DataSource dataSource = iocContainer.getBean(DataSource.class);<br>    Connection connection = dataSource.getConnection();<br>    System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment06</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    DataSource dataSource = iocContainer.getBean(DataSource.class);<br>    Connection connection = dataSource.getConnection();<br>    System.out.println(<span class="hljs-string">"connection = "</span> + connection);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-4-6-结论"><a href="#1-4-6-结论" class="headerlink" title="1.4.6 结论"></a>1.4.6 结论</h6><p>标签的value属性: 注入简单类型数据</p><p>标签的ref属性:用于引入IOC容器中的Bean对象的id，注入Bean对象类型的数据</p><h5 id="1-5-注入集合类型属性-了解"><a href="#1-5-注入集合类型属性-了解" class="headerlink" title="1.5 注入集合类型属性(了解)"></a>1.5 注入集合类型属性(了解)</h5><h6 id="1-5-1-给组件类添加集合类型属性"><a href="#1-5-1-给组件类添加集合类型属性" class="headerlink" title="1.5.1 给组件类添加集合类型属性"></a>1.5.1 给组件类添加集合类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"component do work ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-5-2-配置"><a href="#1-5-2-配置" class="headerlink" title="1.5.2 配置"></a>1.5.2 配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberList&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;list&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/list&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                使用set标签注入集合可以去重</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;set&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/set&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberList&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;list&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/list&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                使用set标签注入集合可以去重</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;set&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/set&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h5 id="1-6-注入Map类型属性-了解"><a href="#1-6-注入Map类型属性-了解" class="headerlink" title="1.6 注入Map类型属性(了解)"></a>1.6 注入Map类型属性(了解)</h5><h6 id="1-6-1-给组件类添加Map类型属性"><a href="#1-6-1-给组件类添加Map类型属性" class="headerlink" title="1.6.1 给组件类添加Map类型属性"></a>1.6.1 给组件类添加Map类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; managerMap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getManagerMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setManagerMap</span><span class="hljs-params">(Map&lt;String, String&gt; managerMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.managerMap = managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; managerMap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getManagerMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setManagerMap</span><span class="hljs-params">(Map&lt;String, String&gt; managerMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.managerMap = managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"component do work ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-6-2-配置"><a href="#1-6-2-配置" class="headerlink" title="1.6.2 配置"></a>1.6.2 配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入Map类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerMap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;map&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k1&quot; value=&quot;v1&quot; &gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k4&quot; value=&quot;v4&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">            &lt;/map&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k4&quot;</span>&gt;</span>v4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入Map类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerMap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;map&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k1&quot; value=&quot;v1&quot; &gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k4&quot; value=&quot;v4&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">            &lt;/map&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k4&quot;</span>&gt;</span>v4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h5 id="1-7-注入Bean的集合类型-了解"><a href="#1-7-注入Bean的集合类型-了解" class="headerlink" title="1.7 注入Bean的集合类型(了解)"></a>1.7 注入Bean的集合类型(了解)</h5><h6 id="1-7-1-给组件添加Bean的集合类型属性"><a href="#1-7-1-给组件添加Bean的集合类型属性" class="headerlink" title="1.7.1 给组件添加Bean的集合类型属性"></a>1.7.1 给组件添加Bean的集合类型属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; managerMap;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserList</span><span class="hljs-params">(List&lt;User&gt; userList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userList = userList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getManagerMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setManagerMap</span><span class="hljs-params">(Map&lt;String, String&gt; managerMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.managerMap = managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  10:10</span><br><span class="hljs-comment"> * 给一个对象的成员变量赋值的方式:</span><br><span class="hljs-comment"> * 1. 调用set方法</span><br><span class="hljs-comment"> * 2. 通过构造器</span><br><span class="hljs-comment"> * 3. 通过暴力反射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; memberList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; managerMap;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserList</span><span class="hljs-params">(List&lt;User&gt; userList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userList = userList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getManagerMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setManagerMap</span><span class="hljs-params">(Map&lt;String, String&gt; managerMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.managerMap = managerMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getMemberList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberList</span><span class="hljs-params">(List&lt;String&gt; memberList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberList = memberList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"component do work ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  14:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  14:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-7-2-配置"><a href="#1-7-2-配置" class="headerlink" title="1.7.2 配置"></a>1.7.2 配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberList&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;list&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/list&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                使用set标签注入集合可以去重</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;set&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/set&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注入Map类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerMap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;map&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k1&quot; value=&quot;v1&quot; &gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k4&quot; value=&quot;v4&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">            &lt;/map&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k4&quot;</span>&gt;</span>v4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注入Bean的集合类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;深圳&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广州&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;王五&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;memberList&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;list&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/list&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                使用set标签注入集合可以去重</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;set&gt;</span><br><span class="hljs-comment">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;李四&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;赵六&lt;/value&gt;</span><br><span class="hljs-comment">                &lt;value&gt;王五&lt;/value&gt;</span><br><span class="hljs-comment">            &lt;/set&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注入Map类型的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerMap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;map&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k1&quot; value=&quot;v1&quot; &gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">                &lt;entry key=&quot;k4&quot; value=&quot;v4&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">            &lt;/map&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;k4&quot;</span>&gt;</span>v4<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--注入Bean的集合类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;深圳&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广州&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.User&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;王五&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h4 id="2-构造器注入-了解"><a href="#2-构造器注入-了解" class="headerlink" title="2. 构造器注入(了解)"></a>2. 构造器注入(了解)</h4><p>在前面我们通过<code>&lt;bean&gt;</code>标签配置Bean对象，其实是执行Bean类的无参构造函数创建的对象，当Bean类包含有参构造函数的时候，我们在配置文件中可以通过有参构造函数进行配置注入</p><h5 id="2-1-声明组件类"><a href="#2-1-声明组件类" class="headerlink" title="2.1 声明组件类"></a>2.1 声明组件类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyTeam</span> </span>&#123;<br>        <br>    <span class="hljs-keyword">private</span> String teamName;<br>    <span class="hljs-keyword">private</span> Integer memberCount;<br>    <span class="hljs-keyword">private</span> Double memberSalary;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTeamName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> teamName;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTeamName</span><span class="hljs-params">(String teamName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.teamName = teamName;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getMemberCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberCount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberCount</span><span class="hljs-params">(Integer memberCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberCount = memberCount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getMemberSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberSalary</span><span class="hljs-params">(Double memberSalary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberSalary = memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HappyTeam&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;teamName=&#x27;&quot;</span> + teamName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, memberCount=&quot;</span> + memberCount +<br>                <span class="hljs-string">&quot;, memberSalary=&quot;</span> + memberSalary +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HappyTeam</span><span class="hljs-params">(String teamName, Integer memberCount, Double memberSalary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.teamName = teamName;<br>        <span class="hljs-keyword">this</span>.memberCount = memberCount;<br>        <span class="hljs-keyword">this</span>.memberSalary = memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HappyTeam</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyTeam</span> </span>&#123;<br>        <br>    <span class="hljs-keyword">private</span> String teamName;<br>    <span class="hljs-keyword">private</span> Integer memberCount;<br>    <span class="hljs-keyword">private</span> Double memberSalary;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTeamName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> teamName;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTeamName</span><span class="hljs-params">(String teamName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.teamName = teamName;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getMemberCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberCount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberCount</span><span class="hljs-params">(Integer memberCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberCount = memberCount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getMemberSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemberSalary</span><span class="hljs-params">(Double memberSalary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.memberSalary = memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HappyTeam&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;teamName=&#x27;&quot;</span> + teamName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, memberCount=&quot;</span> + memberCount +<br>                <span class="hljs-string">&quot;, memberSalary=&quot;</span> + memberSalary +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HappyTeam</span><span class="hljs-params">(String teamName, Integer memberCount, Double memberSalary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.teamName = teamName;<br>        <span class="hljs-keyword">this</span>.memberCount = memberCount;<br>        <span class="hljs-keyword">this</span>.memberSalary = memberSalary;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HappyTeam</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-配置构造器注入"><a href="#2-2-配置构造器注入" class="headerlink" title="2.2 配置构造器注入"></a>2.2 配置构造器注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 给bean的属性赋值：构造器注入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyTeam&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.HappyTeam&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;happyCorps&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000.55&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 给bean的属性赋值：构造器注入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyTeam&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.HappyTeam&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;happyCorps&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000.55&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h5 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment08</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    HappyTeam happyTeam = iocContainer.getBean(HappyTeam.class);<br>    <br>    System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExperiment08</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    HappyTeam happyTeam = iocContainer.getBean(HappyTeam.class);<br>    <br>    System.out.println(<span class="hljs-string">"happyTeam = "</span> + happyTeam);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-补充"><a href="#2-4-补充" class="headerlink" title="2.4 补充"></a>2.4 补充</h5><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><ul><li>index属性：指定参数所在位置的索引（从0开始）</li><li>name属性：指定参数名</li></ul><h4 id="3-特殊值处理-了解"><a href="#3-特殊值处理-了解" class="headerlink" title="3. 特殊值处理(了解)"></a>3. 特殊值处理(了解)</h4><h5 id="3-1-声明一个类用于测试"><a href="#3-1-声明一个类用于测试" class="headerlink" title="3.1 声明一个类用于测试"></a>3.1 声明一个类用于测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropValue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String commonValue;<br>    <span class="hljs-keyword">private</span> String expression;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCommonValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> commonValue;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommonValue</span><span class="hljs-params">(String commonValue)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.commonValue = commonValue;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getExpression</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> expression;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExpression</span><span class="hljs-params">(String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.expression = expression;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PropValue&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;commonValue=&#x27;&quot;</span> + commonValue + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, expression=&#x27;&quot;</span> + expression + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PropValue</span><span class="hljs-params">(String commonValue, String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.commonValue = commonValue;<br>        <span class="hljs-keyword">this</span>.expression = expression;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PropValue</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.component;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropValue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String commonValue;<br>    <span class="hljs-keyword">private</span> String expression;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCommonValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> commonValue;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommonValue</span><span class="hljs-params">(String commonValue)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.commonValue = commonValue;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getExpression</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> expression;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExpression</span><span class="hljs-params">(String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.expression = expression;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PropValue&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;commonValue=&#x27;&quot;</span> + commonValue + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, expression=&#x27;&quot;</span> + expression + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PropValue</span><span class="hljs-params">(String commonValue, String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.commonValue = commonValue;<br>        <span class="hljs-keyword">this</span>.expression = expression;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PropValue</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-null值"><a href="#3-2-null值" class="headerlink" title="3.2 null值"></a>3.2 null值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commonValue&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- null标签：将一个属性值明确设置为null --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;commonValue&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- null标签：将一个属性值明确设置为null --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>></span><br></code></pre></td></tr></table></figure><h5 id="3-3-当value值中有特殊字符时"><a href="#3-3-当value值中有特殊字符时" class="headerlink" title="3.3 当value值中有特殊字符时"></a>3.3 当value值中有特殊字符时</h5><h6 id="3-3-1-使用XML实体字符-转义符-解决"><a href="#3-3-1-使用XML实体字符-转义符-解决" class="headerlink" title="3.3.1 使用XML实体字符(转义符)解决"></a>3.3.1 使用XML实体字符(转义符)解决</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propValue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.PropValue&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a <span class="hljs-symbol">&amp;lt;</span> b&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propValue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.PropValue&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a <span class="hljs-symbol">&amp;lt;</span> b&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h6 id="3-3-2-使用CDATA解决"><a href="#3-3-2-使用CDATA解决" class="headerlink" title="3.3.2 使用CDATA解决"></a>3.3.2 使用CDATA解决</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propValue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.PropValue&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propValue&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.ioc.component.PropValue&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h4 id="4-p命名空间方式注入-了解"><a href="#4-p命名空间方式注入-了解" class="headerlink" title="4. p命名空间方式注入(了解)"></a>4. p命名空间方式注入(了解)</h4><h5 id="4-1-引入p命名空间的约束"><a href="#4-1-引入p命名空间的约束" class="headerlink" title="4.1 引入p命名空间的约束"></a>4.1 引入p命名空间的约束</h5><p>使用 p 名称空间需要导入相关的 XML 约束，在 IDEA 的协助下导入即可： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>></span><br><br></code></pre></td></tr></table></figure><h5 id="4-2-使用p命名空间注入"><a href="#4-2-使用p命名空间注入" class="headerlink" title="4.2 使用p命名空间注入"></a>4.2 使用p命名空间注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--注入简单类型数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥拉夫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><br><span class="hljs-comment">&lt;!--注入Bean类型数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span> <span class="hljs-attr">p:userService-ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">p:happyComponent-ref</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--注入简单类型数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥拉夫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><br><span class="hljs-comment">&lt;!--注入Bean类型数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span> <span class="hljs-attr">p:userService-ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">p:happyComponent-ref</span>=<span class="hljs-string">&quot;happyComponent&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h5 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment">//调用UserServlet的sayHello()方法</span><br>    userServlet.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-自动装配"><a href="#5-自动装配" class="headerlink" title="5. 自动装配"></a>5. 自动装配</h4><p>所谓自动装配就是一个组件需要其他组件时，由 IOC 容器负责找到那个需要的组件，并装配进去。  </p><h5 id="5-1-配置"><a href="#5-1-配置" class="headerlink" title="5.1 配置"></a>5.1 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥拉夫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        你想让ioc容器创建什么对象，就将那个类配置到bean标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用依赖注入给UserService属性赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        自动装配:autowire属性表示自动装配，就是不需要你去管依赖注入，IOC容器会自动进行依赖注入。它的取值有如下两个</span><br><span class="hljs-comment">            1. byName:根据要注入的属性名和Bean对象的id的对应关系去注入</span><br><span class="hljs-comment">            2. byType:表示核心容器会自动在自身容器中查找一个该类型的对象，给成员变量赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥拉夫&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span> <span class="hljs-attr">p:username</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        你想让ioc容器创建什么对象，就将那个类配置到bean标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用依赖注入给UserService属性赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        自动装配:autowire属性表示自动装配，就是不需要你去管依赖注入，IOC容器会自动进行依赖注入。它的取值有如下两个</span><br><span class="hljs-comment">            1. byName:根据要注入的属性名和Bean对象的id的对应关系去注入</span><br><span class="hljs-comment">            2. byType:表示核心容器会自动在自身容器中查找一个该类型的对象，给成员变量赋值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServlet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.servlet.UserServlet&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span>    <br></code></pre></td></tr></table></figure><h5 id="5-2-测试"><a href="#5-2-测试" class="headerlink" title="5.2 测试"></a>5.2 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过ioc容器获取UserServlet的对象</span><br>    UserServlet userServlet = (UserServlet) act.getBean(<span class="hljs-string">&quot;userServlet&quot;</span>);<br>    <span class="hljs-comment">//调用UserServlet的sayHello()方法</span><br>    userServlet.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三节-Bean的作用域和生命周期"><a href="#第三节-Bean的作用域和生命周期" class="headerlink" title="第三节 Bean的作用域和生命周期"></a>第三节 Bean的作用域和生命周期</h3><h4 id="1-Bean的作用域"><a href="#1-Bean的作用域" class="headerlink" title="1. Bean的作用域"></a>1. Bean的作用域</h4><h5 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h5><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但几乎不用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><h5 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComment&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComment&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComment&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComment&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h5 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetBean</span><span class="hljs-params">()</span> </span>&#123;<br>    HappyComment happyComment01 = (HappyComment) act.getBean(<span class="hljs-string">&quot;happyComment&quot;</span>);<br>    HappyComment happyComment02 = (HappyComment) act.getBean(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetBean</span><span class="hljs-params">()</span> </span>&#123;<br>    HappyComment happyComment01 = (HappyComment) act.getBean(<span class="hljs-string">&quot;happyComment&quot;</span>);<br>    HappyComment happyComment02 = (HappyComment) act.getBean(<span class="hljs-string">"happyComment"</span>);<br>    <br>    System.out.println(happyComment01 == happyComment02);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Bean的生命周期-了解"><a href="#2-Bean的生命周期-了解" class="headerlink" title="2. Bean的生命周期(了解)"></a>2. Bean的生命周期(了解)</h4><h5 id="2-1-bean的生命周期清单"><a href="#2-1-bean的生命周期清单" class="headerlink" title="2.1 bean的生命周期清单"></a>2.1 bean的生命周期清单</h5><ul><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性（依赖注入）</li><li>bean对象初始化之前操作（由bean的后置处理器前置方法负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器后置方法负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ul><h5 id="2-2-指定bean的初始化方法和销毁方法"><a href="#2-2-指定bean的初始化方法和销毁方法" class="headerlink" title="2.2 指定bean的初始化方法和销毁方法"></a>2.2 指定bean的初始化方法和销毁方法</h5><h6 id="2-2-1-创建两个方法作为初始化和销毁方法"><a href="#2-2-1-创建两个方法作为初始化和销毁方法" class="headerlink" title="2.2.1 创建两个方法作为初始化和销毁方法"></a>2.2.1 创建两个方法作为初始化和销毁方法</h6><p>用com.atguigu.component.HappyComponent类测试，在类中加俩方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:PACKAGE_NAME</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  16:02</span><br><span class="hljs-comment"> * 目标:让HappyComponent对象创建的时候，就执行initLifeCircle()方法，在HappyComponent对象销毁之前就执行destroyLifeCircle()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initLifeCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent对象创建了，我可以做一些初始化操作...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyLifeCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent对象销毁了，我可以做一些数据备份工作...&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:PACKAGE_NAME</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-29  16:02</span><br><span class="hljs-comment"> * 目标:让HappyComponent对象创建的时候，就执行initLifeCircle()方法，在HappyComponent对象销毁之前就执行destroyLifeCircle()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initLifeCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent对象创建了，我可以做一些初始化操作...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyLifeCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent对象销毁了，我可以做一些数据备份工作...&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"hello world"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2-配置bean时指定初始化和销毁方法"><a href="#2-2-2-配置bean时指定初始化和销毁方法" class="headerlink" title="2.2.2 配置bean时指定初始化和销毁方法"></a>2.2.2 配置bean时指定初始化和销毁方法</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        bean标签的scope属性表示这个Bean对象的范围:</span><br><span class="hljs-comment">            1. singleton(默认取值): 单例</span><br><span class="hljs-comment">            2. prototype: 多例</span><br><span class="hljs-comment">        bean标签的init-method属性是用于配置这个Bean对象的初始化方法,</span><br><span class="hljs-comment">        bean标签的destroy-method属性是用于配置这个Bean对象的销毁方法</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initLifeCircle&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyLifeCircle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        bean标签的scope属性表示这个Bean对象的范围:</span><br><span class="hljs-comment">            1. singleton(默认取值): 单例</span><br><span class="hljs-comment">            2. prototype: 多例</span><br><span class="hljs-comment">        bean标签的init-method属性是用于配置这个Bean对象的初始化方法,</span><br><span class="hljs-comment">        bean标签的destroy-method属性是用于配置这个Bean对象的销毁方法</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponent&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initLifeCircle&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyLifeCircle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>></span><br></code></pre></td></tr></table></figure><h5 id="2-3-bean的后置处理器"><a href="#2-3-bean的后置处理器" class="headerlink" title="2.3 bean的后置处理器"></a>2.3 bean的后置处理器</h5><h6 id="2-3-1-创建后置处理器类"><a href="#2-3-1-创建后置处理器类" class="headerlink" title="2.3.1 创建后置处理器类"></a>2.3.1 创建后置处理器类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.process;<br>    <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br>    <br><span class="hljs-comment">// 声明一个自定义的bean后置处理器</span><br><span class="hljs-comment">// 注意：bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHappyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>    <br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>    <br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc.process;<br>    <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br>    <br><span class="hljs-comment">// 声明一个自定义的bean后置处理器</span><br><span class="hljs-comment">// 注意：bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHappyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>    <br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <br>        System.out.println(<span class="hljs-string">&quot;★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>    <br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-3-2-把bean的后置处理器放入IOC容器"><a href="#2-3-2-把bean的后置处理器放入IOC容器" class="headerlink" title="2.3.2 把bean的后置处理器放入IOC容器"></a>2.3.2 把bean的后置处理器放入IOC容器</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myHappyBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myHappyBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.atguigu.ioc.process.MyHappyBeanProcessor"</span>/></span><br></code></pre></td></tr></table></figure><h6 id="2-3-3-执行效果示例"><a href="#2-3-3-执行效果示例" class="headerlink" title="2.3.3 执行效果示例"></a>2.3.3 执行效果示例</h6><blockquote><p>HappyComponent创建对象 </p><p>HappyComponent要设置属性了 </p><p>☆☆☆happyComponent = com.atguigu.ioc.component.HappyComponent@ca263c2 </p><p>HappyComponent初始化 </p><p>★★★happyComponent = com.atguigu.ioc.component.HappyComponent@ca263c2 HappyComponent销毁</p></blockquote><h3 id="第四节-FactoryBean机制-了解"><a href="#第四节-FactoryBean机制-了解" class="headerlink" title="第四节 FactoryBean机制(了解)"></a>第四节 FactoryBean机制(了解)</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2002-2020 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Interface to be implemented by objects used within a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125; which</span><br><span class="hljs-comment"> * are themselves factories for individual objects. If a bean implements this</span><br><span class="hljs-comment"> * interface, it is used as a factory for an object to expose, not directly as a</span><br><span class="hljs-comment"> * bean instance that will be exposed itself.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span><br><span class="hljs-comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span><br><span class="hljs-comment"> * references (&#123;<span class="hljs-doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span><br><span class="hljs-comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125;</span><br><span class="hljs-comment"> * interface allows for exposing more fine-grained behavioral metadata.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span><br><span class="hljs-comment"> * the AOP &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span><br><span class="hljs-comment"> * custom components as well; however, this is only common for infrastructure code.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span><br><span class="hljs-comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #getObjectType()&#125; &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span><br><span class="hljs-comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span><br><span class="hljs-comment"> * other beans, implement &#123;<span class="hljs-doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span><br><span class="hljs-comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span><br><span class="hljs-comment"> * a destroy method on an exposed bean object (such as &#123;<span class="hljs-doctag">@link</span> java.io.Closeable#close()&#125;</span><br><span class="hljs-comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span><br><span class="hljs-comment"> * synchronization of bean creation. There is usually no need for internal</span><br><span class="hljs-comment"> * synchronization other than for purposes of lazy initialization within the</span><br><span class="hljs-comment"> * FactoryBean itself (or the like).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rod Johnson</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 08.03.2003</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the bean type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.beans.factory.BeanFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The name of an attribute that can be</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span><br><span class="hljs-comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span><br><span class="hljs-comment">     * the factory bean class.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment">     */</span><br>    String OBJECT_TYPE_ATTRIBUTE = <span class="hljs-string">&quot;factoryBeanObjectType&quot;</span>;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return an instance (possibly shared or independent) of the object</span><br><span class="hljs-comment">     * managed by this factory.</span><br><span class="hljs-comment">     * &lt;p&gt;As with a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125;, this allows support for both the</span><br><span class="hljs-comment">     * Singleton and Prototype design pattern.</span><br><span class="hljs-comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span><br><span class="hljs-comment">     * the call (for example because it is involved in a circular reference),</span><br><span class="hljs-comment">     * throw a corresponding &#123;<span class="hljs-doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment">     * objects. The factory will consider this as normal value to be used; it</span><br><span class="hljs-comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span><br><span class="hljs-comment">     * FactoryBean implementations are encouraged to throw</span><br><span class="hljs-comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an instance of the bean (can be &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception in case of creation errors</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> FactoryBeanNotInitializedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function">T <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known in advance.</span><br><span class="hljs-comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span><br><span class="hljs-comment">     * instantiating objects, for example on autowiring.</span><br><span class="hljs-comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span><br><span class="hljs-comment">     * this method should try to avoid singleton creation as far as possible;</span><br><span class="hljs-comment">     * it should rather estimate the type in advance.</span><br><span class="hljs-comment">     * For prototypes, returning a meaningful type here is advisable too.</span><br><span class="hljs-comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span><br><span class="hljs-comment">     * been fully initialized. It must not rely on state created during</span><br><span class="hljs-comment">     * initialization; of course, it can still use such state if available.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span><br><span class="hljs-comment">     * this method properly, using the current state of the FactoryBean.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known at the time of the call</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> ListableBeanFactory#getBeansOfType</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getObjectType();<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Is the object managed by this factory a singleton? That is,</span><br><span class="hljs-comment">     * will &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; always return the same object</span><br><span class="hljs-comment">     * (a reference that can be cached)?</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span><br><span class="hljs-comment">     * the object returned from &#123;<span class="hljs-doctag">@code</span> getObject()&#125; might get cached</span><br><span class="hljs-comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="hljs-doctag">@code</span> true&#125;</span><br><span class="hljs-comment">     * unless the FactoryBean always exposes the same reference.</span><br><span class="hljs-comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span><br><span class="hljs-comment">     * be provided by the owning BeanFactory; usually, it has to be</span><br><span class="hljs-comment">     * defined as singleton there.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="hljs-doctag">@code</span> false&#125; does not</span><br><span class="hljs-comment">     * necessarily indicate that returned objects are independent instances.</span><br><span class="hljs-comment">     * An implementation of the extended &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125; interface</span><br><span class="hljs-comment">     * may explicitly indicate independent instances through its</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="hljs-doctag">@link</span> FactoryBean&#125;</span><br><span class="hljs-comment">     * implementations which do not implement this extended interface are</span><br><span class="hljs-comment">     * simply assumed to always return independent instances if the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;The default implementation returns &#123;<span class="hljs-doctag">@code</span> true&#125;, since a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> whether the exposed object is a singleton</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getObject()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> SmartFactoryBean#isPrototype()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2002-2020 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Interface to be implemented by objects used within a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125; which</span><br><span class="hljs-comment"> * are themselves factories for individual objects. If a bean implements this</span><br><span class="hljs-comment"> * interface, it is used as a factory for an object to expose, not directly as a</span><br><span class="hljs-comment"> * bean instance that will be exposed itself.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span><br><span class="hljs-comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span><br><span class="hljs-comment"> * references (&#123;<span class="hljs-doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span><br><span class="hljs-comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125;</span><br><span class="hljs-comment"> * interface allows for exposing more fine-grained behavioral metadata.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span><br><span class="hljs-comment"> * the AOP &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span><br><span class="hljs-comment"> * custom components as well; however, this is only common for infrastructure code.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span><br><span class="hljs-comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #getObjectType()&#125; &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span><br><span class="hljs-comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span><br><span class="hljs-comment"> * other beans, implement &#123;<span class="hljs-doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span><br><span class="hljs-comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span><br><span class="hljs-comment"> * a destroy method on an exposed bean object (such as &#123;<span class="hljs-doctag">@link</span> java.io.Closeable#close()&#125;</span><br><span class="hljs-comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span><br><span class="hljs-comment"> * synchronization of bean creation. There is usually no need for internal</span><br><span class="hljs-comment"> * synchronization other than for purposes of lazy initialization within the</span><br><span class="hljs-comment"> * FactoryBean itself (or the like).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rod Johnson</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 08.03.2003</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the bean type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.beans.factory.BeanFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The name of an attribute that can be</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span><br><span class="hljs-comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span><br><span class="hljs-comment">     * the factory bean class.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment">     */</span><br>    String OBJECT_TYPE_ATTRIBUTE = <span class="hljs-string">&quot;factoryBeanObjectType&quot;</span>;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return an instance (possibly shared or independent) of the object</span><br><span class="hljs-comment">     * managed by this factory.</span><br><span class="hljs-comment">     * &lt;p&gt;As with a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125;, this allows support for both the</span><br><span class="hljs-comment">     * Singleton and Prototype design pattern.</span><br><span class="hljs-comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span><br><span class="hljs-comment">     * the call (for example because it is involved in a circular reference),</span><br><span class="hljs-comment">     * throw a corresponding &#123;<span class="hljs-doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment">     * objects. The factory will consider this as normal value to be used; it</span><br><span class="hljs-comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span><br><span class="hljs-comment">     * FactoryBean implementations are encouraged to throw</span><br><span class="hljs-comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an instance of the bean (can be &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception in case of creation errors</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> FactoryBeanNotInitializedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function">T <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known in advance.</span><br><span class="hljs-comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span><br><span class="hljs-comment">     * instantiating objects, for example on autowiring.</span><br><span class="hljs-comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span><br><span class="hljs-comment">     * this method should try to avoid singleton creation as far as possible;</span><br><span class="hljs-comment">     * it should rather estimate the type in advance.</span><br><span class="hljs-comment">     * For prototypes, returning a meaningful type here is advisable too.</span><br><span class="hljs-comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span><br><span class="hljs-comment">     * been fully initialized. It must not rely on state created during</span><br><span class="hljs-comment">     * initialization; of course, it can still use such state if available.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span><br><span class="hljs-comment">     * this method properly, using the current state of the FactoryBean.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known at the time of the call</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> ListableBeanFactory#getBeansOfType</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getObjectType();<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Is the object managed by this factory a singleton? That is,</span><br><span class="hljs-comment">     * will &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; always return the same object</span><br><span class="hljs-comment">     * (a reference that can be cached)?</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span><br><span class="hljs-comment">     * the object returned from &#123;<span class="hljs-doctag">@code</span> getObject()&#125; might get cached</span><br><span class="hljs-comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="hljs-doctag">@code</span> true&#125;</span><br><span class="hljs-comment">     * unless the FactoryBean always exposes the same reference.</span><br><span class="hljs-comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span><br><span class="hljs-comment">     * be provided by the owning BeanFactory; usually, it has to be</span><br><span class="hljs-comment">     * defined as singleton there.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="hljs-doctag">@code</span> false&#125; does not</span><br><span class="hljs-comment">     * necessarily indicate that returned objects are independent instances.</span><br><span class="hljs-comment">     * An implementation of the extended &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125; interface</span><br><span class="hljs-comment">     * may explicitly indicate independent instances through its</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="hljs-doctag">@link</span> FactoryBean&#125;</span><br><span class="hljs-comment">     * implementations which do not implement this extended interface are</span><br><span class="hljs-comment">     * simply assumed to always return independent instances if the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;The default implementation returns &#123;<span class="hljs-doctag">@code</span> true&#125;, since a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> whether the exposed object is a singleton</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getObject()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> SmartFactoryBean#isPrototype()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-实现FactoryBean接口"><a href="#2-实现FactoryBean接口" class="headerlink" title="2. 实现FactoryBean接口"></a>2. 实现FactoryBean接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-31  09:03</span><br><span class="hljs-comment"> * 要使用FactoryBean机制就得写一个类实现FactoryBean接口,接口的泛型表示你想通过这个FactoryBean创建什么对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * FactoryBean机制:你在spring的配置文件中进行IOC配置的是HappyComponentFactoryBean类，但是真正创建出来存储在核心容器中的对象是</span><br><span class="hljs-comment"> *                HappyComponentFactoryBean对象调用getObject()方法所获取的对象(HappyComponent)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponentFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">HappyComponent</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setComponentName</span><span class="hljs-params">(String componentName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.componentName = componentName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HappyComponent <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HappyComponent happyComponent = <span class="hljs-keyword">new</span> HappyComponent();<br>        happyComponent.setComponentName(componentName);<br>        <span class="hljs-keyword">return</span> happyComponent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu.component;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu.component</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 日期2021-08-31  09:03</span><br><span class="hljs-comment"> * 要使用FactoryBean机制就得写一个类实现FactoryBean接口,接口的泛型表示你想通过这个FactoryBean创建什么对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * FactoryBean机制:你在spring的配置文件中进行IOC配置的是HappyComponentFactoryBean类，但是真正创建出来存储在核心容器中的对象是</span><br><span class="hljs-comment"> *                HappyComponentFactoryBean对象调用getObject()方法所获取的对象(HappyComponent)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyComponentFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">HappyComponent</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> String componentName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setComponentName</span><span class="hljs-params">(String componentName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.componentName = componentName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HappyComponent <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HappyComponent happyComponent = <span class="hljs-keyword">new</span> HappyComponent();<br>        happyComponent.setComponentName(componentName);<br>        <span class="hljs-keyword">return</span> happyComponent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-配置bean"><a href="#3-配置bean" class="headerlink" title="3. 配置bean"></a>3. 配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponentFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;componentName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;happyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.component.HappyComponentFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;componentName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;奥巴马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>></span><br></code></pre></td></tr></table></figure><h4 id="4-测试获取bean"><a href="#4-测试获取bean" class="headerlink" title="4. 测试获取bean"></a>4. 测试获取bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFactoryBean</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetBean</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1. 创建核心容器</span><br>        ApplicationContext act = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-application.xml&quot;</span>);<br>        <span class="hljs-comment">//2.从核心容器中获取对象</span><br>        HappyComponent happyComponent = (HappyComponent) act.getBean(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.component.HappyComponent;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFactoryBean</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetBean</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1. 创建核心容器</span><br>        ApplicationContext act = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-application.xml&quot;</span>);<br>        <span class="hljs-comment">//2.从核心容器中获取对象</span><br>        HappyComponent happyComponent = (HappyComponent) act.getBean(<span class="hljs-string">"happyComponent"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA导入Spring源码</title>
      <link href="/2021/12/03/IDEA_Import_SpringCode/"/>
      <url>/2021/12/03/IDEA_Import_SpringCode/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA导入Spring源码"><a href="#IDEA导入Spring源码" class="headerlink" title="IDEA导入Spring源码"></a>IDEA导入Spring源码</h1><h2 id="1-下载spring源码"><a href="#1-下载spring源码" class="headerlink" title="1.下载spring源码"></a>1.下载spring源码</h2><p> Spring源码现在在由github托管,git地址</p><blockquote><p><a href="https://github.com/spring-projects/spring-framework/tree/5.1.x">https://github.com/spring-projects/spring-framework/tree/5.1.x</a></p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126191825760.png" alt="image-20211126191825760"></p></blockquote><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126191900085.png" alt="image-20211126191900085"></p><p>先把源码下载好，推荐5.0X或者5.1X</p><h2 id="2-下载gradle"><a href="#2-下载gradle" class="headerlink" title="2.下载gradle"></a>2.下载gradle</h2><p>安装配置gradle环境变量</p><ul><li>To build you will need Git and JDK 8 update 60 or later. Be sure that your JAVA_HOME environment variable points to the jdk1.8.0 folder extracted from the JDK download.</li></ul><p>所以安装前要确保javahome在jdk<strong>1.8.0.60</strong>以上版本 </p><p>在下载之前，先找到我们下载的源码，spring-framework\gradle\wrapper下面的gradle-wrapper.properties文件，</p><p>打开先瞅两眼！</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126194001815.png" alt="image-20211126194001815"></p><p>打开后可以看到 默认是去gradle仓库下载指定版本的，</p><p>所以接下来我们下载的时候最好下载适配版本，不然很容易出现各种奇奇怪怪的错误。</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126194132893.png" alt="image-20211126194132893"></p><p>gradle下载地址</p><blockquote><p><a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a></p></blockquote><p>配置gradle的环境变量</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126192740437.png" alt="image-20211126192740437"></p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126192813164.png" alt="image-20211126192813164"></p><p>下面这个是gradle的仓库位置，自己选地方放就行了，注意二级目录是.gradle不能改。</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126192852129.png" alt="image-20211126192852129"></p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126193015207.png" alt="image-20211126193015207"></p><p>如果不改的话默认就会在C盘用户下面的创建一个.gradle</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126195925377.png" alt="image-20211126195925377"></p><p>最后把path添加上</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126193245885.png" alt="image-20211126193245885"></p><p>配好之后可以在cmd上输入 gradle -v检测是否配成功</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126193343526.png" alt="image-20211126193343526"></p><p>其实这一步不做也可以，主要是为了之后使用方便，如果是单纯的构建源码可以省略这步。</p><h2 id="3-构建源码"><a href="#3-构建源码" class="headerlink" title="3.构建源码"></a>3.构建源码</h2><p>我们先选中下载好的源码，直接open打开即可。</p><p>先打开IDEA的Settings  –&gt; Plugins 检查有没有下载好插件</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126193538024.png" alt="image-20211126193538024"></p><p>插件安装好之后 在Settings找到Gradle</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126193820036.png" alt="image-20211126193820036"></p><p>可以看到这里可以选择是用gradle-wrapper.properties指定的地址下载gradle，默认会先去你指定的仓库先找，找不到就去下载。也可以使用本地的gradle。建议使用本地gradle。</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126195251922.png" alt="image-20211126195251922"></p><p>配置好之后 我们找到build.gradle文件，配置上国内镜像 下载速度会快很多</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs properties"><span class="hljs-attr">allprojects</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">repositories</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27; &#125;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27;&#125;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr"><code class="language-hljs properties"><span class="hljs-attr">allprojects</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">repositories</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27; &#125;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="hljs-attr">maven</span> <span class="hljs-string">&#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27;&#125;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126195730078.png" alt="image-20211126195730078"></p><p>然后等待构建完成即可</p><h2 id="4-常见错误"><a href="#4-常见错误" class="headerlink" title="4.常见错误"></a>4.常见错误</h2><p>这里列举一些遇到的坑</p><p>第一个</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126200402355.png" alt="image-20211126200402355"></p><p>报找不到这个插件，反正网上试了各种办法都不行，然后换了个idea就没这个错误了。。。这个错误用的是IDEA2019.3.1报的。然后我用2018.2.3和2021.1都没这个问题。感兴趣的自己钻研。。。。。。。</p><p>附上版本适配图</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126200816658.png" alt="image-20211126200816658"></p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126200826599.png" alt="image-20211126200826599"></p><p>第二个  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs java">Unable to find method <span class="hljs-string">&#x27;org.gradle.api.artifacts.result.ComponentSelectionReason.getDescription()Ljava/lang/String;&#x27;</span>.<br>Possible causes <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> unexpected error include:&lt;ul&gt;&lt;li&gt;Gradle<span class="hljs-string">&#x27;s dependency cache may be corrupt (this sometimes occurs after a network connection timeout.)</span><br><span class="hljs-string">Re-download dependencies and sync project (requires network)&lt;/li&gt;&lt;li&gt;The state of a Gradle build process (daemon) may be corrupt. Stopping all Gradle daemons may solve this problem.</span><br><span class="hljs-string">Stop Gradle build processes (requires restart)&lt;/li&gt;&lt;li&gt;Your project may be using a third-party plugin which is not compatible with the other plugins in the project or the version of Gradle requested by the project.&lt;/li&gt;&lt;/ul&gt;In the case of corrupt Gradle processes, you can also try closing the IDE and then killing all Java processes.</span><br><span class="hljs-string"><code class="language-hljs java">Unable to find method <span class="hljs-string">&#x27;org.gradle.api.artifacts.result.ComponentSelectionReason.getDescription()Ljava/lang/String;&#x27;</span>.<br>Possible causes <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> unexpected error include:&lt;ul&gt;&lt;li&gt;Gradle<span class="hljs-string">&#x27;s dependency cache may be corrupt (this sometimes occurs after a network connection timeout.)</span><br><span class="hljs-string">Re-download dependencies and sync project (requires network)&lt;/li&gt;&lt;li&gt;The state of a Gradle build process (daemon) may be corrupt. Stopping all Gradle daemons may solve this problem.</span><br><span class="hljs-string">Stop Gradle build processes (requires restart)&lt;/li&gt;&lt;li&gt;Your project may be using a third-party plugin which is not compatible with the other plugins in the project or the version of Gradle requested by the project.&lt;/li&gt;&lt;/ul&gt;In the case of corrupt Gradle processes, you can also try closing the IDE and then killing all Java processes.</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126200934973.png" alt="image-20211126200934973"></p><p>这个问题出现的可能有两种，</p><p>1、gradle不适配，换几个试试。gradle得和spring源码还有IDEA都适配。巨坑</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126201658911.png" alt="image-20211126201658911"></p><p>2、IDEA版本太低！就是这个问题搞了我三个小时！！！！我用2021.1的IDEA就解决了这个错误</p><p>第三个</p><p><img src="/2021/12/03/IDEA_Import_SpringCode/image-20211126201335041.png" alt="image-20211126201335041"></p><p>这个错误。。，gradle版本太低了。和源码不适配，得往高了换。换了一般都能解决。</p><p>第四个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">Caused by: java.lang.NoSuchMethodError: org.gradle.api.artifacts.ProjectDependency.getConfiguration<br></code></pre></td></tr></table></figure><p>如果 <em>build.gradle</em> 文件包含 <strong>spring-boot-gradle-plugin，</strong>升级其版本 或者其他插件版本低了</p><p>第五个 jar包找不到问题，百度很好解决。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-缓存</title>
      <link href="/2021/12/03/mybatis04/"/>
      <url>/2021/12/03/mybatis04/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-day04"><a href="#Mybatis-day04" class="headerlink" title="Mybatis-day04"></a>Mybatis-day04</h1><h2 id="第一章-Mybatis的缓存机制"><a href="#第一章-Mybatis的缓存机制" class="headerlink" title="第一章 Mybatis的缓存机制"></a>第一章 Mybatis的缓存机制</h2><h3 id="第一节-缓存机制的概述"><a href="#第一节-缓存机制的概述" class="headerlink" title="第一节 缓存机制的概述"></a>第一节 缓存机制的概述</h3><h4 id="1-什么是缓存"><a href="#1-什么是缓存" class="headerlink" title="1. 什么是缓存"></a>1. 什么是缓存</h4><p><img src="/2021/12/03/mybatis04/tu_004.png"></p><h4 id="2-一级缓存和二级缓存的对比"><a href="#2-一级缓存和二级缓存的对比" class="headerlink" title="2. 一级缓存和二级缓存的对比"></a>2. 一级缓存和二级缓存的对比</h4><h5 id="2-1-使用顺序"><a href="#2-1-使用顺序" class="headerlink" title="2.1 使用顺序"></a>2.1 使用顺序</h5><p><img src="/2021/12/03/mybatis04/tu_005.png"></p><p>查询的顺序是：</p><ul><li>先查询二级缓存，因为二级缓存中可能会有其他SqlSession已经查出来的数据，可以拿来直接使用。</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之前，一级缓存中的数据会写入二级缓存</li></ul><h5 id="2-2-作用范围"><a href="#2-2-作用范围" class="headerlink" title="2.2 作用范围"></a>2.2 作用范围</h5><ul><li>一级缓存：SqlSession级别</li><li>二级缓存：SqlSessionFactory级别</li></ul><p><img src="/2021/12/03/mybatis04/tu_006.png"></p><p> 它们之间范围的大小参考下面图： </p><p><img src="/2021/12/03/mybatis04/tu_007.png"></p><h3 id="第二节-一级缓存"><a href="#第二节-一级缓存" class="headerlink" title="第二节 一级缓存"></a>第二节 一级缓存</h3><h4 id="1-代码验证一级缓存"><a href="#1-代码验证一级缓存" class="headerlink" title="1 代码验证一级缓存"></a>1 代码验证一级缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFirstLevelCache</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//验证一级缓存的存在:要求两次查询使用的是同一个sqlSession对象</span><br>    <span class="hljs-comment">//一级缓存是Mybatis自动开启的，不需要配置，也无法关闭(表示你必须使用一级缓存)</span><br>    SqlSession sqlSession = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);<br><br>    Employee employee1 = employeeMapper.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee1);<br>    <span class="hljs-comment">//一级缓存什么时候会被清除呢?</span><br>    <span class="hljs-comment">//1. sqlSession提交事务   2. sqlSession调用clearCache()方法</span><br>    <span class="hljs-comment">//3. sqlSession被销毁了close()一级缓存的内容会被写入到二级缓存</span><br>    <span class="hljs-comment">//4. 数据发生改变:其实并没有清除一级缓存，而是修改缓存中数据</span><br>    SqlSession sqlSession2 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper2 = sqlSession2.getMapper(EmployeeMapper.class);<br>    employee1.setEmpName(<span class="hljs-string">&quot;zs&quot;</span>);<br>    employeeMapper2.updateEmployee(employee1);<br>    sqlSession2.commit();<br><br><br>    Employee employee2 = employeeMapper.selectEmployee(<span class="hljs-number"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFirstLevelCache</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//验证一级缓存的存在:要求两次查询使用的是同一个sqlSession对象</span><br>    <span class="hljs-comment">//一级缓存是Mybatis自动开启的，不需要配置，也无法关闭(表示你必须使用一级缓存)</span><br>    SqlSession sqlSession = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);<br><br>    Employee employee1 = employeeMapper.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee1);<br>    <span class="hljs-comment">//一级缓存什么时候会被清除呢?</span><br>    <span class="hljs-comment">//1. sqlSession提交事务   2. sqlSession调用clearCache()方法</span><br>    <span class="hljs-comment">//3. sqlSession被销毁了close()一级缓存的内容会被写入到二级缓存</span><br>    <span class="hljs-comment">//4. 数据发生改变:其实并没有清除一级缓存，而是修改缓存中数据</span><br>    SqlSession sqlSession2 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper2 = sqlSession2.getMapper(EmployeeMapper.class);<br>    employee1.setEmpName(<span class="hljs-string">&quot;zs&quot;</span>);<br>    employeeMapper2.updateEmployee(employee1);<br>    sqlSession2.commit();<br><br><br>    Employee employee2 = employeeMapper.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee2);<br>&#125;<br></code></pre></td></tr></table></figure><p>一共只打印了一条SQL语句。 </p><h4 id="2-一级缓存失效的情况"><a href="#2-一级缓存失效的情况" class="headerlink" title="2 一级缓存失效的情况"></a>2 一级缓存失效的情况</h4><ul><li>不是同一个SqlSession(因为一级缓存只能用在同一个SqlSession中)</li><li>同一个SqlSession但是查询条件发生了变化</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作,那么会改变缓存的数据</li><li>同一个SqlSession两次查询期间手动清空了缓存: 调用sqlSession的clearCache()方法</li><li>同一个SqlSession两次查询期间提交了事务: 调用sqlSession的commit()方法</li></ul><h3 id="第三节-二级缓存"><a href="#第三节-二级缓存" class="headerlink" title="第三节 二级缓存"></a>第三节 二级缓存</h3><h4 id="1-代码测试二级缓存"><a href="#1-代码测试二级缓存" class="headerlink" title="1 代码测试二级缓存"></a>1 代码测试二级缓存</h4><h5 id="1-1-开启二级缓存功能"><a href="#1-1-开启二级缓存功能" class="headerlink" title="1.1 开启二级缓存功能"></a>1.1 开启二级缓存功能</h5><p>在想要使用二级缓存的Mapper配置文件中加入cache标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 加入cache标签启用二级缓存功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 加入cache标签启用二级缓存功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/></span><br></code></pre></td></tr></table></figure><h5 id="1-2-让实体类支持序列化"><a href="#1-2-让实体类支持序列化" class="headerlink" title="1.2 让实体类支持序列化"></a>1.2 让实体类支持序列化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-junit测试"><a href="#1-3-junit测试" class="headerlink" title="1.3 junit测试"></a>1.3 junit测试</h5><p>这个功能的测试操作需要将SqlSessionFactory对象设置为成员变量 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSecondCacheLevel</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//测试二级缓存的存在:二级缓存是使用在不同的SqlSession中，但是是同一个SqlSessionFactory</span><br>    <span class="hljs-comment">//二级缓存不是Mybatis自动开启的，需要我们手动进行配置</span><br>    <span class="hljs-comment">//1. 在要进行二级缓存的映射配置文件中开启二级缓存(使用&lt;cache/&gt;标签)</span><br>    <span class="hljs-comment">//2. 要进行二级缓存的POJO类需要实现Serializable接口(进行序列化:将对象的数据存储到硬盘中)</span><br>    <span class="hljs-comment">//3. 二级缓存的创建时机(什么时候数据会写入到二级缓存中):sqlSession对象close()的时候</span><br>    SqlSession sqlSession1 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper1 = sqlSession1.getMapper(EmployeeMapper.class);<br><br>    SqlSession sqlSession2 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper2 = sqlSession2.getMapper(EmployeeMapper.class);<br><br>    Employee employee1 = employeeMapper1.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee1);<br>    <span class="hljs-comment">//sqlSession1关闭，那么sqlSession1查询到的数据就会写入到二级缓存中</span><br>    sqlSession1.close();<br><br>    Employee employee2 = employeeMapper2.selectEmployee(<span class="hljs-number"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSecondCacheLevel</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//测试二级缓存的存在:二级缓存是使用在不同的SqlSession中，但是是同一个SqlSessionFactory</span><br>    <span class="hljs-comment">//二级缓存不是Mybatis自动开启的，需要我们手动进行配置</span><br>    <span class="hljs-comment">//1. 在要进行二级缓存的映射配置文件中开启二级缓存(使用&lt;cache/&gt;标签)</span><br>    <span class="hljs-comment">//2. 要进行二级缓存的POJO类需要实现Serializable接口(进行序列化:将对象的数据存储到硬盘中)</span><br>    <span class="hljs-comment">//3. 二级缓存的创建时机(什么时候数据会写入到二级缓存中):sqlSession对象close()的时候</span><br>    SqlSession sqlSession1 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper1 = sqlSession1.getMapper(EmployeeMapper.class);<br><br>    SqlSession sqlSession2 = sessionFactory.openSession();<br>    EmployeeMapper employeeMapper2 = sqlSession2.getMapper(EmployeeMapper.class);<br><br>    Employee employee1 = employeeMapper1.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee1);<br>    <span class="hljs-comment">//sqlSession1关闭，那么sqlSession1查询到的数据就会写入到二级缓存中</span><br>    sqlSession1.close();<br><br>    Employee employee2 = employeeMapper2.selectEmployee(<span class="hljs-number">7</span>);<br>    System.out.println(employee2);<br>    sqlSession2.close();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4-缓存命中率"><a href="#1-4-缓存命中率" class="headerlink" title="1.4 缓存命中率"></a>1.4 缓存命中率</h5><p>日志中打印的Cache Hit Ratio叫做缓存命中率 </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs avrasm">Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.0</span>（<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.5</span>（<span class="hljs-number">1</span>/<span class="hljs-number">2</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.6666666666666666</span>（<span class="hljs-number">2</span>/<span class="hljs-number">3</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.75</span>（<span class="hljs-number">3</span>/<span class="hljs-number">4</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.8</span>（<span class="hljs-number">4</span>/<span class="hljs-number"><code class="language-hljs avrasm">Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.0</span>（<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.5</span>（<span class="hljs-number">1</span>/<span class="hljs-number">2</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.6666666666666666</span>（<span class="hljs-number">2</span>/<span class="hljs-number">3</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.75</span>（<span class="hljs-number">3</span>/<span class="hljs-number">4</span>）<br>Cache Hit Ratio [<span class="hljs-keyword">com</span>.atguigu.mybatis.EmployeeMapper]: <span class="hljs-number">0.8</span>（<span class="hljs-number">4</span>/<span class="hljs-number">5</span>）<br></code></pre></td></tr></table></figure><p>缓存命中率=命中缓存的次数/查询的总次数 </p><h4 id="2-查询结果存入二级缓存的时机"><a href="#2-查询结果存入二级缓存的时机" class="headerlink" title="2 查询结果存入二级缓存的时机"></a>2 查询结果存入二级缓存的时机</h4><p>结论：SqlSession关闭的时候，一级缓存中的内容会被存入二级缓存 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">// 1.开启两个SqlSession</span><br>SqlSession session01 = factory.openSession();<br>SqlSession session02 = factory.openSession();<br>    <br><span class="hljs-comment">// 2.获取两个EmployeeMapper</span><br>EmployeeMapper employeeMapper01 = session01.getMapper(EmployeeMapper.class);<br>EmployeeMapper employeeMapper02 = session02.getMapper(EmployeeMapper.class);<br>    <br><span class="hljs-comment">// 3.使用两个EmployeeMapper做两次查询，返回两个Employee对象</span><br>Employee employee01 = employeeMapper01.selectEmployeeById(<span class="hljs-number">2</span>);<br>Employee employee02 = employeeMapper02.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// 4.比较两个Employee对象</span><br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">// 1.开启两个SqlSession</span><br>SqlSession session01 = factory.openSession();<br>SqlSession session02 = factory.openSession();<br>    <br><span class="hljs-comment">// 2.获取两个EmployeeMapper</span><br>EmployeeMapper employeeMapper01 = session01.getMapper(EmployeeMapper.class);<br>EmployeeMapper employeeMapper02 = session02.getMapper(EmployeeMapper.class);<br>    <br><span class="hljs-comment">// 3.使用两个EmployeeMapper做两次查询，返回两个Employee对象</span><br>Employee employee01 = employeeMapper01.selectEmployeeById(<span class="hljs-number">2</span>);<br>Employee employee02 = employeeMapper02.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// 4.比较两个Employee对象</span><br>System.out.println(<span class="hljs-string">"employee02.equals(employee01) = "</span> + employee02.equals(employee01));<br></code></pre></td></tr></table></figure><p>上面代码打印的结果是： </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,209 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,570 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,624 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,643 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,644 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,661 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,662 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,665 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br>employee02.equals(employee01) = <span class="hljs-literal"><code class="language-hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,209 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,570 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,624 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,643 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,644 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,661 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,662 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:10:32,665 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br>employee02.equals(employee01) = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>修改代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">// 1.开启两个SqlSession</span><br>SqlSession session01 = factory.openSession();<br>SqlSession session02 = factory.openSession();<br>    <br><span class="hljs-comment">// 2.获取两个EmployeeMapper</span><br>EmployeeMapper employeeMapper01 = session01.getMapper(EmployeeMapper.class);<br>EmployeeMapper employeeMapper02 = session02.getMapper(EmployeeMapper.class);<br>    <br><span class="hljs-comment">// 3.使用两个EmployeeMapper做两次查询，返回两个Employee对象</span><br>Employee employee01 = employeeMapper01.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// ※第一次查询完成后，把所在的SqlSession关闭，使一级缓存中的数据存入二级缓存</span><br>session01.close();<br>Employee employee02 = employeeMapper02.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// 4.比较两个Employee对象</span><br>System.out.println(<span class="hljs-string">&quot;employee02.equals(employee01) = &quot;</span> + employee02.equals(employee01));<br>    <br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">// 1.开启两个SqlSession</span><br>SqlSession session01 = factory.openSession();<br>SqlSession session02 = factory.openSession();<br>    <br><span class="hljs-comment">// 2.获取两个EmployeeMapper</span><br>EmployeeMapper employeeMapper01 = session01.getMapper(EmployeeMapper.class);<br>EmployeeMapper employeeMapper02 = session02.getMapper(EmployeeMapper.class);<br>    <br><span class="hljs-comment">// 3.使用两个EmployeeMapper做两次查询，返回两个Employee对象</span><br>Employee employee01 = employeeMapper01.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// ※第一次查询完成后，把所在的SqlSession关闭，使一级缓存中的数据存入二级缓存</span><br>session01.close();<br>Employee employee02 = employeeMapper02.selectEmployeeById(<span class="hljs-number">2</span>);<br>    <br><span class="hljs-comment">// 4.比较两个Employee对象</span><br>System.out.println(<span class="hljs-string">&quot;employee02.equals(employee01) = &quot;</span> + employee02.equals(employee01));<br>    <br><span class="hljs-comment">// 5.另外一个SqlSession用完正常关闭</span><br>session02.close();<br></code></pre></td></tr></table></figure><p> 打印结果： </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:06,804 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,135 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,202 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,224 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,308 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.5  (LoggingCache.java:62) <br>employee02.equals(employee01) = <span class="hljs-literal"><code class="language-hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:06,804 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,135 ==&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_id</span>=?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,202 ==&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,224 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 12-01 10:14:07,308 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.5  (LoggingCache.java:62) <br>employee02.equals(employee01) = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="3-二级缓存相关配置-了解"><a href="#3-二级缓存相关配置-了解" class="headerlink" title="3 二级缓存相关配置(了解)"></a>3 二级缓存相关配置(了解)</h4><p>在Mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li><p>eviction属性：缓存回收策略</p><p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</p><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p><p>默认的是 LRU。</p></li><li><p>flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p></li><li><p>size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p></li><li><p>readOnly属性：只读，true/false</p><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</p><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</p></li></ul><h3 id="第四节-整合EHCache"><a href="#第四节-整合EHCache" class="headerlink" title="第四节 整合EHCache"></a>第四节 整合EHCache</h3><h4 id="1-EHCache简介"><a href="#1-EHCache简介" class="headerlink" title="1. EHCache简介"></a>1. EHCache简介</h4><p>Ehcache 是一种开源的、基于标准的缓存，可提高性能、卸载数据库并简化可扩展性。它是最广泛使用的基于 Java 的缓存，因为它健壮、经过验证、功能齐全，并且与其他流行的库和框架集成。 Ehcache 从进程内缓存一直扩展到具有 TB 级缓存的混合进程内/进程外部署。  官网地址为:  <a href="https://www.ehcache.org/">https://www.ehcache.org/</a> </p><h4 id="2-Mybatis整合操作"><a href="#2-Mybatis整合操作" class="headerlink" title="2. Mybatis整合操作"></a>2. Mybatis整合操作</h4><h5 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure><h5 id="2-2-创建EHCache配置文件"><a href="#2-2-创建EHCache配置文件" class="headerlink" title="2.2 创建EHCache配置文件"></a>2.2 创建EHCache配置文件</h5><p>ehcache.xml</p><p><img src="/2021/12/03/mybatis04/tu_008.png"></p><p>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    maxElementsInMemory:设置 在内存中缓存 对象的个数</span><br><span class="hljs-comment">    maxElementsOnDisk：设置 在硬盘中缓存 对象的个数</span><br><span class="hljs-comment">    eternal：设置缓存是否 永远不过期</span><br><span class="hljs-comment">    overflowToDisk：当系统宕机的时候是否保存到磁盘上</span><br><span class="hljs-comment">    maxElementsInMemory的时候，是否转移到硬盘中</span><br><span class="hljs-comment">    timeToIdleSeconds：当2次访问 超过该值的时候，将缓存对象失效</span><br><span class="hljs-comment">    timeToLiveSeconds：一个缓存对象 最多存放的时间（生命周期）</span><br><span class="hljs-comment">    diskExpiryThreadIntervalSeconds：设置每隔多长时间，通过一个线程来清理硬盘中的缓存</span><br><span class="hljs-comment">    clearOnFlush: 内存数量最大时是否清除</span><br><span class="hljs-comment">    memoryStoreEvictionPolicy：当超过缓存对象的最大值时，处理的策略；LRU (最少使用)，FIFO (先进先出), LFU (最少访问次数)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    maxElementsInMemory:设置 在内存中缓存 对象的个数</span><br><span class="hljs-comment">    maxElementsOnDisk：设置 在硬盘中缓存 对象的个数</span><br><span class="hljs-comment">    eternal：设置缓存是否 永远不过期</span><br><span class="hljs-comment">    overflowToDisk：当系统宕机的时候是否保存到磁盘上</span><br><span class="hljs-comment">    maxElementsInMemory的时候，是否转移到硬盘中</span><br><span class="hljs-comment">    timeToIdleSeconds：当2次访问 超过该值的时候，将缓存对象失效</span><br><span class="hljs-comment">    timeToLiveSeconds：一个缓存对象 最多存放的时间（生命周期）</span><br><span class="hljs-comment">    diskExpiryThreadIntervalSeconds：设置每隔多长时间，通过一个线程来清理硬盘中的缓存</span><br><span class="hljs-comment">    clearOnFlush: 内存数量最大时是否清除</span><br><span class="hljs-comment">    memoryStoreEvictionPolicy：当超过缓存对象的最大值时，处理的策略；LRU (最少使用)，FIFO (先进先出), LFU (最少访问次数)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>></span><br></code></pre></td></tr></table></figure><p>引入第三方框架或工具时，配置文件的文件名可以自定义吗？</p><ul><li>可以自定义：文件名是由我告诉其他环境</li><li>不能自定义：文件名是框架内置的、约定好的，就不能自定义，以避免框架无法加载这个文件</li></ul><h5 id="2-3-指定缓存管理器的具体类型"><a href="#2-3-指定缓存管理器的具体类型" class="headerlink" title="2.3 指定缓存管理器的具体类型"></a>2.3 指定缓存管理器的具体类型</h5><p>还是到查询操作所的Mapper配置文件中，找到之前设置的cache标签： </p><p><img src="/2021/12/03/mybatis04/tu_009.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/></span><br></code></pre></td></tr></table></figure><h5 id="2-4-加入logback日志"><a href="#2-4-加入logback日志" class="headerlink" title="2.4 加入logback日志"></a>2.4 加入logback日志</h5><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。 </p><h6 id="2-4-1-各种Java日志框架简介"><a href="#2-4-1-各种Java日志框架简介" class="headerlink" title="2.4.1 各种Java日志框架简介"></a>2.4.1 各种Java日志框架简介</h6><p>门面：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）</td><td>陈旧</td></tr><tr><td>SLF4J（Simple Logging Facade for Java）★</td><td>适合</td></tr><tr><td>jboss-logging</td><td>特殊专业领域使用</td></tr></tbody></table><p>实现：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>log4j★</td><td>最初版</td></tr><tr><td>JUL（java.util.logging）</td><td>JDK自带</td></tr><tr><td>log4j2</td><td>Apache收购log4j后全面重构，内部实现和log4j完全不同</td></tr><tr><td>logback★</td><td>优雅、强大</td></tr></tbody></table><p>注：标记★的技术是同一作者。</p><h6 id="2-4-2-logback配置文件"><a href="#2-4-2-logback配置文件" class="headerlink" title="2.4.2 logback配置文件"></a>2.4.2 logback配置文件</h6><p><img src="/2021/12/03/mybatis04/tu_010.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>></span><br></code></pre></td></tr></table></figure><h6 id="2-4-3-junit测试"><a href="#2-4-3-junit测试" class="headerlink" title="2.4.3 junit测试"></a>2.4.3 junit测试</h6><p>正常按照二级缓存的方式测试即可。因为整合EHCache后，其实就是使用EHCache代替了Mybatis自带的二级缓存。 </p><h6 id="2-4-4-EHCache配置文件说明"><a href="#2-4-4-EHCache配置文件说明" class="headerlink" title="2.4.4 EHCache配置文件说明"></a>2.4.4 EHCache配置文件说明</h6><p>当借助CacheManager.add(“缓存名称”)创建Cache时，EhCache便会采用<defalutCache>指定的的管理策略。</defalutCache></p><p>defaultCache标签各属性说明：</p><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</td></tr></tbody></table><h3 id="第五节-缓存的原理"><a href="#第五节-缓存的原理" class="headerlink" title="第五节 缓存的原理"></a>第五节 缓存的原理</h3><h4 id="1-Cache接口"><a href="#1-Cache接口" class="headerlink" title="1. Cache接口"></a>1. Cache接口</h4><h5 id="1-1-Cache接口的重要地位"><a href="#1-1-Cache接口的重要地位" class="headerlink" title="1.1 Cache接口的重要地位"></a>1.1 Cache接口的重要地位</h5><p>org.apache.ibatis.cache.Cache接口：所有缓存都必须实现的顶级接口</p><p><img src="/2021/12/03/mybatis04/tu_011.png"></p><h5 id="1-2-Cache接口中的方法"><a href="#1-2-Cache接口中的方法" class="headerlink" title="1.2 Cache接口中的方法"></a>1.2 Cache接口中的方法</h5><p><img src="/2021/12/03/mybatis04/tu_012.png"></p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>putObject()</td><td>将对象存入缓存</td></tr><tr><td>getObject()</td><td>从缓存中取出对象</td></tr><tr><td>removeObject()</td><td>从缓存中删除对象</td></tr></tbody></table><h5 id="1-3-缓存的本质"><a href="#1-3-缓存的本质" class="headerlink" title="1.3 缓存的本质"></a>1.3 缓存的本质</h5><p>根据Cache接口中方法的声明我们能够看到，缓存的本质是一个<strong>Map</strong>。 </p><h4 id="2-PerpetualCache类"><a href="#2-PerpetualCache类" class="headerlink" title="2. PerpetualCache类"></a>2. PerpetualCache类</h4><p><img src="/2021/12/03/mybatis04/tu_013.png"></p><p>org.apache.ibatis.cache.impl.PerpetualCache是Mybatis的默认缓存，也是Cache接口的默认实现。Mybatis一级缓存和自带的二级缓存都是通过PerpetualCache来操作缓存数据的。但是这就奇怪了，同样是PerpetualCache这个类，怎么能区分出来两种不同级别的缓存呢？</p><p>其实很简单，调用者不同。</p><ul><li>一级缓存：由BaseExecutor调用PerpetualCache</li><li>二级缓存：由CachingExecutor调用PerpetualCache，而CachingExecutor可以看做是对BaseExecutor的装饰</li></ul><h4 id="3-一级缓存机制"><a href="#3-一级缓存机制" class="headerlink" title="3. 一级缓存机制"></a>3. 一级缓存机制</h4><p><img src="/2021/12/03/mybatis04/tu_014.png"></p><p> org.apache.ibatis.executor.BaseExecutor类中的关键方法： </p><h5 id="3-1-query-方法"><a href="#3-1-query-方法" class="headerlink" title="3.1 query()方法"></a>3.1 query()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing a query&quot;</span>).object(ms.getId());<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ExecutorException(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;<br>        clearLocalCache();<br>    &#125;<br>    List&lt;E&gt; list;<br>    <span class="hljs-keyword">try</span> &#123;<br>        queryStack++;<br>        <br>        <span class="hljs-comment">// 尝试从本地缓存中获取数据</span><br>        list = resultHandler == <span class="hljs-keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-keyword">null</span>;<br>        <br>        <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <br>            <span class="hljs-comment">// 如果本地缓存中没有查询到数据，则查询数据库</span><br>            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        queryStack--;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (org.apache.ibatis.executor.BaseExecutor.DeferredLoad deferredLoad : deferredLoads) &#123;<br>            deferredLoad.load();<br>        &#125;<br>        <span class="hljs-comment">// issue #601</span><br>        deferredLoads.clear();<br>        <span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>            <span class="hljs-comment">// issue #482</span><br>            clearLocalCache();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing a query&quot;</span>).object(ms.getId());<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ExecutorException(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;<br>        clearLocalCache();<br>    &#125;<br>    List&lt;E&gt; list;<br>    <span class="hljs-keyword">try</span> &#123;<br>        queryStack++;<br>        <br>        <span class="hljs-comment">// 尝试从本地缓存中获取数据</span><br>        list = resultHandler == <span class="hljs-keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-keyword">null</span>;<br>        <br>        <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <br>            <span class="hljs-comment">// 如果本地缓存中没有查询到数据，则查询数据库</span><br>            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        queryStack--;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (org.apache.ibatis.executor.BaseExecutor.DeferredLoad deferredLoad : deferredLoads) &#123;<br>            deferredLoad.load();<br>        &#125;<br>        <span class="hljs-comment">// issue #601</span><br>        deferredLoads.clear();<br>        <span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>            <span class="hljs-comment">// issue #482</span><br>            clearLocalCache();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-queryFromDatabase-方法"><a href="#3-2-queryFromDatabase-方法" class="headerlink" title="3.2 queryFromDatabase()方法"></a>3.2 queryFromDatabase()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">private</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">queryFromDatabase</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    List&lt;E&gt; list;<br>    localCache.putObject(key, EXECUTION_PLACEHOLDER);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <br>        <span class="hljs-comment">// 从数据库中查询数据</span><br>        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        localCache.removeObject(key);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将数据存入本地缓存</span><br>    localCache.putObject(key, list);<br>    <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>        localOutputParameterCache.putObject(key, parameter);<br>    &#125;<br>    <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">private</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">queryFromDatabase</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    List&lt;E&gt; list;<br>    localCache.putObject(key, EXECUTION_PLACEHOLDER);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <br>        <span class="hljs-comment">// 从数据库中查询数据</span><br>        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        localCache.removeObject(key);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将数据存入本地缓存</span><br>    localCache.putObject(key, list);<br>    <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>        localOutputParameterCache.putObject(key, parameter);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-二级缓存机制"><a href="#4-二级缓存机制" class="headerlink" title="4. 二级缓存机制"></a>4. 二级缓存机制</h4><p><img src="/2021/12/03/mybatis04/tu_015.png"></p><p>下面我们来看看CachingExecutor类中的query()方法在不同情况下使用的具体缓存对象： </p><h5 id="4-1-未开启二级缓存"><a href="#4-1-未开启二级缓存" class="headerlink" title="4.1 未开启二级缓存"></a>4.1 未开启二级缓存</h5><p><img src="/2021/12/03/mybatis04/tu_016.png"></p><h5 id="4-1-使用Mybatis自带的二级缓存"><a href="#4-1-使用Mybatis自带的二级缓存" class="headerlink" title="4.1 使用Mybatis自带的二级缓存"></a>4.1 使用Mybatis自带的二级缓存</h5><p><img src="/2021/12/03/mybatis04/tu_017.png"></p><h5 id="4-1-使用EHCache"><a href="#4-1-使用EHCache" class="headerlink" title="4.1 使用EHCache"></a>4.1 使用EHCache</h5><p><img src="/2021/12/03/mybatis04/tu_018.png"></p><h2 id="第二章-逆向工程"><a href="#第二章-逆向工程" class="headerlink" title="第二章 逆向工程"></a>第二章 逆向工程</h2><h3 id="第一节-概念"><a href="#第一节-概念" class="headerlink" title="第一节 概念"></a>第一节 概念</h3><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper配置文件</li></ul></li></ul><h3 id="第二节-基本原理"><a href="#第二节-基本原理" class="headerlink" title="第二节 基本原理"></a>第二节 基本原理</h3><p><img src="/2021/12/03/mybatis04/tu_019.png"></p><h3 id="第三节-逆向工程的具体操作"><a href="#第三节-逆向工程的具体操作" class="headerlink" title="第三节 逆向工程的具体操作"></a>第三节 逆向工程的具体操作</h3><h4 id="1-配置POM"><a href="#1-配置POM" class="headerlink" title="1. 配置POM"></a>1. 配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--log4j--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--log4j--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>></span><br></code></pre></td></tr></table></figure><h4 id="2-MBG配置文件"><a href="#2-MBG配置文件" class="headerlink" title="2. MBG配置文件"></a>2. MBG配置文件</h4><p>文件名必须是:generatorConfig.xml</p><p><img src="/2021/12/03/mybatis04/tu_020.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">                    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">                    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            javaBean的生成策略</span><br><span class="hljs-comment">            targetPackage 表示生成的JavaBean存放到哪个包中</span><br><span class="hljs-comment">            targetProject 表示生成的JavaBean存放到哪个主目录中</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            SQL映射文件的生成策略</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Employee&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_customer&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Customer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_order&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Order&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">                    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">                    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            javaBean的生成策略</span><br><span class="hljs-comment">            targetPackage 表示生成的JavaBean存放到哪个包中</span><br><span class="hljs-comment">            targetProject 表示生成的JavaBean存放到哪个主目录中</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            SQL映射文件的生成策略</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mapper&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Employee&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_customer&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Customer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_order&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Order&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>></span><br></code></pre></td></tr></table></figure><h4 id="3-执行MBG插件的generate目标"><a href="#3-执行MBG插件的generate目标" class="headerlink" title="3. 执行MBG插件的generate目标"></a>3. 执行MBG插件的generate目标</h4><p><img src="/2021/12/03/mybatis04/tu_021.png"></p><h4 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h4><p><img src="/2021/12/03/mybatis04/tu_022.png"></p><h4 id="5-测试代码"><a href="#5-测试代码" class="headerlink" title="5. 测试代码"></a>5. 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.mapper.EmployeeMapper;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.EmployeeExample;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-08-28  14:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br>    <span class="hljs-keyword">private</span> EmployeeMapper employeeMapper;<br>    <span class="hljs-keyword">private</span> InputStream is;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//目标:创建出EmployeeManager接口的代理对象</span><br>        <span class="hljs-comment">//1. 加载核心配置文件，转成字节输入流</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//2. 创建SqlSessionFactoryBuilder对象</span><br>        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        <span class="hljs-comment">//3. 构建出SqlSessionFactory</span><br>        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//4. 使用SqlSessionFactory对象创建出sqlSession对象</span><br>        sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//5. 使用sqlSession对象创建UserMapper接口的代理对象</span><br>        employeeMapper = sqlSession.getMapper(EmployeeMapper.class);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//关闭资源</span><br>        is.close();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsertEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.insert(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">3000d</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteEmployeeByPrimaryKey</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.deleteByPrimaryKey(<span class="hljs-number">15014</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByExample</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据较为复杂的条件进行删除，比如要删除empId在2000到8000之间的所有员工</span><br>        <span class="hljs-comment">//1. 创建一个EmployeeExample对象</span><br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        <span class="hljs-comment">//2. 使用EmployeeExample对象获取criteria对象</span><br>        EmployeeExample.Criteria criteria = employeeExample.createCriteria();<br>        <span class="hljs-comment">//3. 通过criteria来拼接条件</span><br>        criteria.andEmpIdBetween(<span class="hljs-number">3000</span>,<span class="hljs-number">8000</span>);<br>        employeeMapper.deleteByExample(employeeExample);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.updateByPrimaryKeySelective(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">4</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">2000d</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByPrimaryKey</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据主键查询</span><br>        Employee employee = employeeMapper.selectByPrimaryKey(<span class="hljs-number">4</span>);<br>        System.out.println(employee);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryAll</span><span class="hljs-params">()</span></span>&#123;<br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        <span class="hljs-comment">//查询所有数据</span><br>        List&lt;Employee&gt; employeeList = employeeMapper.selectByExample(employeeExample);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByExample</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//复杂条件:查询(名字中包含s，并且大于3000)  或者 (emp_id在8001-8234之间,并且名字中包含3）的所有元素</span><br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        EmployeeExample.Criteria criteria1 = employeeExample.createCriteria();<br>        criteria1.andEmpNameLike(<span class="hljs-string">&quot;%s%&quot;</span>)<br>                 .andEmpSalaryGreaterThan(<span class="hljs-number">3000d</span>);<br><br>        EmployeeExample.Criteria criteria2 = employeeExample.or();<br>        criteria2.andEmpIdBetween(<span class="hljs-number">8001</span>,<span class="hljs-number">8234</span>)<br>                 .andEmpNameLike(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> com.atguigu.mapper.EmployeeMapper;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.EmployeeExample;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包名:com.atguigu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Leevi</span><br><span class="hljs-comment"> * 日期2021-08-28  14:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br>    <span class="hljs-keyword">private</span> EmployeeMapper employeeMapper;<br>    <span class="hljs-keyword">private</span> InputStream is;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//目标:创建出EmployeeManager接口的代理对象</span><br>        <span class="hljs-comment">//1. 加载核心配置文件，转成字节输入流</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//2. 创建SqlSessionFactoryBuilder对象</span><br>        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        <span class="hljs-comment">//3. 构建出SqlSessionFactory</span><br>        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//4. 使用SqlSessionFactory对象创建出sqlSession对象</span><br>        sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//5. 使用sqlSession对象创建UserMapper接口的代理对象</span><br>        employeeMapper = sqlSession.getMapper(EmployeeMapper.class);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//关闭资源</span><br>        is.close();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsertEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.insert(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">3000d</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteEmployeeByPrimaryKey</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.deleteByPrimaryKey(<span class="hljs-number">15014</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByExample</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据较为复杂的条件进行删除，比如要删除empId在2000到8000之间的所有员工</span><br>        <span class="hljs-comment">//1. 创建一个EmployeeExample对象</span><br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        <span class="hljs-comment">//2. 使用EmployeeExample对象获取criteria对象</span><br>        EmployeeExample.Criteria criteria = employeeExample.createCriteria();<br>        <span class="hljs-comment">//3. 通过criteria来拼接条件</span><br>        criteria.andEmpIdBetween(<span class="hljs-number">3000</span>,<span class="hljs-number">8000</span>);<br>        employeeMapper.deleteByExample(employeeExample);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateEmployee</span><span class="hljs-params">()</span></span>&#123;<br>        employeeMapper.updateByPrimaryKeySelective(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">4</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">2000d</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByPrimaryKey</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据主键查询</span><br>        Employee employee = employeeMapper.selectByPrimaryKey(<span class="hljs-number">4</span>);<br>        System.out.println(employee);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryAll</span><span class="hljs-params">()</span></span>&#123;<br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        <span class="hljs-comment">//查询所有数据</span><br>        List&lt;Employee&gt; employeeList = employeeMapper.selectByExample(employeeExample);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByExample</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//复杂条件:查询(名字中包含s，并且大于3000)  或者 (emp_id在8001-8234之间,并且名字中包含3）的所有元素</span><br>        EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>        EmployeeExample.Criteria criteria1 = employeeExample.createCriteria();<br>        criteria1.andEmpNameLike(<span class="hljs-string">&quot;%s%&quot;</span>)<br>                 .andEmpSalaryGreaterThan(<span class="hljs-number">3000d</span>);<br><br>        EmployeeExample.Criteria criteria2 = employeeExample.or();<br>        criteria2.andEmpIdBetween(<span class="hljs-number">8001</span>,<span class="hljs-number">8234</span>)<br>                 .andEmpNameLike(<span class="hljs-string">"%3%"</span>);<br>        employeeMapper.selectByExample(employeeExample);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四节-QBC查询"><a href="#第四节-QBC查询" class="headerlink" title="第四节  QBC查询"></a>第四节  QBC查询</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>QBC：Query By Criteria ， 最大的特点就是将SQL语句中的WHERE子句进行了组件化的封装，让我们可以通过调用Criteria对象的方法自由的拼装查询条件。 </p><h4 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByExample</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//复杂条件:查询(名字中包含s，并且大于3000)  或者 (emp_id在8001-8234之间,并且名字中包含3）的所有元素</span><br>    EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>    EmployeeExample.Criteria criteria1 = employeeExample.createCriteria();<br>    criteria1.andEmpNameLike(<span class="hljs-string">&quot;%s%&quot;</span>)<br>        .andEmpSalaryGreaterThan(<span class="hljs-number">3000d</span>);<br><br>    EmployeeExample.Criteria criteria2 = employeeExample.or();<br>    criteria2.andEmpIdBetween(<span class="hljs-number">8001</span>,<span class="hljs-number">8234</span>)<br>        .andEmpNameLike(<span class="hljs-string">&quot;%3%&quot;</span>);<br>    employeeMapper.selectByExample(employeeExample);<br>&#125;<br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryByExample</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//复杂条件:查询(名字中包含s，并且大于3000)  或者 (emp_id在8001-8234之间,并且名字中包含3）的所有元素</span><br>    EmployeeExample employeeExample = <span class="hljs-keyword">new</span> EmployeeExample();<br>    EmployeeExample.Criteria criteria1 = employeeExample.createCriteria();<br>    criteria1.andEmpNameLike(<span class="hljs-string">&quot;%s%&quot;</span>)<br>        .andEmpSalaryGreaterThan(<span class="hljs-number">3000d</span>);<br><br>    EmployeeExample.Criteria criteria2 = employeeExample.or();<br>    criteria2.andEmpIdBetween(<span class="hljs-number">8001</span>,<span class="hljs-number">8234</span>)<br>        .andEmpNameLike(<span class="hljs-string">&quot;%3%&quot;</span>);<br>    employeeMapper.selectByExample(employeeExample);<br>&#125;<br><span class="hljs-comment">//实际执行的SQL语句:select emp_id, emp_name, emp_salary from t_emp WHERE ( emp_name like ? and emp_salary > ? ) or( emp_id between ? and ? and emp_name like ? )</span><br></code></pre></td></tr></table></figure><h2 id="第三章-Mybatis的其它补充内容-了解"><a href="#第三章-Mybatis的其它补充内容-了解" class="headerlink" title="第三章 Mybatis的其它补充内容(了解)"></a>第三章 Mybatis的其它补充内容(了解)</h2><h3 id="第一节-插件机制"><a href="#第一节-插件机制" class="headerlink" title="第一节 插件机制"></a>第一节 插件机制</h3><h4 id="1-Mybatis四大对象"><a href="#1-Mybatis四大对象" class="headerlink" title="1. Mybatis四大对象"></a>1. Mybatis四大对象</h4><h5 id="1-1-Executor"><a href="#1-1-Executor" class="headerlink" title="1.1 Executor"></a>1.1 Executor</h5><p><img src="/2021/12/03/mybatis04/tu_023.png"></p><h5 id="1-2-ParameterHandler"><a href="#1-2-ParameterHandler" class="headerlink" title="1.2 ParameterHandler"></a>1.2 ParameterHandler</h5><p><img src="/2021/12/03/mybatis04/tu_024.png"></p><h5 id="2-3-ResultSetHandler"><a href="#2-3-ResultSetHandler" class="headerlink" title="2.3 ResultSetHandler"></a>2.3 ResultSetHandler</h5><p><img src="/2021/12/03/mybatis04/tu_025.png"></p><h5 id="2-4-StatementHandler"><a href="#2-4-StatementHandler" class="headerlink" title="2.4 StatementHandler"></a>2.4 StatementHandler</h5><p><img src="/2021/12/03/mybatis04/tu_026.png"></p><h4 id="2-Mybatis插件机制的作用"><a href="#2-Mybatis插件机制的作用" class="headerlink" title="2. Mybatis插件机制的作用"></a>2. Mybatis插件机制的作用</h4><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过<strong>动态代理</strong>机制，可以介入四大对象的任何一个方法的执行。著名的Mybatis插件包括 PageHelper（分页插件）、通用 Mapper（SQL生成插件）等。</p><p>如果想编写自己的Mybatis插件可以通过实现org.apache.ibatis.plugin.Interceptor接口来完成，表示对Mybatis常规操作进行拦截，加入自定义逻辑。</p><p><img src="/2021/12/03/mybatis04/tu_027.png"></p><p> 但是由于插件涉及到Mybatis底层工作机制，在没有足够把握时不要轻易尝试。 </p><h3 id="第二节-Mybatis底层的JDBC封装"><a href="#第二节-Mybatis底层的JDBC封装" class="headerlink" title="第二节 Mybatis底层的JDBC封装"></a>第二节 Mybatis底层的JDBC封装</h3><p> org.apache.ibatis.executor.statement.PreparedStatementHandler类： </p><p><img src="/2021/12/03/mybatis04/tu_028.png"></p><p>查找上面目标时，Debug查看源码的切入点是：</p><p>org.apache.ibatis.session.defaults.DefaultSqlSession类的update()方法</p><p><img src="/2021/12/03/mybatis04/tu_029.png"></p><p>然后在分析<code>this.executor.update()方法</code></p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式</title>
      <link href="/2021/12/03/javaDesignMode/"/>
      <url>/2021/12/03/javaDesignMode/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h1><p>设计原则核心思想:</p><ol><li><p>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码放在一起。</p></li><li><p> 针对接口编程，而不是针对实现编程。</p></li><li><p>为了交互对象之间的松耦合设计努力  </p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">设计模式常见的七大原则：<br>1)单一职责原则<br>2)接口隔离原则<br>3)依赖倒置原则<br>4)里式替换原则<br>5)开闭原则<br>6)迪米特原则<br>7)合成复用原则<br></code></pre></td></tr></table></figure><ol><li><p>代码重用性</p></li><li><p>可读性</p></li><li><p>可扩展性</p></li><li><p>可靠性</p></li><li><p>高内聚低耦合</p></li></ol><h2 id="单一隔离"><a href="#单一隔离" class="headerlink" title="单一隔离"></a>单一隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">原则上 一个类应该尽量做一件事 一个类继承一个接口 <br>如果实现类两个职责 当职责一进行修改的时候 很可能回对职责二造成影响<br>但是一个类继承一个接口会导致开销过大<br>在接口方法比较少的情况下可以 通过向下兼容 实现方法的单一职责<br></code></pre></td></tr></table></figure><h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">如果一个接口方法过多，实现该接口就会需要去实现很多不需要实现的方法。<br>这个时候我们就应该把接口进行拆分，去实现需要实现的接口即可。<br></code></pre></td></tr></table></figure><h2 id="依赖倒转-倒置"><a href="#依赖倒转-倒置" class="headerlink" title="依赖倒转(倒置)"></a>依赖倒转(倒置)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs actionscript">接口和抽象类的价值在于 设计<br>高层模块不应该依赖于底层模块<br>抽象不应该依赖细节，细节应该依赖抽象<br>面向接口编程<br>传递的三种方式<br><span class="hljs-number">1.</span>构造器传递<br><span class="hljs-number">2.</span><span class="hljs-keyword">set</span>接口传递<br><span class="hljs-number"><code class="language-hljs actionscript">接口和抽象类的价值在于 设计<br>高层模块不应该依赖于底层模块<br>抽象不应该依赖细节，细节应该依赖抽象<br>面向接口编程<br>传递的三种方式<br><span class="hljs-number">1.</span>构造器传递<br><span class="hljs-number">2.</span><span class="hljs-keyword">set</span>接口传递<br><span class="hljs-number">3.</span>接口传递<br>使用接口或者抽象类的目的是制定好规范。而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成<br>多了一个缓冲利于程序的扩展和优化<br><br></code></pre></td></tr></table></figure><h2 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs csharp">问题：在编程中如何正确的实现继承   尽量满足里式替换原则 <br>子类尽量不要重写父类的方法<br>做到透明使用 <br>如果子类想使用父类的方法 ，但是有可能会不小心重写了父类的方法 倒是一系列应用 带来了程序的入侵性<br>所以可以 子类和父类都继承一个新的<span class="hljs-keyword">base</span>类，<span class="hljs-keyword"><code class="language-hljs csharp">问题：在编程中如何正确的实现继承   尽量满足里式替换原则 <br>子类尽量不要重写父类的方法<br>做到透明使用 <br>如果子类想使用父类的方法 ，但是有可能会不小心重写了父类的方法 倒是一系列应用 带来了程序的入侵性<br>所以可以 子类和父类都继承一个新的<span class="hljs-keyword">base</span>类，<span class="hljs-keyword">base</span>类实现了更为基础的代码和方法<br>这样子类可以放心的重写方法<br>达到的效果是 所有应用基类的类应该尽量做到透明使用<br><br></code></pre></td></tr></table></figure><p>​    </p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs fortran">开闭原则是编程中 最基础最重要的原则<br><br>一个软件实体类 模块和函数应该对外扩展开放(对提供方) 对修改关闭(对使用方)  用抽象构建，用实现扩展细节<br>当我们增加一个功能时候 应该增加代码而不是修改代码 尽量不去修改原有的代码 <br>当软件需要变化时 尽量通过扩展软件实体的行为来实现变化 而不是通过修改已有的代码来实现变化<br><br>编程中遵循其他原则以及使用设计模式的目的就是遵循开闭原则<br><br>改进思路分析 把创建的<span class="hljs-built_in">Shape</span>类做成抽象类或者接口，并提供一个抽象的draw方法或者接口，让子类去实现即可。<br>这样有新的图形种类时候 只需要让新的图形去继承<span class="hljs-built_in"><code class="language-hljs fortran">开闭原则是编程中 最基础最重要的原则<br><br>一个软件实体类 模块和函数应该对外扩展开放(对提供方) 对修改关闭(对使用方)  用抽象构建，用实现扩展细节<br>当我们增加一个功能时候 应该增加代码而不是修改代码 尽量不去修改原有的代码 <br>当软件需要变化时 尽量通过扩展软件实体的行为来实现变化 而不是通过修改已有的代码来实现变化<br><br>编程中遵循其他原则以及使用设计模式的目的就是遵循开闭原则<br><br>改进思路分析 把创建的<span class="hljs-built_in">Shape</span>类做成抽象类或者接口，并提供一个抽象的draw方法或者接口，让子类去实现即可。<br>这样有新的图形种类时候 只需要让新的图形去继承<span class="hljs-built_in">Shape</span> 并且实现draw方法即可，这样使用方的代码就不需要修改<br><br>满足了开闭原则<br></code></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">一个对象应该对其他的对象保持最少的了解<br>类与类之间的关系越密切，耦合度越大<br><br>一个类里面 除了传递参数依赖类 应该尽量避免出现其他的陌生类，降低耦合度 这样代码修改起来容易<br><br></code></pre></td></tr></table></figure><h2 id="合成服用原则"><a href="#合成服用原则" class="headerlink" title="合成服用原则"></a>合成服用原则</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs dns">原则是尽量使用合成/聚合 而不是使用继承<br><br>B要想使用<span class="hljs-keyword">A</span>的方法，可以继承于<span class="hljs-keyword">A</span> 但是这样会导致关系太强 耦合度太高<br>组合： 让B 里面注入一个<span class="hljs-keyword">A</span> <br>聚合:  让B里面 set 一个<span class="hljs-keyword">A</span> 或者构造器<br>依赖： 在B里面把<span class="hljs-keyword">A</span>传进来 称之为B依赖<span class="hljs-keyword"><code class="language-hljs dns">原则是尽量使用合成/聚合 而不是使用继承<br><br>B要想使用<span class="hljs-keyword">A</span>的方法，可以继承于<span class="hljs-keyword">A</span> 但是这样会导致关系太强 耦合度太高<br>组合： 让B 里面注入一个<span class="hljs-keyword">A</span> <br>聚合:  让B里面 set 一个<span class="hljs-keyword">A</span> 或者构造器<br>依赖： 在B里面把<span class="hljs-keyword">A</span>传进来 称之为B依赖<span class="hljs-keyword">A</span> 方法<br></code></pre></td></tr></table></figure><h1 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs"><code class="language-hljs">设计模式分为三种类型，共23种<br>1、创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式<br>2、适配器模式：桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式<br>3、行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、<br>备忘录模式、解释器模式、状态模式、策略模式、责任链模式<br></code></pre></td></tr></table></figure><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="饿汉式-静态常量"><a href="#饿汉式-静态常量" class="headerlink" title="饿汉式(静态常量)"></a>饿汉式(静态常量)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>      <br>    &#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法较为简单，在类转载的时候就完成了实例化，避免了线程同步的问题。</span><br><span class="hljs-comment">缺点是在类装载的时候就完成实例化，没有达到懒加载的效果(Lazy Loading)。如果从始至终从未使用过这个实例，则会造成内存浪费，</span><br><span class="hljs-comment">这种基于类加载机制避免了多线程同步的问题，不过instance在类装载的时候就完成实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式导致类装载，这个时候初始化instance就没有达到懒加载的效果</span><br><span class="hljs-comment">这种单例模式可以用，有可能造成内存浪费</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>      <br>    &#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法较为简单，在类转载的时候就完成了实例化，避免了线程同步的问题。</span><br><span class="hljs-comment">缺点是在类装载的时候就完成实例化，没有达到懒加载的效果(Lazy Loading)。如果从始至终从未使用过这个实例，则会造成内存浪费，</span><br><span class="hljs-comment">这种基于类加载机制避免了多线程同步的问题，不过instance在类装载的时候就完成实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式导致类装载，这个时候初始化instance就没有达到懒加载的效果</span><br><span class="hljs-comment">这种单例模式可以用，有可能造成内存浪费</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance ;<br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance ;<br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br><span class="hljs-comment">//提供一个共有的静态方法 返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//和静态常量类似，在静态代码块完成实例化。 优缺点也和饿汉式静态常量一样</span><br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态方法，当使用这个方法的时候才实例化</span><br>    <span class="hljs-comment">//懒汉式(线程不安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.起到了懒加载的效果，但是只能在多线程下才能使用</span><br><span class="hljs-comment">2.如果在多线程下 会导致线程不安全 一个线程进入if语句还没执行完 另一个线程也进来了 就会产生多个实例</span><br><span class="hljs-comment">3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态方法，当使用这个方法的时候才实例化</span><br>    <span class="hljs-comment">//懒汉式(线程不安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.起到了懒加载的效果，但是只能在多线程下才能使用</span><br><span class="hljs-comment">2.如果在多线程下 会导致线程不安全 一个线程进入if语句还没执行完 另一个线程也进来了 就会产生多个实例</span><br><span class="hljs-comment">3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a>懒汉式(线程安全)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个静态方法，加入同步处理的代码，解决了线程安全问题</span><br>    <span class="hljs-comment">//懒汉式(线程安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//synchronized(Singleton.class)&#123; </span><br>            <span class="hljs-comment">//锁放在这里 并不能实现线程安全 因为线程进了if语句 迟早会执行 </span><br>                   instance = <span class="hljs-keyword">new</span> Singleton();<br>            <span class="hljs-comment">//&#125;    </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.解决了线程不安全问题</span><br><span class="hljs-comment">2.效率太低了，每个线程想获得类的实例的时候 执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化就够了，后面想要获得该实例应该是直接return，方法进行同步效率太低</span><br><span class="hljs-comment">3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个静态方法，加入同步处理的代码，解决了线程安全问题</span><br>    <span class="hljs-comment">//懒汉式(线程安全)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//synchronized(Singleton.class)&#123; </span><br>            <span class="hljs-comment">//锁放在这里 并不能实现线程安全 因为线程进了if语句 迟早会执行 </span><br>                   instance = <span class="hljs-keyword">new</span> Singleton();<br>            <span class="hljs-comment">//&#125;    </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.解决了线程不安全问题</span><br><span class="hljs-comment">2.效率太低了，每个线程想获得类的实例的时候 执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化就够了，后面想要获得该实例应该是直接return，方法进行同步效率太低</span><br><span class="hljs-comment">3.在实际开发中 不要使用这种方式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="双重检查-推荐"><a href="#双重检查-推荐" class="headerlink" title="双重检查(推荐)"></a>双重检查(推荐)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//双重检查</span><br>        <span class="hljs-comment">//提供一个静态的共有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span><br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.双重检查 判断了两次singleton == null 就可以保证线程安全</span><br><span class="hljs-comment">2.实例化代码只用执行一次 后面再次访问 的时候 如果不为空 就可以直接返回实例化对象 避免了方法反复同步</span><br><span class="hljs-comment">3.线程安全：实现了懒加载，效率较高</span><br><span class="hljs-comment">在实际开发中 推荐使用这种单例设计模式</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//双重检查</span><br>        <span class="hljs-comment">//提供一个静态的共有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span><br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>)&#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结：</span><br><span class="hljs-comment">1.双重检查 判断了两次singleton == null 就可以保证线程安全</span><br><span class="hljs-comment">2.实例化代码只用执行一次 后面再次访问 的时候 如果不为空 就可以直接返回实例化对象 避免了方法反复同步</span><br><span class="hljs-comment">3.线程安全：实现了懒加载，效率较高</span><br><span class="hljs-comment">在实际开发中 推荐使用这种单例设计模式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-comment">//　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，</span><br>    <span class="hljs-comment">//当有其他线程需要读取时，它会去内存中读取新值。 保证了 可见性。</span><br>    <span class="hljs-comment">// 满足并发编程安全的三大特性 原子性 可见性 有序性</span><br>    <span class="hljs-comment">//构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//写一个静态内部类，该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;    <br>    <br>    <span class="hljs-comment">//提供一个静态方法，直接返回SingletonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结:</span><br><span class="hljs-comment">1.这种方式采用的类装载机制来保证初始化实例只有一个线程</span><br><span class="hljs-comment">2.静态内部类方式在Singleton类被加载的时候并不会立即实例化，而是在需要实例化的时候，调用getInstacne方法，才会装在SingleInstance类，从而完成Singeleton的实例化</span><br><span class="hljs-comment">3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化的时候，别的线程是无法进入的。</span><br><span class="hljs-comment">4.避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</span><br><span class="hljs-comment">在工作中推荐使用</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-comment">//　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，</span><br>    <span class="hljs-comment">//当有其他线程需要读取时，它会去内存中读取新值。 保证了 可见性。</span><br>    <span class="hljs-comment">// 满足并发编程安全的三大特性 原子性 可见性 有序性</span><br>    <span class="hljs-comment">//构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//写一个静态内部类，该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;    <br>    <br>    <span class="hljs-comment">//提供一个静态方法，直接返回SingletonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结:</span><br><span class="hljs-comment">1.这种方式采用的类装载机制来保证初始化实例只有一个线程</span><br><span class="hljs-comment">2.静态内部类方式在Singleton类被加载的时候并不会立即实例化，而是在需要实例化的时候，调用getInstacne方法，才会装在SingleInstance类，从而完成Singeleton的实例化</span><br><span class="hljs-comment">3.类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化的时候，别的线程是无法进入的。</span><br><span class="hljs-comment">4.避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高。</span><br><span class="hljs-comment">在工作中推荐使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Singleton</span></span>&#123;<br>   INSTANCE;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOK</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;ok~~~&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结</span><br><span class="hljs-comment">1.这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</span><br><span class="hljs-comment">2.这种方式是Effective Jaca坐着Josh Bloch提倡的方式</span><br><span class="hljs-comment">推荐使用</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Singleton</span></span>&#123;<br>   INSTANCE;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOK</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;ok~~~&quot;</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">小结</span><br><span class="hljs-comment">1.这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</span><br><span class="hljs-comment">2.这种方式是Effective Jaca坐着Josh Bloch提倡的方式</span><br><span class="hljs-comment">推荐使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>单例模式有八种方式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs gcode">饿汉式<span class="hljs-comment">(静态常量实例化)</span><br>饿汉式<span class="hljs-comment">(静态代码块实例化)</span><br>懒汉式<span class="hljs-comment">(线程不安全)</span><br>懒汉式<span class="hljs-comment">(线程安全同步方法)</span><br>懒汉式<span class="hljs-comment"><code class="language-hljs gcode">饿汉式<span class="hljs-comment">(静态常量实例化)</span><br>饿汉式<span class="hljs-comment">(静态代码块实例化)</span><br>懒汉式<span class="hljs-comment">(线程不安全)</span><br>懒汉式<span class="hljs-comment">(线程安全同步方法)</span><br>懒汉式<span class="hljs-comment">(同步代码块 ，写法错误)</span> 并不能实现线程安全<br>双重检查<br>静态内部类<br>枚举<br></code></pre></td></tr></table></figure><p>单例模式注意事项和细节说明：</p><p>1)单例模式保证了系统内存中 该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可提高系统的性能<br>2）当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是直接使用new<br>3）单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或者耗费资源过多（即重量级对象），但又经常用到的对象，工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">如果确定实例一定会使用 饿汉式是可以使用的 只是有可能会造成内存浪费 <br>比如java的Runtime中就用了饿汉式 <br>推荐使用： 双重检查、静态内部类、枚举<br></code></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>需求：一个披萨项目，要便于披萨种类的扩展，要便于维护</p><ol><li>披萨的种类有很多(比如<code>GreekPizz</code>、<code>Chjeesepizz</code>等)</li><li>披萨的制作有prepare，bake，cut，box</li><li>完成披萨店订购功能。</li></ol><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ol><li>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象 cu答族，而无需指明具体的类</li><li>抽象工厂模式可以将简单工厂模式和工厂方法进行整合</li><li>从设计层面看，抽象工厂模式就是对简单工厂模式的改进或者说进一步的抽象</li><li>将工厂抽象成两橙，<code>AbsFactory</code>(抽象工厂)和具体实现的工厂子类，程序员可以根据创建对象类型使用对应的工厂子类。这样将单个简单地工厂变成了工厂cu答族，更利于代码的维护</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">定义一个抽象的工厂，然后定义实体工厂实现工厂方法。<br><br></code></pre></td></tr></table></figure><blockquote><p>Calendar中使用了工厂模式</p></blockquote><p>工厂模式小结</p><ol><li>工厂模式的意义：将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性。</li><li>三种工厂模式（简单工厂模式，工厂方法模式，抽象工厂模式）</li><li>设计模式的依赖抽象原则<ul><li>创建对象实例中，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，并返回。有的书上说不要直接持有具体类的应用。</li><li>不要让类继承具体类，而是继承抽象类或者是实现interface（接口）</li><li>不要覆盖基类中已经实现的方法</li></ul></li></ol><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>现有一只羊，姓名为tom，年龄为1：颜色为白色，请编写程序创建和tom羊属性完全相同的10只羊</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//传统方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>     Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白色&quot;</span>);<br>     <span class="hljs-comment">//克隆十次...</span><br>     <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">//传统方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>     Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白色&quot;</span>);<br>     <span class="hljs-comment">//克隆十次...</span><br>     <span class="hljs-keyword">new</span> Sheep(sheep.getName(),sheep.getAge(),sheep.getColor());<br> &#125;<br></code></pre></td></tr></table></figure><p>传统方式的优缺点</p><ol><li>有点是比较好理解，简单易操作</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂，效率较低</li><li>总是需要重新初始化对象，而不是动态的获得对象运行时的状态，不够灵活</li></ol><p>思路：<code>java</code>中Object类是所有类的父类，Object提供了一个clone方法，可以将一个<code>java</code>对象复制一份，但是需要实现clone的<code>java</code>类需要实现一个接口<code>Clonealbe</code>，该接口表示该类能够复制且具有复制的能力=&gt;原型模式</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>原型模式(Prototype模式)是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</li><li>原型模式是一种创建型设计模式，允许一个对象在创建另外一个可定制的对象，无需知道如何创建的细节</li><li>工作的原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝他们来实施创建，即对象.clone() </li><li>形象理解：猴子拔出猴毛变成其他猴子</li></ol><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>     <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br><span class="hljs-comment">//克隆该实例 使用默认的clone方法来完成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">null</span>;<br>        Sheep clone = (Sheep) <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;包塞&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//克隆十次</span><br>            Sheep clone1 = (Sheep) sheep.clone();<br>            Sheep clone2 = (Sheep) sheep.clone();<br>            <span class="hljs-comment">//....</span><br>        &#125; <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>     <span class="hljs-comment">//生成构造和getset方法以及toString等等...</span><br><span class="hljs-comment">//克隆该实例 使用默认的clone方法来完成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">null</span>;<br>        Sheep clone = (Sheep) <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;包塞&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//克隆十次</span><br>            Sheep clone1 = (Sheep) sheep.clone();<br>            Sheep clone2 = (Sheep) sheep.clone();<br>            <span class="hljs-comment">//....</span><br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>原型模式在Spring框架中源码分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testImport</span><span class="hljs-params">()</span></span>&#123;<br> Object bean1 = applicationContext.getBean(xxx);     <br>    Object bean2 = applicationContext.getBean(xxx);  <br>    <span class="hljs-comment">//如果是scope = prototype 多例 就用到了原型模式</span><br>    <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testImport</span><span class="hljs-params">()</span></span>&#123;<br> Object bean1 = applicationContext.getBean(xxx);     <br>    Object bean2 = applicationContext.getBean(xxx);  <br>    <span class="hljs-comment">//如果是scope = prototype 多例 就用到了原型模式</span><br>    <span class="hljs-comment">//getbean每次都是通过clone生成的对象 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>原型模式完成对象的创建，如果被克隆的对象中有对象属性，那么克隆的时候并不会被克隆</p><h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><p>浅拷贝：</p><ol><li>对于数据类型是基本类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性复制一份给新的对象</li><li>对于数据类型是应用数据类型的成员变量，比如成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是只将该成员变量的引用值(内存地址)复制一份给新的对象。实际上两个对象都指向同一个实例，所以这种情况下 一个对象中修改该成员变量会影响到另一个对象的该成员变量值</li><li>比如默认开启的对象克隆就是浅拷贝</li><li><code> Sheep clone2 = (Sheep) sheep.clone();</code></li></ol><p>深拷贝：</p><ol><li>复制对象的<strong>所有</strong>基本数据类型的成员变量值 </li><li>为所有应用数据类型的成员变量<strong>申请存储空间</strong>，并复制每个应用数据类型成员变量所引用的对象，直到该对象可达的所有对象，<strong>也就是说，对象进行深拷贝要对整个对象(包括引用对象)进行拷贝</strong></li><li>深拷贝实现方式1：<strong>重写clone</strong>方法来实现深拷贝</li><li>深拷贝实现方式2：通过<strong>序列化</strong>实现深拷贝  </li></ol><h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//克隆引用对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String cloneName;<br>    <span class="hljs-keyword">private</span> String cloneClass;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepCloneTarget</span><span class="hljs-params">(String cloneName, String cloneClass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cloneName = cloneName;<br>        <span class="hljs-keyword">this</span>.cloneClass = cloneClass;<br>    &#125;<br><br>    <span class="hljs-comment">//因为该类的属性都是string 所以直接用默认clone方式即可</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">//克隆引用对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String cloneName;<br>    <span class="hljs-keyword">private</span> String cloneClass;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepCloneTarget</span><span class="hljs-params">(String cloneName, String cloneClass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cloneName = cloneName;<br>        <span class="hljs-keyword">this</span>.cloneClass = cloneClass;<br>    &#125;<br><br>    <span class="hljs-comment">//因为该类的属性都是string 所以直接用默认clone方式即可</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//要克隆的对象 实现了两种克隆方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepProtoType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//String 属性</span><br>    <span class="hljs-keyword">public</span> DeepCloneTarget deepCloneTarget;<span class="hljs-comment">//引用类型 //属性是对象 默认克隆会浅拷贝</span><br>    <span class="hljs-comment">//深拷贝-1 使用重写clone方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Object deep = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//这里完成对基本数据类型(属性)和字符串的clone</span><br>        deep = <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-comment">//对引用类型的属性进行单独处理</span><br>        DeepProtoType deepProtoType = (DeepProtoType) deep;<br>        deepProtoType.deepCloneTarget = (DeepCloneTarget) deepCloneTarget.clone();<br>        <span class="hljs-keyword">return</span> deepProtoType;<br>    &#125;<br><br>    <span class="hljs-comment">//深拷贝2 使用对象的序列化实现(推荐)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//创建流对象</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">null</span>;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br>        ByteArrayInputStream bis = <span class="hljs-keyword">null</span>;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>            oos.writeObject(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//当前这个对象以对象流的方式输出 序列化</span><br>            <span class="hljs-comment">//再反序列化 读出来 相当于存了值 成功克隆了一个新的对象</span><br>            bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>            DeepProtoType copy = (DeepProtoType) ois.readObject();<br>            <span class="hljs-keyword">return</span> copy;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bos.close();<br>                oos.close();<br>                bis.close();<br>                ois.close();<br>            &#125; <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">//要克隆的对象 实现了两种克隆方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepProtoType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//String 属性</span><br>    <span class="hljs-keyword">public</span> DeepCloneTarget deepCloneTarget;<span class="hljs-comment">//引用类型 //属性是对象 默认克隆会浅拷贝</span><br>    <span class="hljs-comment">//深拷贝-1 使用重写clone方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Object deep = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//这里完成对基本数据类型(属性)和字符串的clone</span><br>        deep = <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-comment">//对引用类型的属性进行单独处理</span><br>        DeepProtoType deepProtoType = (DeepProtoType) deep;<br>        deepProtoType.deepCloneTarget = (DeepCloneTarget) deepCloneTarget.clone();<br>        <span class="hljs-keyword">return</span> deepProtoType;<br>    &#125;<br><br>    <span class="hljs-comment">//深拷贝2 使用对象的序列化实现(推荐)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//创建流对象</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">null</span>;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br>        ByteArrayInputStream bis = <span class="hljs-keyword">null</span>;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>            oos.writeObject(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//当前这个对象以对象流的方式输出 序列化</span><br>            <span class="hljs-comment">//再反序列化 读出来 相当于存了值 成功克隆了一个新的对象</span><br>            bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>            DeepProtoType copy = (DeepProtoType) ois.readObject();<br>            <span class="hljs-keyword">return</span> copy;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bos.close();<br>                oos.close();<br>                bis.close();<br>                ois.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        DeepProtoType dp = <span class="hljs-keyword">new</span> DeepProtoType();<br>        dp.name = <span class="hljs-string">&quot;小水牛&quot;</span>;<br>        dp.deepCloneTarget = <span class="hljs-keyword">new</span> DeepCloneTarget(<span class="hljs-string">&quot;大水牛&quot;</span>, <span class="hljs-string">&quot;敲能喝&quot;</span>);<br>        <span class="hljs-comment">//方式一 完成深拷贝</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        DeepProtoType clone = (DeepProtoType) dp.clone();</span><br><span class="hljs-comment">        System.out.println(dp.hashCode());//460141958</span><br><span class="hljs-comment">        System.out.println(clone.hashCode());//1163157884</span><br><span class="hljs-comment">       */</span><br>       <span class="hljs-comment">//方式二 完成深拷贝</span><br>        DeepProtoType p = (DeepProtoType) dp.deepClone();<br>        System.out.println(<span class="hljs-string">&quot;克隆原型：&quot;</span>+dp.name + <span class="hljs-string">&quot;--&quot;</span> + dp.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆原型：小水牛--325040804</span><br><br>        System.out.println(<span class="hljs-string">&quot;克隆的对象&quot;</span>+p.name + <span class="hljs-string">&quot;--&quot;</span> + p.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆的对象小水牛--2065951873</span><br>    &#125;<br>&#125;<br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        DeepProtoType dp = <span class="hljs-keyword">new</span> DeepProtoType();<br>        dp.name = <span class="hljs-string">&quot;小水牛&quot;</span>;<br>        dp.deepCloneTarget = <span class="hljs-keyword">new</span> DeepCloneTarget(<span class="hljs-string">&quot;大水牛&quot;</span>, <span class="hljs-string">&quot;敲能喝&quot;</span>);<br>        <span class="hljs-comment">//方式一 完成深拷贝</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        DeepProtoType clone = (DeepProtoType) dp.clone();</span><br><span class="hljs-comment">        System.out.println(dp.hashCode());//460141958</span><br><span class="hljs-comment">        System.out.println(clone.hashCode());//1163157884</span><br><span class="hljs-comment">       */</span><br>       <span class="hljs-comment">//方式二 完成深拷贝</span><br>        DeepProtoType p = (DeepProtoType) dp.deepClone();<br>        System.out.println(<span class="hljs-string">&quot;克隆原型：&quot;</span>+dp.name + <span class="hljs-string">&quot;--&quot;</span> + dp.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆原型：小水牛--325040804</span><br><br>        System.out.println(<span class="hljs-string">&quot;克隆的对象&quot;</span>+p.name + <span class="hljs-string">&quot;--&quot;</span> + p.deepCloneTarget.hashCode());<br>        <span class="hljs-comment">//克隆的对象小水牛--2065951873</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//推荐使用的是通过序列化实现深拷贝，这样无论原型如何修改都不会影响克隆 因为直接通过流来反序列化创建</span><br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</li><li>不用重新初始化对象，而是动态的获得对象运行时的状态</li><li>如果原型对象发生变化（增加或减少属性），其他克隆对象也会发生相应的变化，无需修改代码</li><li>在实现深克隆的时候 可能需要比较复杂的代码</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但是对已有的类来说进行改造的时候 需要修改它的源代码，违背了<code>OCP</code>（开闭原则）。</li></ol><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ol><li>需求：需要建房子 这一过程为打桩 砌墙 封顶</li><li>房子有各种各种的 比如普通房 高楼 别墅 各种房子的过程虽然一样 但是要求不要相同</li><li>编写程序完成需求</li></ol><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;  <span class="hljs-comment">//抽象房子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 打地基</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//砌墙</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//封顶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//造房子</span><br>        buildBasic();<br>        buildWalls();<br>        roofed();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//普通房子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子打地基&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子砌墙&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CommonHouse commonHouse = <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;  <span class="hljs-comment">//抽象房子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 打地基</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//砌墙</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//封顶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//造房子</span><br>        buildBasic();<br>        buildWalls();<br>        roofed();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//普通房子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHouse</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子打地基&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子砌墙&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        commonHouse.build();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/12/03/javaDesignMode/TraditionalBuilder.jpg" alt="java"></p><ol><li><p>有点是比较好理解，简单易操作</p></li><li><p>设计的程序结构过于简单，没有设计缓存层对象，程序的扩展和维护不好,也就是说 这种设计方案把产品（房子）和创建产品的过程（建房子build方法）封装在一起 ，耦合性增强了</p></li><li><p>解决方案：将<strong>产品</strong>和<strong>产品建造过程</strong>解耦 =&gt; 建造者模式</p></li></ol><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>建造者模式(Builder Pattern)又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别） 使这个抽象过程的不同方法可以构造出不同表现(属性)的对象。</li><li>建造者模式是一步一步创建一个复杂的对象 ，他允许用户指定复杂的类型就可以构建他们，用户不需要知道具体构建细节。</li></ol><h4 id="建造者模式的四个角色"><a href="#建造者模式的四个角色" class="headerlink" title="建造者模式的四个角色"></a>建造者模式的四个角色</h4><ol><li>Product(产品角色) ：一个具体的产品对象</li><li>Builder(抽象建造者)：创建一个Product对象的各个部件的接口/抽象类</li><li><code>ConcreteBuilder</code>(具体建造者)实现接口，构建和装配各个部件</li><li>Director(指挥者)：构建一个Builder接口的对象，它主要是用于创建一个复杂的对象。主要有两个作用，一是：隔离客户与对象产生的过程，二是：复杂控制产品对象的生产过程</li></ol><p>产品：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span> </span>&#123;<span class="hljs-comment">//对应产品</span><br>    <span class="hljs-keyword">private</span> String base;<br>    <span class="hljs-keyword">private</span> String wall;<br>    <span class="hljs-keyword">private</span> String roofed;<br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span> </span>&#123;<span class="hljs-comment">//对应产品</span><br>    <span class="hljs-keyword">private</span> String base;<br>    <span class="hljs-keyword">private</span> String wall;<br>    <span class="hljs-keyword">private</span> String roofed;<br><span class="hljs-comment">//对应getset方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>抽象的建造者Builder:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> House house = <span class="hljs-keyword">new</span> House(); <span class="hljs-comment">//组合一个产品</span><br>    <span class="hljs-comment">//将建造的流程写好,抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//建造房子 建好后将房子返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">BuildHouse</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> House house = <span class="hljs-keyword">new</span> House(); <span class="hljs-comment">//组合一个产品</span><br>    <span class="hljs-comment">//将建造的流程写好,抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//建造房子 建好后将房子返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">BuildHouse</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> house;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指挥者Director</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//指挥者 这里去指定制作流程 返回房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span> </span>&#123;<br>    HouseBuilder houseBuilder = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//1.构造器传入  依赖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//2.通过set方法传入 聚合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//如何处理建房流程，交给指挥者</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">constructorHouse</span><span class="hljs-params">()</span></span>&#123;<br>        houseBuilder.buildBasic();<br>        houseBuilder.buildWalls();<br>        houseBuilder.roofed();<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">//指挥者 这里去指定制作流程 返回房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span> </span>&#123;<br>    HouseBuilder houseBuilder = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//1.构造器传入  依赖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//2.通过set方法传入 聚合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br>    <span class="hljs-comment">//如何处理建房流程，交给指挥者</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">constructorHouse</span><span class="hljs-params">()</span></span>&#123;<br>        houseBuilder.buildBasic();<br>        houseBuilder.buildWalls();<br>        houseBuilder.roofed();<br>        <span class="hljs-keyword">return</span> houseBuilder.BuildHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个产品类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//普通房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子打地基五米&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子砌墙10cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//高楼</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HighBuilding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼打地基50&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼砌墙20cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">//普通房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子打地基五米&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子砌墙10cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子封顶&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//高楼</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HighBuilding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼打地基50&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高楼砌墙20cm&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"高楼透明屋顶"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//盖普通房子</span><br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        <span class="hljs-comment">//准备创建房子的指挥者</span><br>        HouseDirector houseDirector = <span class="hljs-keyword">new</span> HouseDirector(commonHouse);<br>        <span class="hljs-comment">//完成盖房子，返回产品（房子）</span><br>        House house = houseDirector.constructorHouse();<br><br>        <span class="hljs-comment">//盖高楼</span><br>        HighBuilding highBuilding = <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//盖普通房子</span><br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        <span class="hljs-comment">//准备创建房子的指挥者</span><br>        HouseDirector houseDirector = <span class="hljs-keyword">new</span> HouseDirector(commonHouse);<br>        <span class="hljs-comment">//完成盖房子，返回产品（房子）</span><br>        House house = houseDirector.constructorHouse();<br><br>        <span class="hljs-comment">//盖高楼</span><br>        HighBuilding highBuilding = <span class="hljs-keyword">new</span> HighBuilding();<br>        houseDirector.setHouseBuilder(highBuilding);<br>        House house1 = houseDirector.constructorHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/12/03/javaDesignMode/improveBuilder-1637309987736.jpg" alt="java"></p><p><code>JDK</code>中用到的建造者模式 <code>java.lang.StringBuilder</code></p><ul><li><code>Appendable</code>接口定义了多个append方法（抽象方法） ， 即<code>Appendable</code>为建造者，定义了抽象方法</li><li><code>AbstractStringBuilder</code>已经是建造者，只是不能实例化</li><li><code>StringBuilder</code>即充当了指挥者角色，同时同时充当了具体的建造者。建造方法的实现是由<code>AbstractStringBuilder</code>完成，而<code>StringBuilder</code>继承了<code>AbstractStringBuilder</code></li></ul><p><strong>建造者模式的注意事项和细节</strong></p><ol><li><p>客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p></li><li><p>建造者模式所创建的产品一般具有较多相同的共同点，其组成部分相似，如果产品之间的差异性很大，则不是和使用建造者模式，因此其使用范围收到一定的限制。</p></li><li><p>如果产品内部变化复杂，可能会导致需要定义很多具体建造者来实现这种变化，导致系统变得庞大，因此要考虑是否适合选择建造者模式。</p></li><li><p>每一个具体的建造者都相对独立，而与其他的具体建造者无关，因此可以很方便的替换具体建造者或者增加新的具体建造者，用户使用不同的建造者即可得到不同的产品对象。</p></li><li><p>可以更加精细的控制产品的建造过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建流程。</p></li><li><p>增加新的具体创建者无需修改原油类库的代码，指挥者针对抽象建造者类变成，系统扩展方便，符合开闭原则。</p><blockquote><p><strong>抽象工厂模式和建造者模式</strong></p></blockquote><p>抽象工厂模式实现对产品家族的创建，一个产品家族是一系列产品，具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产。而建造者模式则是按照指定的蓝图构建产品，它的主要目的是通过组装零配件而生产一个新的产品。</p></li></ol><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>基本介绍</p><ol><li>适配器模式(<code>Adapter Pattern</code>)将某个类的接口转换成客户端期望的另一个接口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper)</li><li>适配器模式属于结构型模式</li><li>主要分为三类:类适配器模式，对象适配器模式  ，接口适配器模式   </li></ol><p>工作原理</p><ul><li>适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容</li><li>从用户的角度看不到适配者，是解耦的。</li><li>用户调用适配器转换出来的目标接口方法，适配器再调用被适配者的相关接口方法</li><li>用户收到反馈结果，只感觉是和目标接口交互</li></ul><h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:被适配的类 src 提供方、</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Voltage220V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output220V</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> src = <span class="hljs-number">220</span>;<br>        System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:被适配的类 src 提供方、</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Voltage220V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output220V</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> src = <span class="hljs-number">220</span>;<br>        System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//充电接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-comment">//充电接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:适配器类</span><br><span class="hljs-comment"> * 继承被适配的类 实现适配器类的接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoltageAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Voltage220V</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Voltage5V</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> srcV  = output220V();<br>        <span class="hljs-keyword">int</span> destV = srcV/<span class="hljs-number">44</span>;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:适配器类</span><br><span class="hljs-comment"> * 继承被适配的类 实现适配器类的接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoltageAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Voltage220V</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Voltage5V</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> srcV  = output220V();<br>        <span class="hljs-keyword">int</span> destV = srcV/<span class="hljs-number">44</span>;<br>        <span class="hljs-keyword">return</span> destV;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>：手机 有充电方法 依赖了一个接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    <span class="hljs-comment">//充电方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span> <span class="hljs-params">(Voltage5V iVoltage)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (iVoltage.output5V() == <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压为5V，可冲&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage.output5V() &gt; <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>：手机 有充电方法 依赖了一个接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    <span class="hljs-comment">//充电方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span> <span class="hljs-params">(Voltage5V iVoltage)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (iVoltage.output5V() == <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压为5V，可冲&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage.output5V() &gt; <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">"电压大于5V 无法充电"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====类适配器模式&quot;</span>);<br>        Phone phone = <span class="hljs-keyword">new</span> Phone();<br>        phone.charging(<span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====类适配器模式&quot;</span>);<br>        Phone phone = <span class="hljs-keyword">new</span> Phone();<br>        phone.charging(<span class="hljs-keyword">new</span> VoltageAdapter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类适配器模式注意事项和细节</p><ol><li>Java是单继承机制 ，所以类适配器需要继承<code>src</code>这一点算是一个缺点，因为这要求<code>dst</code>必须是接口，有一定的局限性</li><li><code>src</code>类的方法在Adapter中都会暴露出来，增加了使用成本</li><li>由于其继承了<code>src</code>类，所以它可以根据需求重写<code>src</code>类的方法，使得Adapter的灵活性增强了\</li></ol><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>基本介绍</p><ol><li>基本思路和类的适配器相同，只是将Adapter类做修改，不是继承<code>src</code>类，而是持有<code>src</code>的类型，以解决兼容问题。即：持有<code>src</code>类，实现<code>dst</code>类接口，完成<code>src</code>-&gt;<code>dst</code>的适配。</li><li>根据“合成复用原则”，在系统中尽量使用关联关系来代替继承关系。</li><li>对象适配器模式是适配器模式常用的一种</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:被适配的类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Voltage220V</span> </span>&#123;<br>    <span class="hljs-comment">//提供220电压</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output220V</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> src = <span class="hljs-number">220</span>;<br>        System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:被适配的类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Voltage220V</span> </span>&#123;<br>    <span class="hljs-comment">//提供220电压</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output220V</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> src = <span class="hljs-number">220</span>;<br>        System.out.println(<span class="hljs-string">&quot;电压=&quot;</span> + src + <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//适配接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-comment">//适配接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:适配器类</span><br><span class="hljs-comment"> * 继承被适配的类 实现适配器类的接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoltageAdapter</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Voltage220V voltage220;<br>    <span class="hljs-comment">//通过构造器 传入一个Voltage220V 实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VoltageAdapter</span><span class="hljs-params">(Voltage220V voltage220)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.voltage220 = voltage220;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> destV = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != voltage220)&#123;<br>            <span class="hljs-keyword">int</span> src = voltage220.output220V();<span class="hljs-comment">//获取220V电压</span><br>            System.out.println(<span class="hljs-string">&quot;适配器适配&quot;</span>);<br>            destV = src /<span class="hljs-number">44</span>;<br>            System.out.println(<span class="hljs-string">&quot;适配完成，输出的电压为&quot;</span> + destV);<br>        &#125;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:适配器类</span><br><span class="hljs-comment"> * 继承被适配的类 实现适配器类的接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoltageAdapter</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Voltage5V</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Voltage220V voltage220;<br>    <span class="hljs-comment">//通过构造器 传入一个Voltage220V 实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VoltageAdapter</span><span class="hljs-params">(Voltage220V voltage220)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.voltage220 = voltage220;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output5V</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> destV = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != voltage220)&#123;<br>            <span class="hljs-keyword">int</span> src = voltage220.output220V();<span class="hljs-comment">//获取220V电压</span><br>            System.out.println(<span class="hljs-string">&quot;适配器适配&quot;</span>);<br>            destV = src /<span class="hljs-number">44</span>;<br>            System.out.println(<span class="hljs-string">&quot;适配完成，输出的电压为&quot;</span> + destV);<br>        &#125;<br>        <span class="hljs-keyword">return</span> destV;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>：手机 有充电方法 依赖了一个接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    <span class="hljs-comment">//充电方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span> <span class="hljs-params">(Voltage5V iVoltage)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (iVoltage.output5V() == <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压为5V，可冲&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage.output5V() &gt; <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>：手机 有充电方法 依赖了一个接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    <span class="hljs-comment">//充电方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span> <span class="hljs-params">(Voltage5V iVoltage)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (iVoltage.output5V() == <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;电压为5V，可冲&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iVoltage.output5V() &gt; <span class="hljs-number">5</span>)&#123;<br>            System.out.println(<span class="hljs-string">"电压大于5V 无法充电"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====对象适配器模式&quot;</span>);<br>        Phone phone = <span class="hljs-keyword">new</span> Phone();<br>        phone.charging(<span class="hljs-keyword">new</span> VoltageAdapter(<span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====对象适配器模式&quot;</span>);<br>        Phone phone = <span class="hljs-keyword">new</span> Phone();<br>        phone.charging(<span class="hljs-keyword">new</span> VoltageAdapter(<span class="hljs-keyword">new</span> Voltage220V() ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对象适配器模式注意事项和细节</p><ol><li>对象适配器和类适配器算是同一种思想，只不过是实现方式不同。根据合成服用原则，使用组合替代继承，所以他解决了适配器必须继承<code>src</code>的局限性问题，也不再要修<code>dst</code>必须是接口。</li><li>使用成本更低，更灵活</li></ol><h4 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h4><p>基本介绍</p><ol><li>一些书籍称为：适配器模式（Default Adapter Pattern）或缺省适配器模式。</li><li>当不需要全部实现接口提供的方法时，可以设计一个抽象类实现接口，并为该接口中每一个方法提供一个<strong>默认实现（空方法）</strong>，那么该抽象类的子类可有选择的覆盖父类的某些方法实现需求。</li><li>适用于一个接口不想使用其所有的方法的情况。</li></ol><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ul><li><code>SpringMVC</code>中的<code>HandlerAdapter</code>就使用到了适配器模式 <strong>很牛逼，但是现在看不懂，记得回来看~</strong></li></ul><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ol><li>三种命名方式，是根据<code>src</code>以怎样的形式给到Adapter(在<code>Adapte</code>里的形式)来命名的。</li><li>三种适配器<ul><li>类适配器：以类给到，在Adapter里，就是将<code>src</code>当做类继承</li><li>对象适配器：以对象给到，在Adapter里，将<code>src</code>作为一个对象持有</li><li>接口适配器：以接口给到，在Adapter里，将<code>src</code>作为一个接口，实现</li></ul></li><li>Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作。</li><li>实际开发中 实现不拘泥于这三种经典形式</li></ol><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>问题分析：类爆炸问题。</p><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>桥接模式(Bridge)：将实现与抽象类在两个不同的类层次中，使两个层次可以独立改变</li><li>Bridge基于类的最小设计原则，通过使用继承，聚合，封装等不同方式来让不同的类承担不同的职责。它的主要特点是把抽象(Abstraction)和实现(Implementation)分离开，从而可以保证各个部分的独立性以及对他们的功能扩展</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//Vivo实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vivo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机开机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机关机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机打电话 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//XiaoMi实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaoMi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机开机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机关机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//Vivo实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vivo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机开机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机关机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; Vivo手机打电话 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//XiaoMi实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaoMi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机开机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 小米手机关机 &quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">" 小米手机打电话 "</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//抽象成 桥</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//组合品牌</span><br><span class="hljs-keyword">private</span> Brand brand;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Phone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<span class="hljs-keyword">this</span>.brand = brand;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">this</span>.brand.open();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>brand.close();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>brand.call();<br>&#125;<br>&#125;<br><span class="hljs-comment">//两个抽象子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpRightPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UpRightPhone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(brand);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.open();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.close();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.call();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//折叠式手机类，继承 抽象类 Phone</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FoldedPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FoldedPhone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(brand);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.open();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.close();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.call();<br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">//抽象成 桥</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//组合品牌</span><br><span class="hljs-keyword">private</span> Brand brand;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Phone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<span class="hljs-keyword">this</span>.brand = brand;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">this</span>.brand.open();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>brand.close();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>brand.call();<br>&#125;<br>&#125;<br><span class="hljs-comment">//两个抽象子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpRightPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UpRightPhone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(brand);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.open();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.close();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.call();<br>System.out.println(<span class="hljs-string">&quot; 直立样式手机 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//折叠式手机类，继承 抽象类 Phone</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FoldedPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FoldedPhone</span><span class="hljs-params">(Brand brand)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(brand);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.open();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.close();<br>System.out.println(<span class="hljs-string">&quot; 折叠样式手机 &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.call();<br>System.out.println(<span class="hljs-string">" 折叠样式手机 "</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//客户端实现方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//获取折叠式手机 (样式 + 品牌 )</span><br>Phone phone1 = <span class="hljs-keyword">new</span> FoldedPhone(<span class="hljs-keyword">new</span> XiaoMi());<br>phone1.open();<br>phone1.call();<br>phone1.close();<br><br>Phone phone2 = <span class="hljs-keyword">new</span> FoldedPhone(<span class="hljs-keyword">new</span> Vivo());<br>phone2.open();<br>phone2.call();<br>phone2.close();<br><br>UpRightPhone phone3 = <span class="hljs-keyword">new</span> UpRightPhone(<span class="hljs-keyword">new</span> XiaoMi());<br>phone3.open();<br>phone3.call();<br>phone3.close();<br><br>UpRightPhone phone4 = <span class="hljs-keyword">new</span> UpRightPhone(<span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">//客户端实现方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//获取折叠式手机 (样式 + 品牌 )</span><br>Phone phone1 = <span class="hljs-keyword">new</span> FoldedPhone(<span class="hljs-keyword">new</span> XiaoMi());<br>phone1.open();<br>phone1.call();<br>phone1.close();<br><br>Phone phone2 = <span class="hljs-keyword">new</span> FoldedPhone(<span class="hljs-keyword">new</span> Vivo());<br>phone2.open();<br>phone2.call();<br>phone2.close();<br><br>UpRightPhone phone3 = <span class="hljs-keyword">new</span> UpRightPhone(<span class="hljs-keyword">new</span> XiaoMi());<br>phone3.open();<br>phone3.call();<br>phone3.close();<br><br>UpRightPhone phone4 = <span class="hljs-keyword">new</span> UpRightPhone(<span class="hljs-keyword">new</span> Vivo());<br>phone4.open();<br>phone4.call();<br>phone4.close();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><ol><li><code>JDBC</code>的Driver接口，从桥接模式来看，Driver就是一个接口，下面可以有<code>Mysql</code>的Driver，也可以有<code>Orical</code>的Driver，这些就可以当做实现接口类</li></ol><p><img src="/2021/12/03/javaDesignMode/JDBCqiaojie.jpg" alt="java"></p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ol><li>实现了抽象和实现类的分离，极大地提升了系统的灵活性，让抽象类和实现类部分独立开，有助于系统实现分层设计，从而产生更好的结构化系统。</li><li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口即可，其他的部分有具体业务来完成。</li><li>桥接模式替代了多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。</li><li>桥接模式的引入增加了系统的理解和设计难度，由于聚和关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。</li><li>桥接模式要求正确识别出系统两个独立变化的维度，因此适用范围有一定的局限性。</li><li>常见的应用场景:<ul><li><code>JDBC</code>驱动系统</li><li>银行转账系统<ul><li>转账分类：网上转账，柜台转账，ATM转账</li><li>转账用户类型：普通用户，银卡用户，金卡用户…</li></ul></li><li>消息管理<ul><li>消息类型：即使消息，延时消息..</li><li>消息分类：短信，<code>QQ</code>，微信..</li></ul></li></ul></li></ol><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><blockquote><p><strong>定义</strong>：<strong>动态的将新功能附加到对象上</strong>，在对象功能扩展方面，比继承更有弹性，也体现了开闭原则(<code>OCP</code>)</p></blockquote><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><ul><li>星巴克咖啡订单项目(咖啡馆)</li><li>咖啡种类/单品咖啡：咖啡种类/单品咖啡:Espresso(意大利浓咖啡)、<code>ShortBlack</code>、<code>LongBlack</code>(美式咖啡)、Decaf(无因咖啡)</li><li>调料:Milk、Soy(豆浆)、Chocolate</li><li>要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便</li><li>使用<code>OO</code>的来计算不同种类咖啡的费用:客户可以点单品咖啡，也可以单品咖啡+调料组合。</li></ul><p>分析，一份单品咖啡可能有多份调料，而且单品咖啡和调料应该易于扩展，符合开闭原则。所以不能把单品咖啡和调料融合在一起，应该把咖啡当做<strong>被装饰者</strong>，调料当成<strong>装饰者</strong>，实现调料的具体子类为修饰着。图解图下</p><p><img src="/2021/12/03/javaDesignMode/decorator.jpg" alt="java"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//总抽象类Drink 被装饰者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-keyword">public</span> String des; <span class="hljs-comment">// 描述</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> price = <span class="hljs-number">0.0f</span>;<br><span class="hljs-comment">//...实现get 和 set方法</span><br>    <br><span class="hljs-comment">//计算费用的抽象方法</span><br><span class="hljs-comment">//子类来实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//咖啡类 作为缓存层  旗下是单体咖啡实类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coffee</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice();<br>&#125;<br>&#125;<br><span class="hljs-comment">//两种咖啡种类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeCaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coffee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeCaf</span><span class="hljs-params">()</span> </span>&#123;<br>setDes(<span class="hljs-string">&quot; 无因咖啡 &quot;</span>); <span class="hljs-comment">//介绍</span><br>setPrice(<span class="hljs-number">1.0f</span>);<span class="hljs-comment">//咖啡价格</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Espresso</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coffee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Espresso</span><span class="hljs-params">()</span> </span>&#123;<br>setDes(<span class="hljs-string">&quot; 意大利咖啡 &quot;</span>);<br>setPrice(<span class="hljs-number"><code class="language-hljs java"><span class="hljs-comment">//总抽象类Drink 被装饰者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-keyword">public</span> String des; <span class="hljs-comment">// 描述</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> price = <span class="hljs-number">0.0f</span>;<br><span class="hljs-comment">//...实现get 和 set方法</span><br>    <br><span class="hljs-comment">//计算费用的抽象方法</span><br><span class="hljs-comment">//子类来实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//咖啡类 作为缓存层  旗下是单体咖啡实类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coffee</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice();<br>&#125;<br>&#125;<br><span class="hljs-comment">//两种咖啡种类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeCaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coffee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeCaf</span><span class="hljs-params">()</span> </span>&#123;<br>setDes(<span class="hljs-string">&quot; 无因咖啡 &quot;</span>); <span class="hljs-comment">//介绍</span><br>setPrice(<span class="hljs-number">1.0f</span>);<span class="hljs-comment">//咖啡价格</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Espresso</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Coffee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Espresso</span><span class="hljs-params">()</span> </span>&#123;<br>setDes(<span class="hljs-string">&quot; 意大利咖啡 &quot;</span>);<br>setPrice(<span class="hljs-number">6.0f</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//Decorator装饰者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-keyword">private</span> Drink obj; <span class="hljs-comment">//被装饰者</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Decorator</span><span class="hljs-params">(Drink obj)</span> </span>&#123; <span class="hljs-comment">//组合被装饰者</span><br><span class="hljs-keyword">this</span>.obj = obj;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// getPrice 自己价格</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice() + obj.cost();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// obj.getDes() 输出被装饰者的信息</span><br><span class="hljs-keyword">return</span> des + <span class="hljs-string">&quot; &quot;</span> + getPrice() + <span class="hljs-string">&quot; &amp;&amp; &quot;</span> + obj.getDes();<br>&#125;<br>&#125;<br><span class="hljs-comment">//具体的Decorator， 这里就是调味品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Milk</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 牛奶 &quot;</span>);<br>setPrice(<span class="hljs-number">2.0f</span>); <br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Soy</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 豆浆  &quot;</span>);<br>setPrice(<span class="hljs-number">1.5f</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chocolate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chocolate</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 巧克力 &quot;</span>);<br>setPrice(<span class="hljs-number">3.0f</span>); <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">//Decorator装饰者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Drink</span> </span>&#123;<br><span class="hljs-keyword">private</span> Drink obj; <span class="hljs-comment">//被装饰者</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Decorator</span><span class="hljs-params">(Drink obj)</span> </span>&#123; <span class="hljs-comment">//组合被装饰者</span><br><span class="hljs-keyword">this</span>.obj = obj;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// getPrice 自己价格</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPrice() + obj.cost();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// obj.getDes() 输出被装饰者的信息</span><br><span class="hljs-keyword">return</span> des + <span class="hljs-string">&quot; &quot;</span> + getPrice() + <span class="hljs-string">&quot; &amp;&amp; &quot;</span> + obj.getDes();<br>&#125;<br>&#125;<br><span class="hljs-comment">//具体的Decorator， 这里就是调味品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Milk</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 牛奶 &quot;</span>);<br>setPrice(<span class="hljs-number">2.0f</span>); <br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Soy</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 豆浆  &quot;</span>);<br>setPrice(<span class="hljs-number">1.5f</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chocolate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chocolate</span><span class="hljs-params">(Drink obj)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(obj);<br>setDes(<span class="hljs-string">&quot; 巧克力 &quot;</span>);<br>setPrice(<span class="hljs-number">3.0f</span>); <span class="hljs-comment">// 调味品 的价格</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//具体实现代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoffeeBar</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span><br><br><span class="hljs-comment">// 1. 点一份 LongBlack</span><br>Drink order = <span class="hljs-keyword">new</span> LongBlack();<br>System.out.println(<span class="hljs-string">&quot;费用1=&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;描述=&quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 2. order 加入一份牛奶</span><br>order = <span class="hljs-keyword">new</span> Milk(order);<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 描述 = &quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 3. order 加入一份巧克力</span><br>order = <span class="hljs-keyword">new</span> Chocolate(order);<br><br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力  费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力 描述 = &quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 3. order 加入一份巧克力</span><br>order = <span class="hljs-keyword">new</span> Chocolate(order);<br><br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力   费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力 描述 = &quot;</span> + order.getDes());<br>System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br><br>Drink order2 = <span class="hljs-keyword">new</span> DeCaf();<br><br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡  费用 =&quot;</span> + order2.cost());<br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 描述 = &quot;</span> + order2.getDes());<br><br>order2 = <span class="hljs-keyword">new</span> Milk(order2);<br><br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 加入一份牛奶  费用 =&quot;</span> + order2.cost());<br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">//具体实现代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoffeeBar</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span><br><br><span class="hljs-comment">// 1. 点一份 LongBlack</span><br>Drink order = <span class="hljs-keyword">new</span> LongBlack();<br>System.out.println(<span class="hljs-string">&quot;费用1=&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;描述=&quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 2. order 加入一份牛奶</span><br>order = <span class="hljs-keyword">new</span> Milk(order);<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 描述 = &quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 3. order 加入一份巧克力</span><br>order = <span class="hljs-keyword">new</span> Chocolate(order);<br><br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力  费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入一份巧克力 描述 = &quot;</span> + order.getDes());<br><br><span class="hljs-comment">// 3. order 加入一份巧克力</span><br>order = <span class="hljs-keyword">new</span> Chocolate(order);<br><br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力   费用 =&quot;</span> + order.cost());<br>System.out.println(<span class="hljs-string">&quot;order 加入一份牛奶 加入2份巧克力 描述 = &quot;</span> + order.getDes());<br>System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br><br>Drink order2 = <span class="hljs-keyword">new</span> DeCaf();<br><br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡  费用 =&quot;</span> + order2.cost());<br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 描述 = &quot;</span> + order2.getDes());<br><br>order2 = <span class="hljs-keyword">new</span> Milk(order2);<br><br>System.out.println(<span class="hljs-string">&quot;order2 无因咖啡 加入一份牛奶  费用 =&quot;</span> + order2.cost());<br>System.out.println(<span class="hljs-string">"order2 无因咖啡 加入一份牛奶 描述 = "</span> + order2.getDes());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p>Java的IO结构，<code>FilterInputStream</code>就是一个<strong>装饰者</strong></p></blockquote><p><img src="/2021/12/03/javaDesignMode/InputStream.jpg" alt="java"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoratorToJDKIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">/*说明</span><br><span class="hljs-comment">            1. InputStream是抽象类,类似我们前面讲的 Drink</span><br><span class="hljs-comment">            2.FileInputStream是 InputStream子类，类似我们前面的 DeCaf, LongBlack</span><br><span class="hljs-comment">            3.FilterInputStream是 InputStream子类:类似我们前面的Decorator修饰者</span><br><span class="hljs-comment">            4. DatalnputStream是 FilterInputStream子类，具体的修饰者，类似前面的 Milk, Soy 等</span><br><span class="hljs-comment">            5.FilterInputStream类有protected volatile InputStream in;即含被装饰者</span><br><span class="hljs-comment">            6.分析得出在jdk 的io体系中，就是使用装饰者模式</span><br><span class="hljs-comment">         */</span><br>        DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoratorToJDKIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">/*说明</span><br><span class="hljs-comment">            1. InputStream是抽象类,类似我们前面讲的 Drink</span><br><span class="hljs-comment">            2.FileInputStream是 InputStream子类，类似我们前面的 DeCaf, LongBlack</span><br><span class="hljs-comment">            3.FilterInputStream是 InputStream子类:类似我们前面的Decorator修饰者</span><br><span class="hljs-comment">            4. DatalnputStream是 FilterInputStream子类，具体的修饰者，类似前面的 Milk, Soy 等</span><br><span class="hljs-comment">            5.FilterInputStream类有protected volatile InputStream in;即含被装饰者</span><br><span class="hljs-comment">            6.分析得出在jdk 的io体系中，就是使用装饰者模式</span><br><span class="hljs-comment">         */</span><br>        DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"/"</span>));<br>        System.out.println(dis.read());<br>        dis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h4 id="案例分析："><a href="#案例分析：" class="headerlink" title="案例分析："></a>案例分析：</h4><p><img src="/2021/12/03/javaDesignMode/composition.png" alt="java"></p><p>传统方案解决问题分析</p><ul><li>将学院看做了学校的子类，将专业看做了学院的子类，相当于从组织大小进行分成</li><li>但是这样不能很好的实现管理操作，比如增删改查。</li><li>解决方案，把学校，学院，专业当做组织结构，她们之间没有继承关系，而是一个树形结构，可以更好的实现管理操作，=&gt; 组合模式</li></ul><h4 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>组合模式(Composite Patterm）)，又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系。</li><li>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</li><li>组合模式使得用户对单个对象和组合对象的访问具有一致性，即:组合能让客户以一致的方式处理个别对象以及组合对象</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名字</span><br><span class="hljs-keyword">private</span> String des; <span class="hljs-comment">// 说明</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//默认实现</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<span class="hljs-comment">//不支持操作异常</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//默认实现</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>&#125;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrganizationComponent</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.des = des;<br>&#125;<br><span class="hljs-comment">//实现getset方法。。。。</span><br><br><span class="hljs-comment">//方法print, 做成抽象的, 子类都需要实现</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名字</span><br><span class="hljs-keyword">private</span> String des; <span class="hljs-comment">// 说明</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//默认实现</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<span class="hljs-comment">//不支持操作异常</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//默认实现</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>&#125;<br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrganizationComponent</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.des = des;<br>&#125;<br><span class="hljs-comment">//实现getset方法。。。。</span><br><br><span class="hljs-comment">//方法print, 做成抽象的, 子类都需要实现</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//College</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">College</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br><span class="hljs-comment">//List 中 存放的Department</span><br>List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">College</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><span class="hljs-comment">// 重写add</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样</span><br>organizationComponents.add(organizationComponent);<br>&#125;<br><span class="hljs-comment">// 重写remove</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.remove(organizationComponent);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">//遍历 organizationComponents </span><br><span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>organizationComponent.print();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//University 就是 Composite , 可以管理College</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">University</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br>List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">University</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><br><span class="hljs-comment">// 重写add</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.add(organizationComponent);<br>&#125;<br><br><span class="hljs-comment">// 重写remove</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.remove(organizationComponent);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><br><span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">//遍历 organizationComponents </span><br><span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>organizationComponent.print();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Department</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br><span class="hljs-comment">//没有集合</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Department</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><span class="hljs-comment">//add , remove 就不用写了，因为他是叶子节点</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-comment">//College</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">College</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br><span class="hljs-comment">//List 中 存放的Department</span><br>List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">College</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><span class="hljs-comment">// 重写add</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br><span class="hljs-comment">//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样</span><br>organizationComponents.add(organizationComponent);<br>&#125;<br><span class="hljs-comment">// 重写remove</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.remove(organizationComponent);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">//遍历 organizationComponents </span><br><span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>organizationComponent.print();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//University 就是 Composite , 可以管理College</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">University</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br>List&lt;OrganizationComponent&gt; organizationComponents = <span class="hljs-keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">University</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><br><span class="hljs-comment">// 重写add</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.add(organizationComponent);<br>&#125;<br><br><span class="hljs-comment">// 重写remove</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(OrganizationComponent organizationComponent)</span> </span>&#123;<br>organizationComponents.remove(organizationComponent);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><br><span class="hljs-comment">// print方法，就是输出University 包含的学院</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;--------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br><span class="hljs-comment">//遍历 organizationComponents </span><br><span class="hljs-keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;<br>organizationComponent.print();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Department</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrganizationComponent</span> </span>&#123;<br><br><span class="hljs-comment">//没有集合</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Department</span><span class="hljs-params">(String name, String des)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name, des);<br>&#125;<br><span class="hljs-comment">//add , remove 就不用写了，因为他是叶子节点</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getName();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getDes();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//Client实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//从大到小创建对象 学校</span><br>OrganizationComponent university = <span class="hljs-keyword">new</span> University(<span class="hljs-string">&quot;清华大学&quot;</span>, <span class="hljs-string">&quot; 中国顶级大学 &quot;</span>);<br><br><span class="hljs-comment">//创建 学院</span><br>OrganizationComponent computerCollege = <span class="hljs-keyword">new</span> College(<span class="hljs-string">&quot;计算机学院&quot;</span>, <span class="hljs-string">&quot; 计算机学院 &quot;</span>);<br>OrganizationComponent infoEngineercollege = <span class="hljs-keyword">new</span> College(<span class="hljs-string">&quot;信息工程学院&quot;</span>, <span class="hljs-string">&quot; 信息工程学院 &quot;</span>);<br><br><span class="hljs-comment">//创建各个学院下面的系(专业)</span><br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;软件工程&quot;</span>, <span class="hljs-string">&quot; 软件工程不错 &quot;</span>));<br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;网络工程&quot;</span>, <span class="hljs-string">&quot; 网络工程不错 &quot;</span>));<br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;计算机科学与技术&quot;</span>, <span class="hljs-string">&quot; 计算机科学与技术是老牌的专业 &quot;</span>));<br><br><span class="hljs-comment">//</span><br>infoEngineercollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;通信工程&quot;</span>, <span class="hljs-string">&quot; 通信工程不好学 &quot;</span>));<br>infoEngineercollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;信息工程&quot;</span>, <span class="hljs-string">&quot; 信息工程好学 &quot;</span>));<br><br><span class="hljs-comment">//将学院加入到 学校</span><br>university.add(computerCollege);<br>university.add(infoEngineercollege);<br><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">//Client实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//从大到小创建对象 学校</span><br>OrganizationComponent university = <span class="hljs-keyword">new</span> University(<span class="hljs-string">&quot;清华大学&quot;</span>, <span class="hljs-string">&quot; 中国顶级大学 &quot;</span>);<br><br><span class="hljs-comment">//创建 学院</span><br>OrganizationComponent computerCollege = <span class="hljs-keyword">new</span> College(<span class="hljs-string">&quot;计算机学院&quot;</span>, <span class="hljs-string">&quot; 计算机学院 &quot;</span>);<br>OrganizationComponent infoEngineercollege = <span class="hljs-keyword">new</span> College(<span class="hljs-string">&quot;信息工程学院&quot;</span>, <span class="hljs-string">&quot; 信息工程学院 &quot;</span>);<br><br><span class="hljs-comment">//创建各个学院下面的系(专业)</span><br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;软件工程&quot;</span>, <span class="hljs-string">&quot; 软件工程不错 &quot;</span>));<br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;网络工程&quot;</span>, <span class="hljs-string">&quot; 网络工程不错 &quot;</span>));<br>computerCollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;计算机科学与技术&quot;</span>, <span class="hljs-string">&quot; 计算机科学与技术是老牌的专业 &quot;</span>));<br><br><span class="hljs-comment">//</span><br>infoEngineercollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;通信工程&quot;</span>, <span class="hljs-string">&quot; 通信工程不好学 &quot;</span>));<br>infoEngineercollege.add(<span class="hljs-keyword">new</span> Department(<span class="hljs-string">&quot;信息工程&quot;</span>, <span class="hljs-string">&quot; 信息工程好学 &quot;</span>));<br><br><span class="hljs-comment">//将学院加入到 学校</span><br>university.add(computerCollege);<br>university.add(infoEngineercollege);<br><br><span class="hljs-comment">//university.print();</span><br>infoEngineercollege.print();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><p>注意事项和细节</p><ol><li>简化客户端操作，客户端只需要面对一致的对象而不用考虑整体部分或者叶子结点的问题。</li><li>具有较强的扩展性，当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动。</li><li>方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加结点或者叶子从而创建出复杂的树形结构</li><li>需要便利组织结构，或者处理的对象具有树形结构时，非常适合使用组合模式</li><li>要求较高的抽象性， 如果结点和叶子具有很多差异性的话，比如很多方法和属性都不一样，不适合用组合模式</li></ol><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h4 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>外观模式(Facade)，也叫“过程模式” : 外观模式为子系统的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</li><li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关系这个子系统的内部细节</li></ul><p>原理类图说明(外观模式的角色)</p><ol><li>外观类(Facade):为调用端提供统一的调用接口，外观类知道哪些子类系统负责处理请求，从而将调用端的请求代理给适当的子系统对象</li><li>调用者(Client):外观接口的调用者</li><li>子系统的集合:指模块或者子系统，处理Facade对象指派的任务，他是功能的提供者</li></ol><p>外观模式就是解决多个复杂接口带来的使用困难，起到简化用户使用的作用。</p><h4 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p><code>Mybatis</code>中的configuration中使用了外观模式，</p><p>用户只需要传递一个Object，调用<code>metaObject</code>方法，而<code>getMetaObeject</code>方法中则组合了一系列<code>ObjectFactory</code>,一次判断返回的实例。相当于简化了用户的操作，在内部实现了一系列逻辑、</p><p>当我们调用子系统变得很困难的时候，以更高一层的接口来调用子系统，来提高系统使用和复用。</p></blockquote><p>外观模式的注意事项和细节</p><ol><li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li><li>外观模式对客户端与子系统的耦合关系，让子系统内部的模块更易维护和扩展</li><li>通过合理使用外观模式，可以帮助我们更好的划分访问的层次</li><li>当系统需要进行分层设计时，可以考虑使用Facade模式</li><li>在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性</li><li>不能过多的或者不合理的使用外观模式，使用外观模式好还是直接调用模块好。要以让系统有层次，利于维护为目的。</li></ol><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h4 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h4><p>小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同:</p><ul><li>有客户要求以新闻的形式发布</li><li>有客户人要求以博客的形式发布</li><li>有客户希望以微信公众号的形式发布</li></ul><blockquote><p>1)需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理,<br>相当于一个相同网站<br>的实例对象很多，造成服务器的资源浪费<br>2)解决思路:整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源<br>都可以达成共享，减少服务器资源<br>3)对于代码来说，由于是一份实例，维护和扩展都更加容易<br>4)上面的解决思路就可以使用享元模式来解决</p></blockquote><h4 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li><p>享元模式(Flyweight Pattern)也叫蝇量模式:运用共享技术有效地支持大量细粒度的对象</p></li><li><p>常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个</p></li><li><p>享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率</p></li><li><p>享元模式经典的应用场景就是池技术了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式</p></li></ol><p><img src="/2021/12/03/javaDesignMode/xiangyuan.jpg" alt="java"></p><blockquote><p>对类图的说明<br>对原理图的说明-即(模式的角色及职责)</p><ol><li><code>FlyWeight</code>是抽象的享元角色，他是产品的抽象类,同时定义出对象的外部状态和内部状态(后面介绍)的接口或实现</li><li><code>ConcreteFlyWeight</code>是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务</li><li><code>UnSharedConcreteFlyWeight</code>是不可共享的角色，一般不会出现在享元工厂。</li><li><code>FlyWeightFactory</code>享元工厂类，用于构建一个池容器(集合)，同时提供从池中获取对象方法</li></ol></blockquote><p>类似线程池，享元共享的数据是不可变的，可以共享资源。如果没有就创建，有就直接拿来用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//用户</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123; <br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>&#125;<br><span class="hljs-comment">//网站的抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSite</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">//用户</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123; <br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>&#125;<br><span class="hljs-comment">//网站的抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSite</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-comment">//抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">// 网站工厂类，根据需要返回压一个网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSiteFactory</span> </span>&#123;<br><br><span class="hljs-comment">//集合， 充当池的作用</span><br><span class="hljs-keyword">private</span> HashMap&lt;String, ConcreteWebSite&gt; pool = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br><span class="hljs-comment">//根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> WebSite <span class="hljs-title">getWebSiteCategory</span><span class="hljs-params">(String type)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!pool.containsKey(type)) &#123;<br><span class="hljs-comment">//就创建一个网站，并放入到池中</span><br>pool.put(type, <span class="hljs-keyword">new</span> ConcreteWebSite(type));<br>&#125;<br><br><span class="hljs-keyword">return</span> (WebSite)pool.get(type);<br>&#125;<br><br><span class="hljs-comment">//获取网站分类的总数 (池中有多少个网站类型)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWebSiteCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> pool.size();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//具体网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteWebSite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSite</span> </span>&#123;<br><span class="hljs-comment">//共享的部分，内部状态</span><br><span class="hljs-keyword">private</span> String type = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//网站发布的形式(类型)</span><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteWebSite</span><span class="hljs-params">(String type)</span> </span>&#123;<br><br><span class="hljs-keyword">this</span>.type = type;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">(User user)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;网站的发布形式为:&quot;</span> + type + <span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">// 网站工厂类，根据需要返回压一个网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSiteFactory</span> </span>&#123;<br><br><span class="hljs-comment">//集合， 充当池的作用</span><br><span class="hljs-keyword">private</span> HashMap&lt;String, ConcreteWebSite&gt; pool = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br><span class="hljs-comment">//根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> WebSite <span class="hljs-title">getWebSiteCategory</span><span class="hljs-params">(String type)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!pool.containsKey(type)) &#123;<br><span class="hljs-comment">//就创建一个网站，并放入到池中</span><br>pool.put(type, <span class="hljs-keyword">new</span> ConcreteWebSite(type));<br>&#125;<br><br><span class="hljs-keyword">return</span> (WebSite)pool.get(type);<br>&#125;<br><br><span class="hljs-comment">//获取网站分类的总数 (池中有多少个网站类型)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWebSiteCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> pool.size();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//具体网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteWebSite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSite</span> </span>&#123;<br><span class="hljs-comment">//共享的部分，内部状态</span><br><span class="hljs-keyword">private</span> String type = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//网站发布的形式(类型)</span><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteWebSite</span><span class="hljs-params">(String type)</span> </span>&#123;<br><br><span class="hljs-keyword">this</span>.type = type;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">(User user)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;网站的发布形式为:&quot;</span> + type + <span class="hljs-string">" 在使用中 .. 使用者是"</span> + user.getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//Client 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建一个工厂类</span><br>WebSiteFactory factory = <span class="hljs-keyword">new</span> WebSiteFactory();<br><span class="hljs-comment">// 客户要一个以新闻形式发布的网站</span><br>WebSite webSite1 = factory.getWebSiteCategory(<span class="hljs-string">&quot;新闻&quot;</span>);<br><br>webSite1.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;tom&quot;</span>));<br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite2 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite2.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;jack&quot;</span>));<br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite3 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite3.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;smith&quot;</span>));<br><br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite4 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite4.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;king&quot;</span>));<br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">//Client 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建一个工厂类</span><br>WebSiteFactory factory = <span class="hljs-keyword">new</span> WebSiteFactory();<br><span class="hljs-comment">// 客户要一个以新闻形式发布的网站</span><br>WebSite webSite1 = factory.getWebSiteCategory(<span class="hljs-string">&quot;新闻&quot;</span>);<br><br>webSite1.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;tom&quot;</span>));<br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite2 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite2.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;jack&quot;</span>));<br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite3 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite3.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;smith&quot;</span>));<br><br><span class="hljs-comment">// 客户要一个以博客形式发布的网站</span><br>WebSite webSite4 = factory.getWebSiteCategory(<span class="hljs-string">&quot;博客&quot;</span>);<br>webSite4.use(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;king&quot;</span>));<br>System.out.println(<span class="hljs-string">"网站的分类共="</span> + factory.getWebSiteCount());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-4"><a href="#源码分析-4" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyWeight</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//如果 Integer.valueOf(x) x 在  -128 --- 127 直接，就是使用享元模式返回,如果不在</span><br><span class="hljs-comment">//范围类，则仍然 new </span><br><span class="hljs-comment">//小结:</span><br><span class="hljs-comment">//1. 在valueOf 方法中，先判断值是否在 IntegerCache 中，</span><br>         <span class="hljs-comment">//如果不在，就创建新的Integer(new), 否则，就直接从 缓存池返回</span><br><span class="hljs-comment">//2. valueOf 方法，就使用到享元模式</span><br><span class="hljs-comment">//3. 如果使用valueOf 方法得到一个Integer 实例，范围在 -128 - 127 ，执行速度比 new 快</span><br><br>Integer x = Integer.valueOf(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 x实例，类型 Integer</span><br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 y 实例，类型 Integer</span><br>Integer z = Integer.valueOf(<span class="hljs-number">127</span>);<span class="hljs-comment">//..</span><br>Integer w = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">127</span>);<br><br>System.out.println(x.equals(y)); <span class="hljs-comment">// 大小，true</span><br>System.out.println(x == y ); <span class="hljs-comment">//  false</span><br>System.out.println(x == z ); <span class="hljs-comment">// true</span><br>System.out.println(w == x ); <span class="hljs-comment">// false</span><br>System.out.println(w == y ); <span class="hljs-comment">// false</span><br><br>Integer x1 = Integer.valueOf(<span class="hljs-number">200</span>);<br>Integer x2 = Integer.valueOf(<span class="hljs-number">200</span>);<br>System.out.println(<span class="hljs-string">&quot;x1==x2&quot;</span> + (x1 == x2)); <span class="hljs-comment"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyWeight</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//如果 Integer.valueOf(x) x 在  -128 --- 127 直接，就是使用享元模式返回,如果不在</span><br><span class="hljs-comment">//范围类，则仍然 new </span><br><span class="hljs-comment">//小结:</span><br><span class="hljs-comment">//1. 在valueOf 方法中，先判断值是否在 IntegerCache 中，</span><br>         <span class="hljs-comment">//如果不在，就创建新的Integer(new), 否则，就直接从 缓存池返回</span><br><span class="hljs-comment">//2. valueOf 方法，就使用到享元模式</span><br><span class="hljs-comment">//3. 如果使用valueOf 方法得到一个Integer 实例，范围在 -128 - 127 ，执行速度比 new 快</span><br><br>Integer x = Integer.valueOf(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 x实例，类型 Integer</span><br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">127</span>); <span class="hljs-comment">// 得到 y 实例，类型 Integer</span><br>Integer z = Integer.valueOf(<span class="hljs-number">127</span>);<span class="hljs-comment">//..</span><br>Integer w = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">127</span>);<br><br>System.out.println(x.equals(y)); <span class="hljs-comment">// 大小，true</span><br>System.out.println(x == y ); <span class="hljs-comment">//  false</span><br>System.out.println(x == z ); <span class="hljs-comment">// true</span><br>System.out.println(w == x ); <span class="hljs-comment">// false</span><br>System.out.println(w == y ); <span class="hljs-comment">// false</span><br><br>Integer x1 = Integer.valueOf(<span class="hljs-number">200</span>);<br>Integer x2 = Integer.valueOf(<span class="hljs-number">200</span>);<br>System.out.println(<span class="hljs-string">&quot;x1==x2&quot;</span> + (x1 == x2)); <span class="hljs-comment">// false</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ol><li>享元模式中的享可以理解为共享，元理解为对象，就是共享对象模式。比如共享连接池</li><li>系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</li><li>用唯一标识码判断，如果内存中有，则返回这个唯一标识码所标识的对象，用<code>HashMap/HashTable</code>存储</li><li>享元模式大大的减少了对象的创建，降低了程序内存的占用，提高效率。</li><li>享元模式提高了系统的复杂度，因为需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这点在使用享元模式需要注意。</li><li>使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制，</li><li>享元模式经典的应用场景是需要缓冲池，比如String常量池，数据库连接池，以及围棋观赛黑白子对象。</li></ol><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><h4 id="案例分析-3"><a href="#案例分析-3" class="headerlink" title="案例分析"></a>案例分析</h4><p>制作豆浆</p><h4 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>模板方法模式(Template  Method Pattern) ,在一个抽象类公开了执行它的方法的模板。它的子类可以按需重写方法实现，但调用将以抽象类中定义的方法执行。</li><li>简单说模板方法模式定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构就可以重定义该算法的某些步骤。</li></ol><p>原理类图说明</p><ul><li><code>AbstractClass</code> 抽象类，类中实现了模板方法，定义了算法的骨架，具体子类需要去实现 其他的抽象方法</li><li><code>ConcreateClass</code> 实现抽象方法，已完成算法中特点子类的步骤</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//抽象类，表示豆浆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><br><span class="hljs-comment">//模板方法, make , 模板方法可以做成final , 不让子类去覆盖.</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">()</span> </span>&#123;<br>select(); <br><span class="hljs-keyword">if</span>(customerWantCondiments()) &#123; <span class="hljs-comment">//判断是实现默认方法还是子类重写的方法</span><br>addCondiments();<br>&#125;<br>soak();<br>beat();<br>&#125;<br><br><span class="hljs-comment">//选材料</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第一步：选择好的新鲜黄豆  &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//添加不同的配料， 抽象方法, 子类具体实现</span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//浸泡</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">soak</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第三步， 黄豆和配料开始浸泡， 需要3小时 &quot;</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">beat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第四步：黄豆和配料放到豆浆机去打碎  &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//钩子方法，决定是否需要添加配料</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">customerWantCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-comment">//抽象类，表示豆浆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><br><span class="hljs-comment">//模板方法, make , 模板方法可以做成final , 不让子类去覆盖.</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">()</span> </span>&#123;<br>select(); <br><span class="hljs-keyword">if</span>(customerWantCondiments()) &#123; <span class="hljs-comment">//判断是实现默认方法还是子类重写的方法</span><br>addCondiments();<br>&#125;<br>soak();<br>beat();<br>&#125;<br><br><span class="hljs-comment">//选材料</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第一步：选择好的新鲜黄豆  &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//添加不同的配料， 抽象方法, 子类具体实现</span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//浸泡</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">soak</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第三步， 黄豆和配料开始浸泡， 需要3小时 &quot;</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">beat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;第四步：黄豆和配料放到豆浆机去打碎  &quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//钩子方法，决定是否需要添加配料</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">customerWantCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedBeanSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 加入上好的红豆 &quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PureSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//空实现</span><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">customerWantCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PeanutSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedBeanSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 加入上好的红豆 &quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PureSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//空实现</span><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">customerWantCondiments</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PeanutSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">" 加入上好的花生 "</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;----制作红豆豆浆----&quot;</span>);<br>SoyaMilk redBeanSoyaMilk = <span class="hljs-keyword">new</span> RedBeanSoyaMilk();<br>redBeanSoyaMilk.make();<br><br>System.out.println(<span class="hljs-string">&quot;----制作花生豆浆----&quot;</span>);<br>SoyaMilk peanutSoyaMilk = <span class="hljs-keyword">new</span> PeanutSoyaMilk();<br>peanutSoyaMilk.make();<br><br>System.out.println(<span class="hljs-string">&quot;----制作纯豆浆----&quot;</span>);<br>SoyaMilk pureSoyaMilk = <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;----制作红豆豆浆----&quot;</span>);<br>SoyaMilk redBeanSoyaMilk = <span class="hljs-keyword">new</span> RedBeanSoyaMilk();<br>redBeanSoyaMilk.make();<br><br>System.out.println(<span class="hljs-string">&quot;----制作花生豆浆----&quot;</span>);<br>SoyaMilk peanutSoyaMilk = <span class="hljs-keyword">new</span> PeanutSoyaMilk();<br>peanutSoyaMilk.make();<br><br>System.out.println(<span class="hljs-string">&quot;----制作纯豆浆----&quot;</span>);<br>SoyaMilk pureSoyaMilk = <span class="hljs-keyword">new</span> PureSoyaMilk();<br>pureSoyaMilk.make();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在模板方法中添加一个钩子方法默认不做事，子类就可以根据狗子方法来决定是否覆盖这个方法。</p><p>这样就可以默认实现了</p><h4 id="源码分析-5"><a href="#源码分析-5" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p>Spring中 <code>IOC</code>容器初始化的时候 使用了模板模式</p></blockquote><h4 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h4><ol><li>基本思想是，算法只存在于一个地方，也就是在父类中，容易修改。修改算法时，只需要修改父类方法或者已经实现的某些步骤，子类就会继承这些修改。</li><li>实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。</li><li>即统一了算法，也提供了很大的灵活性，父类的模板方法确保了算法结构保持不变，同时由子类提供部分步骤的实现。</li><li>该模式不足之处是 每一个不同的实现都需要一个子类实现，容易导致类的个数增加导致系统庞大</li><li>一般方法都加上关键字final，防止子类重写模板方法</li><li>模板方法使用场景：当要完成在某个过程，该过程要执行一系列步骤，这一系列的步骤基本相同，单个别步骤在实现的时候可能不同，通常考虑用模板方法来处理。</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h4 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h4><p>1)我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装 <code>app</code>就可以控制对这些家电<br>工作。<br>2)这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个<code>App</code>，分别控制，我们希望只要一个<code>app</code><br>就可以控制全部智能家电。<br>3)要实现一个<code>app</code>控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给app调用，这时就<br>可以考虑使用命令模式。<br>4)命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.<br>5)在我们的例子中，动作的请求者是手机 <code>app</code>，动作的执行者是每个厂商的一个家电产品</p><h4 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>命令模式(Command Pattern):在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收<br>者是谁，也不知道被请求的操作是哪个，<br>我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计</li><li>命名模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</li><li>在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求(即命名)，同时命令模式<br>也支持可撤销的操作。</li><li>通俗易懂的理解:将军发布命令，士兵去执行。其中有几个角色:将军(命令发布者)、士兵(命令的具体执<br>行者)、命令(连接将军和士兵)。<br><code>lInvoker</code>是调用者（将军)，Receiver是被调用者（士兵)，<code>MyCommand</code>是命令，实现了Command接口，持有接收对象</li></ul><h4 id="原理类图分析"><a href="#原理类图分析" class="headerlink" title="原理类图分析"></a>原理类图分析</h4><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>类图分析：</p><p><img src="/2021/12/03/javaDesignMode/command.png" alt="java"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//创建命令接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//执行动作(操作)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//撤销动作(操作)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//关灯命令</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">// 聚合LightReceiver</span><br>LightReceiver light;<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LightOffCommand</span><span class="hljs-params">(LightReceiver light)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.light = light;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 调用接收者的方法</span><br>light.off();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 调用接收者的方法</span><br>light.on();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//开灯命令</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//聚合LightReceiver</span><br>LightReceiver light;<br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LightOnCommand</span><span class="hljs-params">(LightReceiver light)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.light = light;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用接收者的方法</span><br>light.on();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用接收者的方法</span><br>light.off();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做</span><br><span class="hljs-comment"> * 其实，这样是一种设计模式, 可以省掉对空判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//只需要实现两个空方法 钩子</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//任务接收者 执行者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightReceiver</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">on</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 电灯打开了.. &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">off</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-comment">//创建命令接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//执行动作(操作)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//撤销动作(操作)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//关灯命令</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">// 聚合LightReceiver</span><br>LightReceiver light;<br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LightOffCommand</span><span class="hljs-params">(LightReceiver light)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.light = light;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 调用接收者的方法</span><br>light.off();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 调用接收者的方法</span><br>light.on();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//开灯命令</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//聚合LightReceiver</span><br>LightReceiver light;<br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LightOnCommand</span><span class="hljs-params">(LightReceiver light)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.light = light;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用接收者的方法</span><br>light.on();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//调用接收者的方法</span><br>light.off();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做</span><br><span class="hljs-comment"> * 其实，这样是一种设计模式, 可以省掉对空判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">//只需要实现两个空方法 钩子</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//任务接收者 执行者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightReceiver</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">on</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot; 电灯打开了.. &quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">off</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">" 电灯关闭了.. "</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//控制器 遥控器 Invoker 任务发布者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteController</span> </span>&#123;<br><br><span class="hljs-comment">// 开 按钮的命令数组</span><br>Command[] onCommands;<br>Command[] offCommands;<br><br><span class="hljs-comment">// 执行撤销的命令</span><br>Command undoCommand;<br><br><span class="hljs-comment">// 构造器，完成对按钮初始化</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RemoteController</span><span class="hljs-params">()</span> </span>&#123;<br>onCommands = <span class="hljs-keyword">new</span> Command[<span class="hljs-number">5</span>];<br>offCommands = <span class="hljs-keyword">new</span> Command[<span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>onCommands[i] = <span class="hljs-keyword">new</span> NoCommand();<br>offCommands[i] = <span class="hljs-keyword">new</span> NoCommand();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 给我们的按钮设置你需要的命令</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommand</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, Command onCommand, Command offCommand)</span> </span>&#123;<br>onCommands[no] = onCommand;<br>offCommands[no] = offCommand;<br>&#125;<br><br><span class="hljs-comment">// 按下开按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onButtonWasPushed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123; <span class="hljs-comment">// no 0</span><br><span class="hljs-comment">// 找到你按下的开的按钮， 并调用对应方法</span><br>onCommands[no].execute();<br><span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>undoCommand = onCommands[no];<br><br>&#125;<br><br><span class="hljs-comment">// 按下开按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">offButtonWasPushed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123; <span class="hljs-comment">// no 0</span><br><span class="hljs-comment">// 找到你按下的关的按钮， 并调用对应方法</span><br>offCommands[no].execute();<br><span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>undoCommand = offCommands[no];<br><br>&#125;<br><br><span class="hljs-comment">// 按下撤销按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undoButtonWasPushed</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-comment">//控制器 遥控器 Invoker 任务发布者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteController</span> </span>&#123;<br><br><span class="hljs-comment">// 开 按钮的命令数组</span><br>Command[] onCommands;<br>Command[] offCommands;<br><br><span class="hljs-comment">// 执行撤销的命令</span><br>Command undoCommand;<br><br><span class="hljs-comment">// 构造器，完成对按钮初始化</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RemoteController</span><span class="hljs-params">()</span> </span>&#123;<br>onCommands = <span class="hljs-keyword">new</span> Command[<span class="hljs-number">5</span>];<br>offCommands = <span class="hljs-keyword">new</span> Command[<span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>onCommands[i] = <span class="hljs-keyword">new</span> NoCommand();<br>offCommands[i] = <span class="hljs-keyword">new</span> NoCommand();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 给我们的按钮设置你需要的命令</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommand</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, Command onCommand, Command offCommand)</span> </span>&#123;<br>onCommands[no] = onCommand;<br>offCommands[no] = offCommand;<br>&#125;<br><br><span class="hljs-comment">// 按下开按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onButtonWasPushed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123; <span class="hljs-comment">// no 0</span><br><span class="hljs-comment">// 找到你按下的开的按钮， 并调用对应方法</span><br>onCommands[no].execute();<br><span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>undoCommand = onCommands[no];<br><br>&#125;<br><br><span class="hljs-comment">// 按下开按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">offButtonWasPushed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123; <span class="hljs-comment">// no 0</span><br><span class="hljs-comment">// 找到你按下的关的按钮， 并调用对应方法</span><br>offCommands[no].execute();<br><span class="hljs-comment">// 记录这次的操作，用于撤销</span><br>undoCommand = offCommands[no];<br><br>&#125;<br><br><span class="hljs-comment">// 按下撤销按钮</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undoButtonWasPushed</span><span class="hljs-params">()</span> </span>&#123;<br>undoCommand.undo();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre class=" language-hljs java"><span class="hljs-comment">//Client客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//使用命令设计模式，完成通过遥控器，对电灯的操作</span><br><span class="hljs-comment">//创建电灯的对象(接受者)</span><br>LightReceiver lightReceiver = <span class="hljs-keyword">new</span> LightReceiver();<br><br><span class="hljs-comment">//创建电灯相关的开关命令</span><br>LightOnCommand lightOnCommand = <span class="hljs-keyword">new</span> LightOnCommand(lightReceiver);<br>LightOffCommand lightOffCommand = <span class="hljs-keyword">new</span> LightOffCommand(lightReceiver);<br><br><span class="hljs-comment">//需要一个遥控器</span><br>RemoteController remoteController = <span class="hljs-keyword">new</span> RemoteController();<br><br><span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作</span><br>remoteController.setCommand(<span class="hljs-number">0</span>, lightOnCommand, lightOffCommand);<br><br>System.out.println(<span class="hljs-string">&quot;--------按下灯的开按钮-----------&quot;</span>);<br>remoteController.onButtonWasPushed(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;--------按下灯的关按钮-----------&quot;</span>);<br>remoteController.offButtonWasPushed(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;--------按下撤销按钮-----------&quot;</span>);<br>remoteController.undoButtonWasPushed();<br><br><br><span class="hljs-comment">//如果后期需要扩展新的命令 就非常容易扩展 不需要修改Controller的内容 符合开闭原则</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">System.out.println(&quot;=========使用遥控器操作电视机==========&quot;);</span><br><span class="hljs-comment">TVReceiver tvReceiver = new TVReceiver();</span><br><span class="hljs-comment">TVOffCommand tvOffCommand = new TVOffCommand(tvReceiver);</span><br><span class="hljs-comment">TVOnCommand tvOnCommand = new TVOnCommand(tvReceiver);</span><br><span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 1 是电视机的开和关的操作</span><br><span class="hljs-comment">remoteController.setCommand(1, tvOnCommand, tvOffCommand);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;--------按下电视机的开按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.onButtonWasPushed(1);</span><br><span class="hljs-comment">System.out.println(&quot;--------按下电视机的关按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.offButtonWasPushed(1);</span><br><span class="hljs-comment">System.out.println(&quot;--------按下撤销按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.undoButtonWasPushed();</span><br><span class="hljs-comment"><code class="language-hljs java"><span class="hljs-comment">//Client客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//使用命令设计模式，完成通过遥控器，对电灯的操作</span><br><span class="hljs-comment">//创建电灯的对象(接受者)</span><br>LightReceiver lightReceiver = <span class="hljs-keyword">new</span> LightReceiver();<br><br><span class="hljs-comment">//创建电灯相关的开关命令</span><br>LightOnCommand lightOnCommand = <span class="hljs-keyword">new</span> LightOnCommand(lightReceiver);<br>LightOffCommand lightOffCommand = <span class="hljs-keyword">new</span> LightOffCommand(lightReceiver);<br><br><span class="hljs-comment">//需要一个遥控器</span><br>RemoteController remoteController = <span class="hljs-keyword">new</span> RemoteController();<br><br><span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作</span><br>remoteController.setCommand(<span class="hljs-number">0</span>, lightOnCommand, lightOffCommand);<br><br>System.out.println(<span class="hljs-string">&quot;--------按下灯的开按钮-----------&quot;</span>);<br>remoteController.onButtonWasPushed(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;--------按下灯的关按钮-----------&quot;</span>);<br>remoteController.offButtonWasPushed(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;--------按下撤销按钮-----------&quot;</span>);<br>remoteController.undoButtonWasPushed();<br><br><br><span class="hljs-comment">//如果后期需要扩展新的命令 就非常容易扩展 不需要修改Controller的内容 符合开闭原则</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">System.out.println(&quot;=========使用遥控器操作电视机==========&quot;);</span><br><span class="hljs-comment">TVReceiver tvReceiver = new TVReceiver();</span><br><span class="hljs-comment">TVOffCommand tvOffCommand = new TVOffCommand(tvReceiver);</span><br><span class="hljs-comment">TVOnCommand tvOnCommand = new TVOnCommand(tvReceiver);</span><br><span class="hljs-comment">//给我们的遥控器设置命令, 比如 no = 1 是电视机的开和关的操作</span><br><span class="hljs-comment">remoteController.setCommand(1, tvOnCommand, tvOffCommand);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;--------按下电视机的开按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.onButtonWasPushed(1);</span><br><span class="hljs-comment">System.out.println(&quot;--------按下电视机的关按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.offButtonWasPushed(1);</span><br><span class="hljs-comment">System.out.println(&quot;--------按下撤销按钮-----------&quot;);</span><br><span class="hljs-comment">remoteController.undoButtonWasPushed();</span><br><span class="hljs-comment">*/</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="源码分析-6"><a href="#源码分析-6" class="headerlink" title="源码分析"></a>源码分析</h4><blockquote><p>Spring中的JDBCTemplate中使用了模板模式</p></blockquote><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><blockquote><p>注意事项和细节</p></blockquote><ol><li>将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的execute()方法就可以让接收着工作，而不必知道记得接收着对象谁，如何实现的，命令对象会负责让接受者执行请求的动作，也就是“请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了扭到桥梁的作用。</li><li>容易设计一个命令队列，只要把命令对象放到队列，就可以实现多线程的命令</li><li>容易实现对请求的撤销和重做</li><li>命令模式的不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在使用的时候要注意</li><li>空命令也是一种设计模式，它为我们省去了判空的操作，在上面的案例，如果没有用空命令，那么每一个按键我们都要做判空操作，对编码带来了一定的麻烦。</li><li>命令模式经典的应用场景：界面的一个按钮都是一条命令，模拟CMD（DOS）命令，订单的撤销/恢复、触发反馈机制</li></ol>]]></content>
      
      
      <categories>
          
          <category> designMode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
